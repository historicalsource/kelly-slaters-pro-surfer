#include "ngl_vudefs.h"

;#define OLD_WAVEDARK  ; to re-enable slow-but-simple routine
;#define OLD_WAVEHIGHLIGHT ; to re-enable slow-but-simple routine

/*----------------------------------------------------------------------------------------------------------------------
    Start of microcode.
----------------------------------------------------------------------------------------------------------------------*/
.align 4
.global nglLoadMicrocode
nglLoadMicrocode:
DmaRet *
.align 4
MPG 0, *
.global nglBaseAddr
nglBaseAddr:

/*----------------------------------------------------------------------------------------------------------------------
    nglLoadIdentityAddr

    Preloads an identity matrix into NGLMEM_LOCAL_TO_WORLD.
----------------------------------------------------------------------------------------------------------------------*/
.equr LToW1, VF01                  ; local to world matrix (loaded)
.equr LToW2, VF02
.equr LToW3, VF03
.equr Zero, VF04
.global nglLoadIdentityAddr
nglLoadIdentityAddr:
        NOP                             MR32 LToW3, VF00
        NOP                             MR32 LToW2, LToW3
        NOP                             MR32 LToW1, LToW2

        NOP                             SQ VF00, NGLMEM_LOCAL_TO_WORLD+3(VI00)
        NOP                             SQ LToW3, NGLMEM_LOCAL_TO_WORLD+2(VI00)
        NOP                             SQ LToW2, NGLMEM_LOCAL_TO_WORLD+1(VI00)
        NOP                             SQ LToW1, NGLMEM_LOCAL_TO_WORLD+0(VI00)

        NOP[E]                          NOP
        NOP                             NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglNodeSetupAddr

    First function to be called once for each node, before processing all the batches.  Currently calculates various
    matricees, eventually it could do other stuff.

    Note that all of these matrices arent required, we could add flags to tell it to jump over some of the computations.

----------------------------------------------------------------------------------------------------------------------*/
.equr LToW1, VF01                  ; local to world matrix (loaded)
.equr LToW2, VF02
.equr LToW3, VF03
.equr LToW4, VF04

.equr WToS1, VF05                  ; world to screen matrix (loaded)
.equr WToS2, VF06
.equr WToS3, VF07
.equr WToS4, VF08

.equr WToC1, VF09                  ; world to clip matrix (loaded)
.equr WToC2, VF10
.equr WToC3, VF11
.equr WToC4, VF12

.equr LToS1, VF13                  ; local to screen matrix (calculated)
.equr LToS2, VF14
.equr LToS3, VF15
.equr LToS4, VF16

.equr LToC1, VF17                  ; local to clip matrix (calculated)
.equr LToC2, VF18
.equr LToC3, VF19
.equr LToC4, VF20

.equr WToC1, VF21                  ; world to view matrix (loaded)
.equr WToC2, VF22
.equr WToC3, VF23
.equr WToC4, VF24

.equr LToV1, VF25                  ; local to view matrix (calculated)
.equr LToV2, VF26
.equr LToV3, VF27
.equr LToV4, VF28

.equr WToV1, VF05                  ; local to view matrix (calculated)
.equr WToV2, VF06
.equr WToV3, VF07
.equr WToV4, VF08

.equr WToL1, VF09                  ; local to view matrix (calculated)
.equr WToL2, VF10
.equr WToL3, VF11
.equr WToL4, VF12

.equr VToL1, VF05                  ; local to view matrix (calculated)
.equr VToL2, VF06
.equr VToL3, VF07
.equr VToL4, VF08

.equr Pass, VI01
.equr Flags, VI02

.global nglNodeSetupAddr
nglNodeSetupAddr:
        NOP                             LQ WToS1, NGLMEM_WORLD_TO_SCREEN+0(VI00)
        NOP                             LQ WToS2, NGLMEM_WORLD_TO_SCREEN+1(VI00)
        NOP                             LQ WToS3, NGLMEM_WORLD_TO_SCREEN+2(VI00)
        NOP                             LQ WToS4, NGLMEM_WORLD_TO_SCREEN+3(VI00)

        NOP                             LQ LToW1, NGLMEM_LOCAL_TO_WORLD+0(VI00)
        NOP                             LQ LToW2, NGLMEM_LOCAL_TO_WORLD+1(VI00)
        NOP                             LQ LToW3, NGLMEM_LOCAL_TO_WORLD+2(VI00)
        NOP                             LQ LToW4, NGLMEM_LOCAL_TO_WORLD+3(VI00)

        ; calculate local to screen
        MULAx ACC, WToS1, LToW1         LQ WToC1, NGLMEM_WORLD_TO_CLIP+0(VI00)
        MADDAy ACC, WToS2, LToW1        LQ WToC2, NGLMEM_WORLD_TO_CLIP+1(VI00)
        MADDAz ACC, WToS3, LToW1        LQ WToC3, NGLMEM_WORLD_TO_CLIP+2(VI00)
        MADDw LToS1, WToS4, LToW1       LQ WToC4, NGLMEM_WORLD_TO_CLIP+3(VI00)
        MULAx ACC, WToS1, LToW2         NOP
        MADDAy ACC, WToS2, LToW2        NOP
        MADDAz ACC, WToS3, LToW2        NOP
        MADDw LToS2, WToS4, LToW2       NOP
        MULAx ACC, WToS1, LToW3         NOP
        MADDAy ACC, WToS2, LToW3        NOP
        MADDAz ACC, WToS3, LToW3        NOP
        MADDw LToS3, WToS4, LToW3       NOP
        MULAx ACC, WToS1, LToW4         NOP
        MADDAy ACC, WToS2, LToW4        NOP
        MADDAz ACC, WToS3, LToW4        NOP
        MADDw LToS4, WToS4, LToW4       NOP

        ; calculate local to clip
        MULAx ACC, WToC1, LToW1         SQ LToS1, NGLMEM_LOCAL_TO_SCREEN+0(VI00)
        MADDAy ACC, WToC2, LToW1        SQ LToS2, NGLMEM_LOCAL_TO_SCREEN+1(VI00)
        MADDAz ACC, WToC3, LToW1        SQ LToS3, NGLMEM_LOCAL_TO_SCREEN+2(VI00)
        MADDw LToC1, WToC4, LToW1       SQ LToS4, NGLMEM_LOCAL_TO_SCREEN+3(VI00)
        MULAx ACC, WToC1, LToW2         NOP
        MADDAy ACC, WToC2, LToW2        NOP
        MADDAz ACC, WToC3, LToW2        NOP
        MADDw LToC2, WToC4, LToW2       NOP
        MULAx ACC, WToC1, LToW3         NOP
        MADDAy ACC, WToC2, LToW3        NOP
        MADDAz ACC, WToC3, LToW3        NOP
        MADDw LToC3, WToC4, LToW3       NOP
        MULAx ACC, WToC1, LToW4         LQ WToV1, NGLMEM_WORLD_TO_VIEW+0(VI00)
        MADDAy ACC, WToC2, LToW4        LQ WToV2, NGLMEM_WORLD_TO_VIEW+1(VI00)
        MADDAz ACC, WToC3, LToW4        LQ WToV3, NGLMEM_WORLD_TO_VIEW+2(VI00)
        MADDw LToC4, WToC4, LToW4       LQ WToV4, NGLMEM_WORLD_TO_VIEW+3(VI00)

        ; calculate local to view
        MULAx ACC, WToV1, LToW1         SQ LToC1, NGLMEM_LOCAL_TO_CLIP+0(VI00)
        MADDAy ACC, WToV2, LToW1        SQ LToC2, NGLMEM_LOCAL_TO_CLIP+1(VI00)
        MADDAz ACC, WToV3, LToW1        SQ LToC3, NGLMEM_LOCAL_TO_CLIP+2(VI00)
        MADDw LToV1, WToV4, LToW1       SQ LToC4, NGLMEM_LOCAL_TO_CLIP+3(VI00)
        MULAx ACC, WToV1, LToW2         NOP
        MADDAy ACC, WToV2, LToW2        NOP
        MADDAz ACC, WToV3, LToW2        NOP
        MADDw LToV2, WToV4, LToW2       NOP
        MULAx ACC, WToV1, LToW3         NOP
        MADDAy ACC, WToV2, LToW3        NOP
        MADDAz ACC, WToV3, LToW3        NOP
        MADDw LToV3, WToV4, LToW3       NOP
        MULAx ACC, WToV1, LToW4         NOP
        MADDAy ACC, WToV2, LToW4        NOP
        MADDAz ACC, WToV3, LToW4        NOP
        MADDw LToV4, WToV4, LToW4       NOP

        ; orthonormally invert local to world into world to local
        ADD.x WToL1, VF00, LToW1        SQ LToV1, NGLMEM_LOCAL_TO_VIEW+0(VI00)
        ADD.y WToL2, VF00, LToW2        SQ LToV2, NGLMEM_LOCAL_TO_VIEW+1(VI00)
        ADD.z WToL3, VF00, LToW3        SQ LToV3, NGLMEM_LOCAL_TO_VIEW+2(VI00)
        ADDx.y WToL1, VF00, LToW2       SQ LToV4, NGLMEM_LOCAL_TO_VIEW+3(VI00)
        ADDy.x WToL2, VF00, LToW1       NOP
        ADDz.x WToL3, VF00, LToW1       NOP
        ADDx.z WToL1, VF00, LToW3       NOP
        ADDy.z WToL2, VF00, LToW3       NOP
        ADDz.y WToL3, VF00, LToW2       NOP
        ADDa ACC, VF00, VF00            NOP
        MSUBAx ACC, WToL1, LToW4        NOP
        MSUBAy ACC, WToL2, LToW4        NOP
        MSUBz WToL4, WToL3, LToW4       NOP
        NOP                             SQ WToL1, NGLMEM_WORLD_TO_LOCAL+0(VI00)
        NOP                             SQ WToL2, NGLMEM_WORLD_TO_LOCAL+1(VI00)
        NOP                             SQ WToL3, NGLMEM_WORLD_TO_LOCAL+2(VI00)
        NOP                             SQ WToL4, NGLMEM_WORLD_TO_LOCAL+3(VI00)

        ; orthonormally invert local to view into view to local
        ADD.x VToL1, VF00, LToV1        NOP
        ADD.y VToL2, VF00, LToV2        NOP
        ADD.z VToL3, VF00, LToV3        NOP
        ADDx.y VToL1, VF00, LToV2       NOP
        ADDy.x VToL2, VF00, LToV1       NOP
        ADDz.x VToL3, VF00, LToV1       NOP
        ADDx.z VToL1, VF00, LToV3       NOP
        ADDy.z VToL2, VF00, LToV3       NOP
        ADDz.y VToL3, VF00, LToV2       NOP
        ADDa ACC, VF00, VF00            NOP
        MSUBAx ACC, VToL1, LToV4        NOP
        MSUBAy ACC, VToL2, LToV4        NOP
        MSUBz VToL4, VToL3, LToV4       NOP
        NOP                             SQ VToL1, NGLMEM_VIEW_TO_LOCAL+0(VI00)
        NOP                             SQ VToL2, NGLMEM_VIEW_TO_LOCAL+1(VI00)
        NOP                             SQ VToL3, NGLMEM_VIEW_TO_LOCAL+2(VI00)
        NOP                             SQ VToL4, NGLMEM_VIEW_TO_LOCAL+3(VI00)

        NOP[E]                          NOP
        NOP                             NOP

        NOP                             B nglCommandListAddr            ; MSCNT from this function calls nglCommandListAddr.
        NOP                             NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglNoCommandListAddr

    Does nothing, this replaces nglCommandListAddr when nglStageEnable.CommandList is 0.
----------------------------------------------------------------------------------------------------------------------*/
.global nglNoCommandListAddr
nglNoCommandListAddr:
        NOP[E]                          NOP
        NOP                             NOP
        NOP                             B nglNoCommandListAddr
        NOP                             NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglCommandListAddr

    This is the backbone of the VU renderer, and gets called for each batch of data to execute a list of
    commands, the last one being to kick the data to the GS.

    The first QW in VU memory specifies the index of the list to run, the following QWs contain the offsets
    in VU memory for each command list (this is command list chaining).
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; number of commands left to process

.equr gDataPtr, VI15               ; number of commands left to process
.equr gGIFTagMask, VI14            ; dumb constant 0x7fff
.equr gSrcBufPtr, VI13             ; okay to reassign in vu code.

.equr CommandAddr, VI01            ; current position in the command list

.global nglCommandListAddr
nglCommandListAddr:
        NOP                                     ISW.w VI00, NGLMEM_FLAGS+0(VI00)  ; clear the "return value" slot.

        NOP                                     ILW.w gDataPtr, 0(VI00)         ; get the command list index

        ; temporary hack to not run the GS Reset pass.
        NOP                                     IADDIU Temp, VI00, NGLCMD_VERTEX_LIGHT
        NOP                                     NOP
        NOP                                     IBEQ gDataPtr, Temp, CommandListReallyExit
        NOP                                     NOP

        NOP                                     ILW.w gDataPtr, 1(gDataPtr)     ; get the command list address
        NOP                                     NOP
        NOP                                     IBEQ gDataPtr, VI00, CommandListReallyExit
        NOP                                     IADDIU gGIFTagMask, VI00, 0x7fff

CommandListReturn:
        NOP                                     ILW.x CommandAddr, 0(gDataPtr)
        NOP                                     ILW.w gSrcBufPtr, NGLMEM_SRCBUF+0(VI00)
        NOP                                     IBEQ CommandAddr, VI00, CommandListExit
        NOP                                     IADDIU gDataPtr, gDataPtr, 1
        NOP                                     JR CommandAddr
        NOP                                     NOP

CommandListExit:
        ; if this is really a command list subroutine, return to the parent.
        NOP                                     ILW.w Temp, NGLMEM_FLAGS+0(VI00)
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, CommandListReallyExit
        NOP                                     NOP
        NOP                                     IADDIU gDataPtr, Temp, 0
        NOP                                     B CommandListReturn
        NOP                                     ISW.w VI00, NGLMEM_FLAGS+0(VI00)  ; clear the "return value" slot.

CommandListReallyExit:
        NOP[E]                                  NOP
        NOP                                     NOP

        NOP                                     B nglCommandListAddr        ; for MSCNT support
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglCommandListCallAddr

    Implements calling from one command list to another - only one level of call stack though.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var

.global nglCommandListCallAddr
nglCommandListCallAddr:
        ; first read what command list index to jumping to
        NOP                                     ILW.w Temp, 0(gDataPtr)
        NOP                                     ILW.w Temp, 1(Temp)
        NOP                                     IADDI gDataPtr, gDataPtr, 1

        ; if empty, return immediately
        NOP                                     IBEQ Temp, VI00, CommandListReturn
        NOP                                     NOP

        ; save the return value
        NOP                                     ISW.w gDataPtr, NGLMEM_FLAGS+0(VI00)

        ; then load the address of the beginning of that list and call it
        NOP                                     B CommandListReturn
        NOP                                     IADDI gDataPtr, Temp, 0

/*----------------------------------------------------------------------------------------------------------------------
    nglKickAddr

    Sends verts/data to the GS from the command list.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var

.equr VertCnt, VI02                ; verts in batch counter
.equr DestPtr, VI03                ; dest pointer
.equr ADCField, VI04               ;
.equr ADCMask, VI05                ;

.equr SrcXYZ, VF01                 ; source xyz
.equr TestVal, VF02                ;
.equr GifTag, VF03                 ;

.global nglKickAddr
nglKickAddr:
#if 0
        ; Perform some basic data validation.
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        MULx SrcXYZ, SrcXYZ, VF00               LOI 1000.0
        ADDi TestVal, TestVal, I                IADDIU ADCMask, gGIFTagMask, 1

KickTestVertLoop:
        NOP                                     LQ SrcXYZ, 2(DestPtr)
        ITOF4.xy SrcXYZ, SrcXYZ                 LOI 2048.0
        SUBi.xy SrcXYZ, SrcXYZ, I               IADDI VertCnt, VertCnt, -1
        CLIPw.xyz SrcXYZ, TestVal               IADDI DestPtr, DestPtr, 3
        NOP                                     MTIR ADCField, SrcXYZ.w
        NOP                                     IAND ADCField, ADCField, ADCMask
        NOP                                     NOP
        NOP                                     IBEQ ADCField, ADCMask, TestVertOkay
        NOP                                     NOP
        NOP                                     FCAND VI01, 0x1f
        NOP                                     IBEQ VI01, VI00, TestVertOkay
        NOP                                     NOP

        NOP                                     NOP
        NOP                                     NOP

TestVertOkay:
        NOP                                     IBGTZ VertCnt, KickTestVertLoop
        NOP                                     NOP

#endif

        NOP                                     LQ GifTag, NGLMEM_STRIP_GIFTAG+0(VI00)
        NOP                                     NOP
        NOP                                     XITOP Temp
        NOP                                     IADDIU Temp, Temp, NGLMEM_GIFTAG
        NOP                                     SQ.yzw GifTag, 0(Temp)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     XGKICK Temp
        NOP                                     NOP

        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglMaterialKickAddr

    Sends data to the GS from the command list.  PACKED mode is assumed.
----------------------------------------------------------------------------------------------------------------------*/
.equr DataCnt, VI01                ; number of GS registers counter
.equr TagCnt, VI02                 ; DataCnt | 0x8000
.equr MaskOn, VI03                 ; 0x8000 constant
.equr MaskOff, VI04                 ; 0x7fff

.equr Reg, VF01                    ; register to be swapped

.global nglMaterialKickAddr
nglMaterialKickAddr:
        ; this does a bunch of fancy work to create the GIFTag from the uploaded data the first time through.
        NOP                                     ILW.x DataCnt, 0(gDataPtr)

        NOP                                     IADDIU MaskOff, VI00, 0x7fff
        NOP                                     IADDIU MaskOn, MaskOff, 1

        NOP                                     IOR TagCnt, DataCnt, MaskOn
        NOP                                     ISW.x TagCnt, 0(gDataPtr)

        NOP                                     LQ.yw Reg, NGLMEM_DUMMY_GIFTAG+0(VI00)

        NOP                                     IADDIU TagCnt, VI00, 0xE
        NOP                                     ISW.z TagCnt, 0(gDataPtr)

        NOP                                     SQ.yw Reg, 0(gDataPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     XGKICK gDataPtr

        NOP                                     IADDIU gDataPtr, gDataPtr, 1
        NOP                                     IAND DataCnt, DataCnt, MaskOff
        NOP                                     IADD gDataPtr, gDataPtr, DataCnt

        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglDummyKickAddr

    Executes an empty kick to stall on the GS.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var

.global nglDummyKickAddr
nglDummyKickAddr:
        NOP                                     IADDIU Temp, VI00, NGLMEM_DUMMY_GIFTAG
        NOP                                     XGKICK Temp
        NOP                                     NOP
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglLoadMatrixAddr

    Loads up a Matrix (given as a parameter) and sets it to the current transform matrix

----------------------------------------------------------------------------------------------------------------------*/

.equr KickPtr, VI01                   ; temp var
.equr DummyPtr, VI02                   ; temp var

.equr LToW1, VF01                  ; local to world matrix (loaded)
.equr LToW2, VF02
.equr LToW3, VF03
.equr LToW4, VF04

.equr WToS1, VF05                  ; world to screen matrix (loaded)
.equr WToS2, VF06
.equr WToS3, VF07
.equr WToS4, VF08

.equr LToS1, VF13                  ; local to screen matrix (calculated)
.equr LToS2, VF14
.equr LToS3, VF15
.equr LToS4, VF16
#if 0
.global nglMaskAndKickAddr
nglMaskAndKickAddr:
        nop                             lq GifTag, NGLMEM_STRIP_GIFTAG+0(VI00)
        nop                             nop
        nop                             xitop KickPtr
        nop                             iaddiu KickPtr, KickPtr, NGLMEM_GIFTAG
        nop                             sq.yzw GifTag, 0(Temp)
        nop                             iaddiu DummyPtr, VI00, NGLMEM_DUMMY_GIFTAG  ; setup dummy pointer while we wait
        nop                             nop
        nop                             xgkick DummyPtr
        nop                             iaddiu DummyPtr, VI00, NGLMEM_COMMAND_LIST_END-2    ; setup dummy pointer while we wait
        nop                             lq GifTag, -1(gDataPtr)
        nop                             sq.y GifTag, 1(DummyPtr)
        nop                             nop
        nop                             nop
        nop                             nop
        nop                             xgkick DummyPtr
        nop                             nop
        nop                             xgkick KickPtr
        nop                             b CommandListReturn
        nop                             nop

.global nglKickAndLoadMatrixAddr
nglKickAndLoadMatrixAddr:
        nop                             lq GifTag, NGLMEM_STRIP_GIFTAG+0(VI00)
        nop                             nop
        nop                             xitop KickPtr
        nop                             iaddiu KickPtr, KickPtr, NGLMEM_GIFTAG
        nop                             sq.yzw GifTag, 0(Temp)
        nop                             iaddiu DummyPtr, VI00, NGLMEM_DUMMY_GIFTAG  ; setup dummy pointer while we wait
        nop                             nop
        nop                             xgkick DummyPtr
        nop                             iaddiu DummyPtr, VI00, NGLMEM_COMMAND_LIST_END-2    ; setup dummy pointer while we wait
        nop                             lq GifTag, -1(gDataPtr)
        nop                             sq.y GifTag, 1(DummyPtr)
        nop                             nop
        nop                             nop
        nop                             nop
        nop                             xgkick DummyPtr
        nop                             nop
        nop                             xgkick KickPtr

.global nglLoadMatrixAddr
nglLoadMatrixAddr:
        ; start by loading up the first two values we need, then pipeline the rest
        nop                             lq WToS1, NGLMEM_WORLD_TO_SCREEN+0(VI00)
        nop                             lq LToW1, 0(gDataPtr)                       ; 4 cycles until we can use this
        nop                             lq WToS2, NGLMEM_WORLD_TO_SCREEN+1(VI00)
        nop                             lq WToS3, NGLMEM_WORLD_TO_SCREEN+2(VI00)
        nop                             lq WToS4, NGLMEM_WORLD_TO_SCREEN+3(VI00)    ; WToS1 loaded
        ; calculate local to screen
        mulax ACC, WToS1, LToW1         lq LToW2, 1(gDataPtr)                       ; LtoW1 loaded
        madday ACC, WToS2, LToW1        lq LToW3, 2(gDataPtr)                       ; WToS2 loaded
        maddaz ACC, WToS3, LToW1        lq LToW4, 3(gDataPtr)                       ; WToS3 loaded
        maddw LToS1, WToS4, LToW1       iaddiu gDataPtr, gDataPtr, 4                ; WToS4 loaded, since we are done with data ptr we can incrememt it here
        mulax ACC, WToS1, LToW2         lq WToC1, NGLMEM_WORLD_TO_CLIP+0(VI00)      ; LtoW2 loaded
        madday ACC, WToS2, LToW2        lq WToC2, NGLMEM_WORLD_TO_CLIP+1(VI00)      ; LtoW3 loaded
        maddaz ACC, WToS3, LToW2        lq WToC3, NGLMEM_WORLD_TO_CLIP+2(VI00)      ; LtoW4 loaded
        maddw LToS2, WToS4, LToW2       sq LToS1, NGLMEM_LOCAL_TO_SCREEN+0(VI00)    ; LtoS1 write
        mulax ACC, WToS1, LToW3         lq WToC4, NGLMEM_WORLD_TO_CLIP+3(VI00)      ; WtoC1 loaded
        madday ACC, WToS2, LToW3        nop                                         ; WtoC2 loaded
        maddaz ACC, WToS3, LToW3        nop                                         ; WtoC3 loaded
        maddw LToS3, WToS4, LToW3       sq LToS2, NGLMEM_LOCAL_TO_SCREEN+1(VI00)    ; LtoS2 write
        mulax ACC, WToS1, LToW4         nop                                         ; WtoC4 loaded
        madday ACC, WToS2, LToW4        nop
        maddaz ACC, WToS3, LToW4        nop
        maddw LToS4, WToS4, LToW4       sq LToS3, NGLMEM_LOCAL_TO_SCREEN+2(VI00)    ; LtoS3 write
        ; orthonormally invert local to world into world to local
        add.x WToL1, VF00, LToW1        nop
        add.y WToL2, VF00, LToW2        nop
        add.z WToL3, VF00, LToW3        nop
        addx.y WToL1, VF00, LToW2       sq LToS4, NGLMEM_LOCAL_TO_SCREEN+3(VI00)    ; LtoS4 write
        addy.x WToL2, VF00, LToW1       nop
        addz.x WToL3, VF00, LToW1       nop
        addx.z WToL1, VF00, LToW3       nop
        addy.z WToL2, VF00, LToW3       nop
        addz.y WToL3, VF00, LToW2       nop
        adda ACC, VF00, VF00            nop
        msubax ACC, WToL1, LToW4        sq WToL1, NGLMEM_WORLD_TO_LOCAL+0(VI00)
        msubay ACC, WToL2, LToW4        sq WToL2, NGLMEM_WORLD_TO_LOCAL+1(VI00)
        msubz WToL4, WToL3, LToW4       sq WToL3, NGLMEM_WORLD_TO_LOCAL+2(VI00)
        nop                             sq WToL4, NGLMEM_WORLD_TO_LOCAL+3(VI00)     ; this write will stall until WToL4 is avaliable
        ; branch back to command list processing on restart
        nop                             b CommandListReturn
        nop                             nop
#endif

#ifndef PROJECT_KELLYSLATER
/*----------------------------------------------------------------------------------------------------------------------
    nglNHLShadowAddr

    NHL 2K3 Instanced Shadow Rendering code
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; 
.equr VertCnt, VI02                ; 
.equr SrcPtr, VI03                 ; 
.equr DestReadPtr, VI04            ; 
.equr DestWritePtr, VI05           ; 

.equr MiniBuffer, VI06
.equr InstanceCnt, VI07

.equr XYZ3Bit_1, VI08
.equr XYZ3Bit_2, VI09
.equr XYZ3Bit_3, VI10
.equr XYZ3Bit_4, VI11

.equr FastLoopCountdown, VI12

.equr Center, VF01                 ; center point to transform to, in GS coords
.equr Delta, VF02                  ; direction/scale vector to scale verts, this is scaled by Z

.equr SrcXYZ_1, VF03                   ; direction/scale vector to scale verts, this is scaled by Z
.equr SrcXYZ_2, VF04                   ; direction/scale vector to scale verts, this is scaled by Z
.equr SrcXYZ_3, VF05                   ; direction/scale vector to scale verts, this is scaled by Z
.equr SrcXYZ_4, VF06                   ; direction/scale vector to scale verts, this is scaled by Z

.equr SDelta_1, VF07                   ; delta scaled by SrcZ
.equr SDelta_2, VF08                   ; delta scaled by SrcZ
.equr SDelta_3, VF09                   ; delta scaled by SrcZ
.equr SDelta_4, VF10                   ; delta scaled by SrcZ

.equr SrcXYZ_1_O, VF11                 ; 
.equr SrcXYZ_2_O, VF12                 ; 
.equr SrcXYZ_3_O, VF13                 ; 
.equr SrcXYZ_4_O, VF14                 ; 

.equr GifTag, VF20                     ; direction/scale vector to scale verts, this is scaled by Z

.global nglNHLShadowAddr
nglNHLShadowAddr:
        nop                                     ilw.y InstanceCnt, -1(gDataPtr)
		nop										iaddi FastLoopCountdown, VI00, 2
		
        ; replace tristrip giftag with one that just contains XYZ2
        nop                                     xitop Temp       
        nop                                     lq GifTag, NGLMEM_COMMAND_LIST_END-4(VI00)
        nop                                     sq.yzw GifTag, NGLMEM_GIFTAG+0(Temp)

        nop                                     iadd MiniBuffer, VI00, VI00
		
		; copy to buffer 2 giftag also
        nop                                     lq GifTag, NGLMEM_GIFTAG+0(Temp)
        nop                                     ilw.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        nop                                     iand VertCnt, VertCnt, gGIFTagMask
        nop										iadd Temp, VertCnt, Temp
        nop                                     sq.xyz GifTag, 8+NGLMEM_GIFTAG+0(Temp)		; careful not to bash ADC bit - problem?

        ; initialize SrcXYZ Z fields
        mulx SrcXYZ_1_O, VF00, VF00             nop     
        mulx SrcXYZ_2_O, VF00, VF00             nop     
        mulx SrcXYZ_3_O, VF00, VF00             nop     
        mulx SrcXYZ_4_O, VF00, VF00             nop     
        mulx SrcXYZ_1, VF00, VF00             nop     
        mulx SrcXYZ_2, VF00, VF00             nop     
        mulx SrcXYZ_3, VF00, VF00             nop     
        mulx SrcXYZ_4, VF00, VF00             nop     
        
NextShadowInstance:
        ; load center point and delta, move delta from yw into xy.
        nop                                     lq Center, 0(gDataPtr)
        nop                                     iaddi gDataPtr, gDataPtr, 1
        nop                                     mr32 Delta, Center                      
        nop                                     mr32 Delta, Delta                       
        
        nop                                     xitop Temp       
        nop                                     ilw.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        nop                                     iand VertCnt, VertCnt, gGIFTagMask

        ; swap mini vert buffers (xyz only buffers stored inside the main vert buffer)
        nop                                     iadd DestWritePtr, Temp, VI00
        nop                                     nop
        nop                                     ibeq MiniBuffer, DestWritePtr, ShadowBuffer2
        nop                                     nop

        nop                                     B ShadowBuffer1
        nop                                     iadd MiniBuffer, DestWritePtr, VI00
        
ShadowBuffer2:
        nop                                     iadd MiniBuffer, DestWritePtr, VertCnt
        nop                                     iaddi MiniBuffer, MiniBuffer, 8

ShadowBuffer1:

        ; transform vertices by center and delta
        nop                                     iaddiu DestReadPtr, Temp, NGLMEM_VERT_START
        nop                                     iaddiu DestWritePtr, MiniBuffer, NGLMEM_VERT_START
        nop                                     iadd SrcPtr, Temp, gSrcBufPtr

		nop										iaddi FastLoopCountdown, FastLoopCountdown, -1
		nop										nop
		nop										ibgez FastLoopCountdown, SlowLoop
;		nop										b SlowLoop
		nop										nop

        nop                                     lq.xyz SrcXYZ_1_O, 0(SrcPtr)
        nop                                     lq.xyz SrcXYZ_2_O, 2(SrcPtr)
        nop                                     lq.xyz SrcXYZ_3_O, 4(SrcPtr)
        nop                                     lq.xyz SrcXYZ_4_O, 6(SrcPtr)
        adda.xy ACC, SrcXYZ_1_O, Center			nop
        maddz.xy SrcXYZ_1, Delta, SrcXYZ_1_O	nop
        adda.xy ACC, SrcXYZ_2_O, Center			nop
        maddz.xy SrcXYZ_2, Delta, SrcXYZ_2_O	nop
        adda.xy ACC, SrcXYZ_3_O, Center			iaddi VertCnt, VertCnt, -4
        maddz.xy SrcXYZ_3, Delta, SrcXYZ_3_O	iaddi SrcPtr, SrcPtr, 8
        adda.xy ACC, SrcXYZ_4_O, Center			iaddi DestReadPtr, DestReadPtr, 12
        maddz.xy SrcXYZ_4, Delta, SrcXYZ_4_O	iaddi DestWritePtr, DestWritePtr, 4
        ftoi4.xy SrcXYZ_1, SrcXYZ_1             lq.xyz SrcXYZ_1_O, 0(SrcPtr)
        ftoi4.xy SrcXYZ_2, SrcXYZ_2             lq.xyz SrcXYZ_2_O, 2(SrcPtr)
        ftoi4.xy SrcXYZ_3, SrcXYZ_3             lq.xyz SrcXYZ_3_O, 4(SrcPtr)
        ftoi4.xy SrcXYZ_4, SrcXYZ_4             lq.xyz SrcXYZ_4_O, 6(SrcPtr)
        
ShadowVertLoopFast:
        adda.xy ACC, SrcXYZ_1_O, Center			sq.xyz SrcXYZ_1, -4(DestWritePtr)
        maddz.xy SrcXYZ_1, Delta, SrcXYZ_1_O	sq.xyz SrcXYZ_2, -3(DestWritePtr)
        adda.xy ACC, SrcXYZ_2_O, Center			sq.xyz SrcXYZ_3, -2(DestWritePtr)
        maddz.xy SrcXYZ_2, Delta, SrcXYZ_2_O	sq.xyz SrcXYZ_4, -1(DestWritePtr)
        adda.xy ACC, SrcXYZ_3_O, Center			iaddi VertCnt, VertCnt, -4
        maddz.xy SrcXYZ_3, Delta, SrcXYZ_3_O	iaddi SrcPtr, SrcPtr, 8
        adda.xy ACC, SrcXYZ_4_O, Center			iaddi DestWritePtr, DestWritePtr, 4
        maddz.xy SrcXYZ_4, Delta, SrcXYZ_4_O	lq.xyz SrcXYZ_1_O, 0(SrcPtr)
        ftoi4.xy SrcXYZ_1, SrcXYZ_1				lq.xyz SrcXYZ_2_O, 2(SrcPtr)
        ftoi4.xy SrcXYZ_2, SrcXYZ_2				lq.xyz SrcXYZ_3_O, 4(SrcPtr)
        ftoi4.xy SrcXYZ_3, SrcXYZ_3				ibgtz VertCnt, ShadowVertLoopFast
        ftoi4.xy SrcXYZ_4, SrcXYZ_4				lq.xyz SrcXYZ_4_O, 6(SrcPtr)

		nop										sq.xyz SrcXYZ_1, -4(DestWritePtr)
		nop										sq.xyz SrcXYZ_2, -3(DestWritePtr)
		nop										sq.xyz SrcXYZ_3, -2(DestWritePtr)
		nop										sq.xyz SrcXYZ_4, -1(DestWritePtr)

		nop										b FastLoop
		nop										nop

SlowLoop:
        nop                                     lq.xyz SrcXYZ_1, 0(SrcPtr)
        nop                                     lq.xyz SrcXYZ_2, 2(SrcPtr)
        nop                                     lq.xyz SrcXYZ_3, 4(SrcPtr)
        nop                                     lq.xyz SrcXYZ_4, 6(SrcPtr)
ShadowVertLoopSlow:
        mulz.xy SDelta_1, Delta, SrcXYZ_1       ilw.w XYZ3Bit_1, 2(DestReadPtr)
        mulz.xy SDelta_2, Delta, SrcXYZ_2       ilw.w XYZ3Bit_2, 5(DestReadPtr)
        mulz.xy SDelta_3, Delta, SrcXYZ_3       ilw.w XYZ3Bit_3, 8(DestReadPtr)
        mulz.xy SDelta_4, Delta, SrcXYZ_4       ilw.w XYZ3Bit_4, 11(DestReadPtr)
        add.xy SrcXYZ_1, SrcXYZ_1, SDelta_1     isw.w XYZ3Bit_1, 0(DestWritePtr)
        add.xy SrcXYZ_2, SrcXYZ_2, SDelta_2     isw.w XYZ3Bit_2, 1(DestWritePtr)
        add.xy SrcXYZ_3, SrcXYZ_3, SDelta_3     isw.w XYZ3Bit_3, 2(DestWritePtr)
        add.xy SrcXYZ_4, SrcXYZ_4, SDelta_4     isw.w XYZ3Bit_4, 3(DestWritePtr)
        add.xy SrcXYZ_1, SrcXYZ_1, Center       iaddi VertCnt, VertCnt, -4
        add.xy SrcXYZ_2, SrcXYZ_2, Center       iaddi SrcPtr, SrcPtr, 8
        add.xy SrcXYZ_3, SrcXYZ_3, Center       iaddi DestReadPtr, DestReadPtr, 12
        add.xy SrcXYZ_4, SrcXYZ_4, Center       iaddi DestWritePtr, DestWritePtr, 4
        ftoi4.xy SrcXYZ_1_O, SrcXYZ_1           lq.xyz SrcXYZ_1, 0(SrcPtr)
        ftoi4.xy SrcXYZ_2_O, SrcXYZ_2           lq.xyz SrcXYZ_2, 2(SrcPtr)
        ftoi4.xy SrcXYZ_3_O, SrcXYZ_3           lq.xyz SrcXYZ_3, 4(SrcPtr)
        ftoi4.xy SrcXYZ_4_O, SrcXYZ_4           lq.xyz SrcXYZ_4, 6(SrcPtr)
        nop                                     sq.xyz SrcXYZ_1_O, -4(DestWritePtr)
        nop                                     sq.xyz SrcXYZ_2_O, -3(DestWritePtr)
        nop                                     sq.xyz SrcXYZ_3_O, -2(DestWritePtr)
        nop                                     ibgtz VertCnt, ShadowVertLoopSlow
        nop                                     sq.xyz SrcXYZ_4_O, -1(DestWritePtr)

FastLoop:

        ; kick a dummy giftag followed by the FRAME_1 register with FBMSK.
        nop                                     lq GifTag, 0(gDataPtr)
        nop                                     iaddiu Temp, VI00, NGLMEM_COMMAND_LIST_END-3    
        nop                                     sq.y GifTag, 1(Temp)
        nop                                     iaddi gDataPtr, gDataPtr, 1
        nop                                     nop
        nop                                     nop
        nop                                     xgkick Temp
        
        ; kick the vertex buffer
        nop                                     iaddiu Temp, MiniBuffer, NGLMEM_GIFTAG
        nop                                     nop
        nop                                     xgkick Temp
        nop                                     nop

/*
        nop                                     iaddiu Temp, VI00, NGLMEM_DUMMY_GIFTAG  
        nop                                     nop
        nop                                     xgkick Temp
        nop                                     nop
        nop                                     xgkick Temp
*/
        
        ; go on to the next instance
        nop                                     iaddi InstanceCnt, InstanceCnt, -1
        nop                                     nop
        nop                                     ibgtz InstanceCnt, NextShadowInstance
        nop                                     nop

        nop                                     b CommandListReturn
        nop                                     nop
#endif	; #ifndef PROJECT_KELLYSLATER

#if 0
/*----------------------------------------------------------------------------------------------------------------------
    nglSkinAddr

    Takes bone data in the dest verts and uses it to weight the src verts.  This comes so early
    in the file because it uses a jump table whose addresses must fit within a single byte.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr SrcPtr, VI05                 ; src pointer - xyz and normal
.equr DestPtr, VI06                ; dest pointer - actually bone count, indices, weights.

.equr BoneJump, VI07               ; number of bones affecting the current vert - actually a jump address
.equr BonePtr, VI08                ; base pointer to bone storage
.equr BoneAIdx, VI09               ; index of bone a
.equr BoneBIdx, VI10               ; index of bone b
.equr BoneCIdx, VI11               ; index of bone c
.equr BoneDIdx, VI12               ; index of bone d

.equr SrcXYZ, VF01                 ; vertex position
.equr SrcNorm, VF02                ; vertex normal

.equr Weight, VF03                 ; vertex normal

.equr TransXYZ, VF04               ; vertex position transformed by bone
.equr TransNorm, VF05              ; vertex position transformed by bone

.equr TransXYZA, VF06              ; vertex position transformed by bone
.equr TransXYZB, VF07              ; vertex position transformed by bone
.equr TransXYZC, VF08              ; vertex position transformed by bone
.equr TransXYZD, VF09              ; vertex position transformed by bone

.equr BoneA1, VF16                 ; bone matrices
.equr BoneA2, VF17                 ;
.equr BoneA3, VF18                 ;
.equr BoneA4, VF19                 ;

.equr BoneB1, VF20                 ;
.equr BoneB2, VF21                 ;
.equr BoneB3, VF22                 ;
.equr BoneB4, VF23                 ;

.equr BoneC1, VF24                 ;
.equr BoneC2, VF25                 ;
.equr BoneC3, VF26                 ;
.equr BoneC4, VF27                 ;

.equr BoneD1, VF28                 ;
.equr BoneD2, VF29                 ;
.equr BoneD3, VF30                 ;
.equr BoneD4, VF31                 ;

.global nglSkinAddr
nglSkinAddr:
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IADDIU gGIFTagMask, VI00, 0x7fff
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        MULx Zero, VF00, VF00                   IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        NOP                                     ILW.x BoneJump, 0(DestPtr)x
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     JR BoneJump
        NOP                                     LQ BoneA4, 3(BoneAIdx)

SkinVertLoop:
        NOP                                     ILW.x BoneJump, 0(DestPtr)x
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     SQ TransNorm, -1(SrcPtr)
        NOP                                     JR BoneJump
        NOP                                     SQ TransXYZ, -2(SrcPtr)

SkinExit:
        NOP                                     SQ TransNorm, -1(SrcPtr)
        NOP                                     SQ TransXYZ, -2(SrcPtr)
        NOP[E]                                  NOP
        NOP                                     NOP

nglSkinOneBone:
/*
        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        ADD TransXYZ, SrcXYZ, VF00              IADDI VertCnt, VertCnt, -1
        ADD TransNorm, SrcNorm, VF00            IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     LQ BoneA4, 3(BoneAIdx)
        NOP                                     IBGTZ VertCnt, SkinVertLoop
        NOP                                     NOP
        NOP                                     B SkinExit
        NOP                                     NOP
*/
        MULAx ACC, BoneA1, SrcNorm           ILW.x BoneAIdx, 4(DestPtr)x
        MADDAy ACC, BoneA2, SrcNorm          IADDI VertCnt, VertCnt, -1
        MADDAz ACC, BoneA3, SrcNorm          IADDIU SrcPtr, SrcPtr, 2
        MADDw TransNorm, BoneA4, Zero.w        IADDIU DestPtr, DestPtr, 3
        MULAx ACC, BoneA1, SrcXYZ            NOP
        MADDAy ACC, BoneA2, SrcXYZ           LQ BoneA1, 0(BoneAIdx)
        MADDAz ACC, BoneA3, SrcXYZ           LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        MADDw TransXYZ, BoneA4, VF00w           IBGTZ VertCnt, SkinVertLoop
        NOP                                     LQ BoneA4, 3(BoneAIdx)
/*
        MULAx ACC, BoneA1, SrcNorm           ILW.x BoneAIdx, 4(DestPtr)x
        MADDAy ACC, BoneA2, SrcNorm          IADDI VertCnt, VertCnt, -1
        MADDAz ACC, BoneA3, SrcNorm          IADDIU SrcPtr, SrcPtr, 2
        MADDw TransNorm, BoneA4, VF00w          IADDIU DestPtr, DestPtr, 3
        MULAx ACC, BoneA1, SrcXYZ            LQ BoneA1, 0(BoneAIdx)
        MADDAy ACC, BoneA2, SrcXYZ           LQ BoneA2, 1(BoneAIdx)
        MADDAz ACC, BoneA3, SrcXYZ           LQ BoneA3, 2(BoneAIdx)
        MADDw TransXYZ, BoneA4, VF00w           IBGTZ VertCnt, SkinVertLoop
        NOP                                     LQ BoneA4, 3(BoneAIdx)
*/

        NOP                                     B SkinExit
        NOP                                     NOP

nglSkinTwoBones:
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     LQ Weight, 2(DestPtr)
        NOP                                     NOP
        NOP                                     NOP
        MULAx ACC, BoneA1, SrcNorm           LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm          LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm          LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero.w        LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ            NOP
        MADDAy ACC, BoneA2, SrcXYZ           ILW.x BoneAIdx, 4(DestPtr)x
        MADDAz ACC, BoneA3, SrcXYZ           IADDI VertCnt, VertCnt, -1
        MADDw TransXYZA, BoneA4, VF00w          IADDIU SrcPtr, SrcPtr, 2
        MULAx ACC, BoneB1, SrcXYZ            IADDIU DestPtr, DestPtr, 3
        MADDAy ACC, BoneB2, SrcXYZ           LQ BoneA1, 0(BoneAIdx)
        MADDAz ACC, BoneB3, SrcXYZ           LQ BoneA2, 1(BoneAIdx)
        MADDw TransXYZB, BoneB4, VF00w          LQ BoneA3, 2(BoneAIdx)
        MULAx ACC, TransXYZA, Weight         IBGTZ VertCnt, SkinVertLoop
        MADDy TransXYZ, TransXYZB, Weight    LQ BoneA4, 3(BoneAIdx)

        NOP                                     B SkinExit
        NOP                                     NOP

nglSkinThreeBones:
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     ILW.z BoneCIdx, 1(DestPtr)z
        NOP                                     LQ Weight, 2(DestPtr)
        NOP                                     NOP
        MULAx ACC, BoneA1, SrcNorm           LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm          LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm          LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero.w        LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ            LQ BoneC1, 0(BoneCIdx)
        MADDAy ACC, BoneA2, SrcXYZ           LQ BoneC2, 1(BoneCIdx)
        MADDAz ACC, BoneA3, SrcXYZ           LQ BoneC3, 2(BoneCIdx)
        MADDw TransXYZA, BoneA4, VF00w          LQ BoneC4, 3(BoneCIdx)
        MULAx ACC, BoneB1, SrcXYZ            NOP
        MADDAy ACC, BoneB2, SrcXYZ           NOP
        MADDAz ACC, BoneB3, SrcXYZ           ILW.x BoneAIdx, 4(DestPtr)x
        MADDw TransXYZB, BoneB4, VF00w          IADDI VertCnt, VertCnt, -1
        MULAx ACC, BoneC1, SrcXYZ            IADDIU SrcPtr, SrcPtr, 2
        MADDAy ACC, BoneC2, SrcXYZ           IADDIU DestPtr, DestPtr, 3
        MADDAz ACC, BoneC3, SrcXYZ           LQ BoneA1, 0(BoneAIdx)
        MADDw TransXYZC, BoneC4, VF00w          LQ BoneA2, 1(BoneAIdx)
        MULAx ACC, TransXYZA, Weight         LQ BoneA3, 2(BoneAIdx)
        MADDAy ACC, TransXYZB, Weight        IBGTZ VertCnt, SkinVertLoop
        MADDz TransXYZ, TransXYZC, Weight    LQ BoneA4, 3(BoneAIdx)

        NOP                                     B SkinExit
        NOP                                     NOP

nglSkinFourBones:
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     ILW.z BoneCIdx, 1(DestPtr)z
        NOP                                     ILW.w BoneDIdx, 1(DestPtr)w
        NOP                                     LQ Weight, 2(DestPtr)
        MULAx ACC, BoneA1, SrcNorm           LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm          LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm          LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero.w        LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ            LQ BoneC1, 0(BoneCIdx)
        MADDAy ACC, BoneA2, SrcXYZ           LQ BoneC2, 1(BoneCIdx)
        MADDAz ACC, BoneA3, SrcXYZ           LQ BoneC3, 2(BoneCIdx)
        MADDw TransXYZA, BoneA4, VF00w          LQ BoneC4, 3(BoneCIdx)
        MULAx ACC, BoneB1, SrcXYZ            LQ BoneD1, 0(BoneDIdx)
        MADDAy ACC, BoneB2, SrcXYZ           LQ BoneD2, 1(BoneDIdx)
        MADDAz ACC, BoneB3, SrcXYZ           LQ BoneD3, 2(BoneDIdx)
        MADDw TransXYZB, BoneB4, VF00w          LQ BoneD4, 3(BoneDIdx)
        MULAx ACC, BoneC1, SrcXYZ            NOP
        MADDAy ACC, BoneC2, SrcXYZ           NOP
        MADDAz ACC, BoneC3, SrcXYZ           NOP
        MADDw TransXYZC, BoneC4, VF00w          ILW.x BoneAIdx, 4(DestPtr)x
        MULAx ACC, BoneD1, SrcXYZ            IADDI VertCnt, VertCnt, -1
        MADDAy ACC, BoneD2, SrcXYZ           IADDIU SrcPtr, SrcPtr, 2
        MADDAz ACC, BoneD3, SrcXYZ           IADDIU DestPtr, DestPtr, 3
        MADDw TransXYZD, BoneD4, VF00w          LQ BoneA1, 0(BoneAIdx)
        MULAx ACC, TransXYZA, Weight         LQ BoneA2, 1(BoneAIdx)
        MADDAy ACC, TransXYZB, Weight        LQ BoneA3, 2(BoneAIdx)
        MADDAz ACC, TransXYZC, Weight        IBGTZ VertCnt, SkinVertLoop
        MADDw TransXYZ, TransXYZD, Weight.w    LQ BoneA4, 3(BoneAIdx)

        NOP                                     B SkinExit
        NOP                                     NOP

#else

/*----------------------------------------------------------------------------------------------------------------------
    nglSkinAddr

    Takes bone data in the dest verts and uses it to weight the src verts.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr SrcPtr, VI05                 ; src pointer - xyz and normal
.equr DestPtr, VI06                ; dest pointer - actually bone count, indices, weights.

.equr BoneCnt, VI07                ; number of bones affecting the current vert
.equr BonePtr, VI08                ; base pointer to bone storage
.equr BoneAIdx, VI09               ; index of bone a
.equr BoneBIdx, VI10               ; index of bone b
.equr BoneCIdx, VI11               ; index of bone c
.equr BoneDIdx, VI12               ; index of bone d

.equr SrcXYZ, VF01                 ; vertex position
.equr SrcNorm, VF02                ; vertex normal

.equr Weight, VF03                 ; vertex normal

.equr TransXYZ, VF04               ; vertex position transformed by bone
.equr TransNorm, VF05              ; vertex position transformed by bone

.equr TransXYZA, VF06              ; vertex position transformed by bone
.equr TransXYZB, VF07              ; vertex position transformed by bone
.equr TransXYZC, VF08              ; vertex position transformed by bone
.equr TransXYZD, VF09              ; vertex position transformed by bone

.equr Zero, VF10                   ; (0,0,0,0) constant

.equr BoneA1, VF16                 ; bone matrices
.equr BoneA2, VF17                 ;
.equr BoneA3, VF18                 ;
.equr BoneA4, VF19                 ;

.equr BoneB1, VF20                 ;
.equr BoneB2, VF21                 ;
.equr BoneB3, VF22                 ;
.equr BoneB4, VF23                 ;

.equr BoneC1, VF24                 ;
.equr BoneC2, VF25                 ;
.equr BoneC3, VF26                 ;
.equr BoneC4, VF27                 ;

.equr BoneD1, VF28                 ;
.equr BoneD2, VF29                 ;
.equr BoneD3, VF30                 ;
.equr BoneD4, VF31                 ;

.global nglSkinAddr
nglSkinAddr:
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        MULx Zero, VF00, VF00                   IADD SrcPtr, Temp, gSrcBufPtr

SkinVertLoop:
        NOP                                     ILW.x BoneCnt, 0(DestPtr)x
        NOP                                     LQ SrcXYZ, 0(SrcPtr)

        NOP                                     IADDIU Temp, VI00, 1
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     IBEQ BoneCnt, Temp, nglSkinOneBone
        NOP                                     NOP

        NOP                                     IADDIU Temp, VI00, 2
        NOP                                     NOP
        NOP                                     IBEQ BoneCnt, Temp, nglSkinTwoBones
        NOP                                     IADDIU Temp, VI00, 3
        NOP                                     NOP
        NOP                                     IBEQ BoneCnt, Temp, nglSkinThreeBones
        NOP                                     IADDIU Temp, VI00, 4
        NOP                                     NOP
        NOP                                     IBEQ BoneCnt, Temp, nglSkinFourBones
        NOP                                     NOP

        ; Should never hit this, indicative of corrupted mesh data.
SkinVertFailure:
        NOP                                     B SkinVertFailure
        NOP                                     NOP

SkinVertContinue:
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IADDIU SrcPtr, SrcPtr, 2

        NOP                                     IBGTZ VertCnt, SkinVertLoop
        NOP                                     IADDIU DestPtr, DestPtr, 3

        NOP                                     B CommandListReturn
        NOP                                     NOP

.global nglSkinOneBone
nglSkinOneBone:
        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     LQ BoneA4, 3(BoneAIdx)
        MULAx ACC, BoneA1, SrcNorm              NOP
        MADDAy ACC, BoneA2, SrcNorm             NOP
        MADDAz ACC, BoneA3, SrcNorm             NOP
        MADDw TransNorm, BoneA4, Zero           NOP
        MULAx ACC, BoneA1, SrcXYZ               NOP
        MADDAy ACC, BoneA2, SrcXYZ              NOP
        MADDAz ACC, BoneA3, SrcXYZ              NOP
        MADDw TransXYZA, BoneA4, VF00w          NOP
        NOP                                     NOP
        NOP                                     SQ TransNorm, 1(SrcPtr)
        NOP                                     B SkinVertContinue
        NOP                                     SQ TransXYZA, 0(SrcPtr)

.global nglSkinTwoBones
nglSkinTwoBones:
        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     LQ Weight, 2(DestPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     LQ BoneA4, 3(BoneAIdx)
        MULAx ACC, BoneA1, SrcNorm              LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm             LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm             LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero           LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ               NOP
        MADDAy ACC, BoneA2, SrcXYZ              NOP
        MADDAz ACC, BoneA3, SrcXYZ              NOP
        MADDw TransXYZA, BoneA4, VF00w          NOP
        MULAx ACC, BoneB1, SrcXYZ               NOP
        MADDAy ACC, BoneB2, SrcXYZ              NOP
        MADDAz ACC, BoneB3, SrcXYZ              NOP
        MADDw TransXYZB, BoneB4, VF00w          NOP
        MULAx ACC, TransXYZA, Weight            NOP
        MADDy TransXYZ, TransXYZB, Weight       NOP
        NOP                                     NOP
        NOP                                     SQ TransNorm, 1(SrcPtr)
        NOP                                     B SkinVertContinue
        NOP                                     SQ TransXYZ, 0(SrcPtr)

.global nglSkinThreeBones
nglSkinThreeBones:
        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     ILW.z BoneCIdx, 1(DestPtr)z
        NOP                                     LQ Weight, 2(DestPtr)
        NOP                                     NOP
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     LQ BoneA4, 3(BoneAIdx)
        MULAx ACC, BoneA1, SrcNorm              LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm             LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm             LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero           LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ               LQ BoneC1, 0(BoneCIdx)
        MADDAy ACC, BoneA2, SrcXYZ              LQ BoneC2, 1(BoneCIdx)
        MADDAz ACC, BoneA3, SrcXYZ              LQ BoneC3, 2(BoneCIdx)
        MADDw TransXYZA, BoneA4, VF00           LQ BoneC4, 3(BoneCIdx)
        MULAx ACC, BoneB1, SrcXYZ               NOP
        MADDAy ACC, BoneB2, SrcXYZ              NOP
        MADDAz ACC, BoneB3, SrcXYZ              NOP
        MADDw TransXYZB, BoneB4, VF00           NOP
        MULAx ACC, BoneC1, SrcXYZ               NOP
        MADDAy ACC, BoneC2, SrcXYZ              NOP
        MADDAz ACC, BoneC3, SrcXYZ              NOP
        MADDw TransXYZC, BoneC4, VF00           NOP
        MULAx ACC, TransXYZA, Weight            NOP
        MADDAy ACC, TransXYZB, Weight           NOP
        MADDz TransXYZ, TransXYZC, Weight       NOP
        NOP                                     NOP
        NOP                                     SQ TransNorm, 1(SrcPtr)
        NOP                                     B SkinVertContinue
        NOP                                     SQ TransXYZ, 0(SrcPtr)

.global nglSkinFourBones
nglSkinFourBones:
        NOP                                     ILW.x BoneAIdx, 1(DestPtr)x
        NOP                                     ILW.y BoneBIdx, 1(DestPtr)y
        NOP                                     ILW.z BoneCIdx, 1(DestPtr)z
        NOP                                     ILW.w BoneDIdx, 1(DestPtr)w
        NOP                                     LQ Weight, 2(DestPtr)
        NOP                                     LQ BoneA1, 0(BoneAIdx)
        NOP                                     LQ BoneA2, 1(BoneAIdx)
        NOP                                     LQ BoneA3, 2(BoneAIdx)
        NOP                                     LQ BoneA4, 3(BoneAIdx)
        MULAx ACC, BoneA1, SrcNorm              LQ BoneB1, 0(BoneBIdx)
        MADDAy ACC, BoneA2, SrcNorm             LQ BoneB2, 1(BoneBIdx)
        MADDAz ACC, BoneA3, SrcNorm             LQ BoneB3, 2(BoneBIdx)
        MADDw TransNorm, BoneA4, Zero           LQ BoneB4, 3(BoneBIdx)
        MULAx ACC, BoneA1, SrcXYZ               LQ BoneC1, 0(BoneCIdx)
        MADDAy ACC, BoneA2, SrcXYZ              LQ BoneC2, 1(BoneCIdx)
        MADDAz ACC, BoneA3, SrcXYZ              LQ BoneC3, 2(BoneCIdx)
        MADDw TransXYZA, BoneA4, VF00           LQ BoneC4, 3(BoneCIdx)
        MULAx ACC, BoneB1, SrcXYZ               LQ BoneD1, 0(BoneDIdx)
        MADDAy ACC, BoneB2, SrcXYZ              LQ BoneD2, 1(BoneDIdx)
        MADDAz ACC, BoneB3, SrcXYZ              LQ BoneD3, 2(BoneDIdx)
        MADDw TransXYZB, BoneB4, VF00           LQ BoneD4, 3(BoneDIdx)
        MULAx ACC, BoneC1, SrcXYZ               NOP
        MADDAy ACC, BoneC2, SrcXYZ              NOP
        MADDAz ACC, BoneC3, SrcXYZ              NOP
        MADDw TransXYZC, BoneC4, VF00           NOP
        MULAx ACC, BoneD1, SrcXYZ               NOP
        MADDAy ACC, BoneD2, SrcXYZ              NOP
        MADDAz ACC, BoneD3, SrcXYZ              NOP
        MADDw TransXYZD, BoneD4, VF00           NOP
        MULAx ACC, TransXYZA, Weight            NOP
        MADDAy ACC, TransXYZB, Weight           NOP
        MADDAz ACC, TransXYZC, Weight           NOP
        MADDw TransXYZ, TransXYZD, Weight       NOP
        NOP                                     NOP
        NOP                                     SQ TransNorm, 1(SrcPtr)
        NOP                                     B SkinVertContinue
        NOP                                     SQ TransXYZ, 0(SrcPtr)

#endif


/*----------------------------------------------------------------------------------------------------------------------
    nglFogAddr

    Applies GS fog to vertices.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var
.equr VertCnt, VI02                ; verts in strip counter
.equr DestPtr, VI03                ; dest pointer
.equr SrcPtr, VI04                 ; clip

.equr FogVal, VF01                 ; fog parameters - near, far, min, max
.equr FogColor, VF02               ; fog color
.equr Zero, VF03                   ;
.equr V, VF04                      ;
.equr Dist, VF05                   ;
.equr ViewPos, VF06                ;
.equr SrcXYZ, VF07             ;


;---------------------------------------------------- Code ----------------------------------------------------------
.global nglFogAddr
nglFogAddr:
#if 0
        NOP                                     LQ FogVal, NGLMEM_FOG_VAL+0(VI00)
        NOP                                     LQ FogColor, NGLMEM_FOG_COLOR+0(VI00)

        NOP                                     LQ ViewPos, 0(gDataPtr)   ; load plane to clip against
        NOP                                     IADDIU gDataPtr, gDataPtr, 1

        NOP                                     XITOP Temp
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        MULx Zero, VF00, VF00                   IADD SrcPtr, Temp, gSrcBufPtr

        ADD.xyz Dist, VF00, FogColor            NOP
        FTOI0.xyz Dist, Dist                    NOP

FogVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        SUB.xyz V, SrcXYZ, ViewPos              NOP
        MUL.xyz V, V, V                         NOP
        ADDy.x V, V, V                          NOP
        ADDz.x V, V, V                          NOP
        NOP                                     SQRT Q, V.x  
        NOP                                     WAITQ
        ADDq.w Dist, Zero, Q                    NOP
        SUBx.w Dist, Dist, FogVal               NOP     ; (dist-near) * 1/(far-near)
        MULy.w Dist, Dist, FogVal               NOP     ; ..
        MAX.w Dist, Dist, Zero                  LOI 1.0
        MINIi.w Dist, Dist, I                   NOP
        MUL.w Dist, Dist, FogVal                NOP     ; dist = dist * (max-min) + min
        ADDz.w Dist, Dist, FogVal               NOP
        FTOI0.w Dist, Dist                      NOP
        NOP                                     SQ Dist, 1(DestPtr) ; store color
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IADDI DestPtr, DestPtr, 3
        NOP                                     IADDI SrcPtr, SrcPtr, 2

        NOP                                     IBGTZ VertCnt, FogVertLoop
        NOP                                     NOP

#endif
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglTransformAddr

    Transform and kick a batch of strips.
----------------------------------------------------------------------------------------------------------------------*/
.global nglTransformAddr
nglTransformAddr:
; [0,9) size=9 nU=0 nL=9 ic=9 [lin=9 lp=0]
              nop                                                           xitop           VI01
              nop                                                           ilw.x           VI03,NGLMEM_GIFTAG+0(VI01)
              nop                                                           lq              VF03,NGLMEM_LOCAL_TO_SCREEN+2(VI00)
              nop                                                           lq              VF02,NGLMEM_LOCAL_TO_SCREEN+1(VI00)
              nop                                                           lq              VF01,NGLMEM_LOCAL_TO_SCREEN+0(VI00)
              nop                                                           iand            VI03,VI03,VI14
              nop                                                           iadd            VI02,VI01,VI13
              nop                                                           iaddiu          VI01,VI01,NGLMEM_VERT_START
              nop                                                           lq              VF04,NGLMEM_LOCAL_TO_SCREEN+3(VI00)
; [0,27) size=27 nU=17 nL=18 ic=35 [lin=23 lp=0]
              nop                                                           lq.xyz          VF06,0(VI02)
              nop                                                           iaddi           VI03,VI03,-1
              nop                                                           nop
              nop                                                           nop
              mulax           ACC,VF01,VF06x                                iaddi           VI01,VI01,3
              madday          ACC,VF02,VF06y                                nop
              maddaz          ACC,VF03,VF06z                                nop
              maddw           VF08,VF04,VF00w                               nop
              nop                                                           iaddi           VI02,VI02,2
              nop                                                           lq.xyz          VF06,0(VI02)
              nop                                                           iaddi           VI03,VI03,-1
              nop                                                           div             Q,VF00w,VF08w
              addx.xyz        VF07,VF08,VF00x                               nop
              mulax           ACC,VF01,VF06x                                iaddi           VI01,VI01,3
              madday          ACC,VF02,VF06y                                nop
              maddaz          ACC,VF03,VF06z                                lq.xyz          VF10,(0)-(2*(3))(VI01)
              maddw           VF08,VF04,VF00w                               nop
              nop                                                           iaddi           VI02,VI02,2
              mulq.xyz        VF05,VF07,Q                                   lq.xyz          VF06,0(VI02)
              mulq.xyz        VF10,VF10,Q                                   iaddi           VI03,VI03,-1
              nop                                                           div             Q,VF00w,VF08w
              addx.xyz        VF07,VF08,VF00x                               nop
              mulax           ACC,VF01,VF06x                                iaddi           VI01,VI01,3
              madday          ACC,VF02,VF06y                                sq.xyz          VF10,(0)-(3*(3))(VI01)
              maddaz          ACC,VF03,VF06z                                lq.xyz          VF10,(0)-(2*(3))(VI01)
              maddw           VF08,VF04,VF00w                               iblez           VI03,EXPL_ngl_xform_vcl_VertLoop__EPI0
              ftoi4.xyz       VF09,VF05                                     iaddi           VI02,VI02,2
EXPL_ngl_xform_vcl_VertLoop__MAIN_LOOP:
; [0,9) size=9 nU=8 nL=9 ic=17 [lin=9 lp=9]
              mulq.xyz        VF05,VF07,Q                                   lq.xyz          VF06,0(VI02)
              mulq.xyz        VF10,VF10,Q                                   iaddi           VI03,VI03,-1
              nop                                                           div             Q,VF00w,VF08w
              addx.xyz        VF07,VF08,VF00x                               sq.xyz          VF09,(2)-(3*(3))(VI01)
              mulax           ACC,VF01,VF06x                                iaddi           VI01,VI01,3
              madday          ACC,VF02,VF06y                                sq.xyz          VF10,(0)-(3*(3))(VI01)
              maddaz          ACC,VF03,VF06z                                lq.xyz          VF10,(0)-(2*(3))(VI01)
              maddw           VF08,VF04,VF00w                               ibgtz           VI03,EXPL_ngl_xform_vcl_VertLoop__MAIN_LOOP
              ftoi4.xyz       VF09,VF05                                     iaddi           VI02,VI02,2
; n>=3 .. t = 46 + 9*(n-3) cycles, so .. t=19+(9*n) :
EXPL_ngl_xform_vcl_VertLoop__EPI0:
; [0,19) size=19 nU=7 nL=7 ic=14 [lin=16 lp=0]
              mulq.xyz        VF05,VF07,Q                                   nop
              mulq.xyz        VF10,VF10,Q                                   nop
              addx.xyz        VF07,VF08,VF00x                               div             Q,VF00w,VF08w
              nop                                                           sq.xyz          VF09,(2)-(3*(3))(VI01)
              ftoi4.xyz       VF09,VF05                                     nop
              nop                                                           sq.xyz          VF10,(0)-(2*(3))(VI01)
              nop                                                           lq.xyz          VF10,(0)-(1*(3))(VI01)
              nop                                                           nop
              nop                                                           sq.xyz          VF09,(2)-(2*(3))(VI01)
              mulq.xyz        VF05,VF07,Q                                   nop
              mulq.xyz        VF10,VF10,Q                                   nop
              nop                                                           nop
              nop                                                           nop
              ftoi4.xyz       VF09,VF05                                     nop
              nop                                                           sq.xyz          VF10,(0)-(1*(3))(VI01)
              nop                                                           nop
              nop                                                           b               CommandListReturn
              nop                                                           sq.xyz          VF09,(2)-(1*(3))(VI01)

/*----------------------------------------------------------------------------------------------------------------------
    nglTransformClipAddr

    Transform and kick a batch of strips with rejection clipping against all six planes.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                    ; temp var
.equr Flags, VI02                   ; temp var

.global nglTransformClipAddr
nglTransformClipAddr:
        ; check the flag to see if the program should be run.
        NOP                                     ILW.x Flags, NGLMEM_FLAGS+0(VI00)
        NOP                                     IADDIU Temp, VI00, NGLVU_CLIP
        NOP                                     IAND Temp, Flags, Temp
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, nglTransformAddr
        NOP                                     NOP

; [0,16) size=16 nU=0 nL=16 ic=16 [lin=16 lp=0]
              nop                                                           xitop           VI02
              nop                                                           ilw.x           VI04,NGLMEM_GIFTAG+0(VI02)
              nop                                                           iaddiu          VI05,VI00,0x7fff
              nop                                                           fcset           0
              nop                                                           lq              VF08,NGLMEM_LOCAL_TO_CLIP+3(VI00)
              nop                                                           iand            VI04,VI04,gGIFTagMask
              nop                                                           lq              VF07,NGLMEM_LOCAL_TO_CLIP+2(VI00)
              nop                                                           lq              VF06,NGLMEM_LOCAL_TO_CLIP+1(VI00)
              nop                                                           lq              VF05,NGLMEM_LOCAL_TO_CLIP+0(VI00)
              nop                                                           lq              VF04,NGLMEM_LOCAL_TO_SCREEN+3(VI00)
              nop                                                           lq              VF03,NGLMEM_LOCAL_TO_SCREEN+2(VI00)
              nop                                                           lq              VF02,NGLMEM_LOCAL_TO_SCREEN+1(VI00)
              nop                                                           lq              VF01,NGLMEM_LOCAL_TO_SCREEN+0(VI00)
              nop                                                           iadd            VI03,VI02,gSrcBufPtr
              nop                                                           iaddiu          VI02,VI02,NGLMEM_VERT_START
              nop                                                           iaddiu          VI05,VI05,1   ; set 0x8000 mask
; [0,26) size=26 nU=18 nL=13 ic=31 [lin=19 lp=0]
              nop                                                           lq.xyz          VF10,0(VI03)
              nop                                                           iaddi           VI04,VI04,-1
              nop                                                           nop
              nop                                                           nop
              mulax           ACC,VF05,VF10x                                nop
              madday          ACC,VF06,VF10y                                nop
              maddaz          ACC,VF07,VF10z                                nop
              maddw           VF12,VF08,VF00w                               nop
              mulax           ACC,VF01,VF10x                                nop
              madday          ACC,VF02,VF10y                                iaddi           VI02,VI02,3
              maddaz          ACC,VF03,VF10z                                iaddi           VI03,VI03,2
              clipw.xyz       VF12xyz,VF12w                                 nop
              nop                                                           nop
              maddw           VF09,VF04,VF00w                               lq.xyz          VF10,0(VI03)
              nop                                                           nop ; iaddi           VI04,VI04,-1
              nop                                                           fcand           VI01,0x0003ffff
              nop                                                           iadd            VI01,VI01,VI05
              mulax           ACC,VF05,VF10x                                div             Q,VF00w,VF09w
              madday          ACC,VF06,VF10y                                nop ; isw.w           VI01,(2)-(1*(3))(VI02)
              maddaz          ACC,VF07,VF10z                                nop
              maddw           VF12,VF08,VF00w                               nop
              mulax           ACC,VF01,VF10x                                lq.xyz          VF11,(0)-(1*(3))(VI02)
              madday          ACC,VF02,VF10y                                iaddi           VI02,VI02,3
              maddaz          ACC,VF03,VF10z                                iaddi           VI03,VI03,2
              clipw.xyz       VF12xyz,VF12w                                 nop
              mulq.xyz        VF12,VF09,Q                                   nop
EXPL_ngl_xformclip_vcl_ClipVertLoop__MAIN_LOOP:
; [0,13) size=13 nU=12 nL=12 ic=24 [lin=12 lp=12]
              maddw           VF09,VF04,VF00w                               lq.xyz          VF10,0(VI03)
              mulq.xyz        VF11,VF11,Q                                   iaddi           VI04,VI04,-1
              nop                                                           fcand           VI01,0x0003ffff
              ftoi4.xyz       VF12,VF12                                     ibeq            VI01, VI00, SkipClip
              mulax           ACC,VF05,VF10x                                div             Q,VF00w,VF09w
              nop                                                           isw.w           VI05,(2)-(1*(3))(VI02)
SkipClip:     madday          ACC,VF06,VF10y                                nop
              maddaz          ACC,VF07,VF10z                                sq.xyz          VF11,(0)-(2*(3))(VI02)
              maddw           VF12,VF08,VF00w                               sq.xyz          VF12,(2)-(2*(3))(VI02)
              mulax           ACC,VF01,VF10x                                lq.xyz          VF11,(0)-(1*(3))(VI02)
              madday          ACC,VF02,VF10y                                iaddi           VI02,VI02,3
              maddaz          ACC,VF03,VF10z                                iaddi           VI03,VI03,2
              clipw.xyz       VF12xyz,VF12w                                 ibgtz           VI04,EXPL_ngl_xformclip_vcl_ClipVertLoop__MAIN_LOOP
              mulq.xyz        VF12,VF09,Q                                   nop
; n>=2 .. t = 47 + 13*(n-2) cycles, so .. t=21+(13*n) :
; [0,21) size=21 nU=6 nL=9 ic=15 [lin=20 lp=0]
              maddw           VF09,VF04,VF00w                               nop
              mulq.xyz        VF11,VF11,Q                                   nop
              nop                                                           fcand           VI01,0x0003ffff
              ftoi4.xyz       VF12,VF12                                     ibeq            VI01, VI00, SkipClip2
              nop                                                           div             Q,VF00w,VF09w
              nop                                                           isw.w           VI05,(2)-(1*(3))(VI02)
SkipClip2:
              nop                                                           sq.xyz          VF11,(0)-(2*(3))(VI02)
              nop                                                           sq.xyz          VF12,(2)-(2*(3))(VI02)
              nop                                                           lq.xyz          VF11,(0)-(1*(3))(VI02)
              nop                                                           nop
              nop                                                           nop
              mulq.xyz        VF12,VF09,Q                                   nop
              mulq.xyz        VF11,VF11,Q                                   nop
              nop                                                           nop
              nop                                                           nop
              ftoi4.xyz       VF12,VF12                                     nop
              nop                                                           sq.xyz          VF11,(0)-(1*(3))(VI02)
              nop                                                           nop
              nop                                                           nop
              nop                                                           sq.xyz          VF12,(2)-(1*(3))(VI02)
              nop                                                           nop
              nop                                                           b               CommandListReturnA
              nop                                                           nop

/*----------------------------------------------------------------------------------------------------------------------
    nglTransformFrustumClipAddr

    Transform and kick a batch of strips with rejection clipping against all six planes.
    Also preps some data for the frustum clipper.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temporary register
.equr Flags, VI02                   ; temporary register
.equr Clip, VI01                   ; clipping results FCAND target
.equr Temp2, VI02                   ; temporary register
.equr VertCnt, VI03                ; total vert count
.equr SrcPtr, VI05                 ; source pointer for xyz
.equr DestPtr, VI09                ; dest pointer
.equr SoftClip, VI12                ; 0x8000, XYZ3 bit to store for clipped verts.

.equr LToS1, VF01                  ; local to screen matrix
.equr LToS2, VF02
.equr LToS3, VF03
.equr LToS4, VF04

.equr LToC1, VF05                  ; local to clip matrix
.equr LToC2, VF06
.equr LToC3, VF07
.equr LToC4, VF08

.equr SrcXYZ, VF10                 ; source xyz
.equr SrcColor, VF11               ; source color
.equr SrcST, VF12                  ; source st
.equr ProjXYZ, VF13                ; projected xyz
.equr ProjXYZ2, VF14               ; projected xyz * q
.equr ProjST, VF15                 ; projected st
.equr FixedXYZ, VF16               ; fixed point xyz
.equr ClipXYZ, VF17                ; clip space xyz
.equr Zero, VF20                   ;

.global nglTransformFrustumClipAddr
nglTransformFrustumClipAddr:
        ; check the flag to see if the program should be run.
        NOP                                     ILW.x Flags, NGLMEM_FLAGS+0(VI00)
        NOP                                     IADDIU Temp, VI00, NGLVU_CLIP
        NOP                                     IAND Temp, Flags, Temp
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, nglTransformAddr
        NOP                                     NOP

        NOP                                     LQ LToS1, NGLMEM_LOCAL_TO_SCREEN+0(VI00)   ; load screen x transformation matrix
        NOP                                     LQ LToS2, NGLMEM_LOCAL_TO_SCREEN+1(VI00)
        NOP                                     LQ LToS3, NGLMEM_LOCAL_TO_SCREEN+2(VI00)
        NOP                                     LQ LToS4, NGLMEM_LOCAL_TO_SCREEN+3(VI00)
        NOP                                     LQ LToC1, NGLMEM_LOCAL_TO_CLIP+0(VI00)   ; load clip x transformation matrix
        NOP                                     LQ LToC2, NGLMEM_LOCAL_TO_CLIP+1(VI00)
        NOP                                     LQ LToC3, NGLMEM_LOCAL_TO_CLIP+2(VI00)
        NOP                                     LQ LToC4, NGLMEM_LOCAL_TO_CLIP+3(VI00)

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     LQ SrcST, 0(DestPtr)                ; source st 1
        MULx Zero, VF00, VF00                   LQ SrcXYZ, 0(SrcPtr)                ; source vertex 1
        NOP                                     FCSET 0                             ; clear clip flags.
        NOP                                     NOP

        ; --- rotation/translation/perspective transform ---
        MULAx ACC, LToS1, SrcXYZ                IADDIU SoftClip, VI00, 0x7fff        ; set 0x8001 mask
        MADDAy ACC, LToS2, SrcXYZ               IADDIU SoftClip, SoftClip, 2
        MADDAz ACC, LToS3, SrcXYZ               NOP
        MADDw ProjXYZ, LToS4, VF00              NOP

        MULAx ACC, LToC1, SrcXYZ                NOP
        MADDAy ACC, LToC2, SrcXYZ               NOP
        MADDAz ACC, LToC3, SrcXYZ               LQ SrcXYZ, 2(SrcPtr)                ; load source vertex

        MADDw ClipXYZ, LToC4, VF00              DIV Q, VF00w, ProjXYZ.w
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

ClipVertLoop:
        MULAx ACC, LToS1, SrcXYZ                IADDI VertCnt, VertCnt, -1
        MADDAy ACC, LToS2, SrcXYZ               IADDI DestPtr, DestPtr, 3
        MADDAz ACC, LToS3, SrcXYZ               NOP                                 ; save S & T into the W fields of XYZ and Norm.

        MULq.xyz ProjXYZ2, ProjXYZ, Q           NOP
        MULq.xyz ProjST, SrcST, Q               LQ SrcST, 0(DestPtr)                ; XYZ * Q, load source st

        MADDw ProjXYZ, LToS4, VF00              NOP                                 ; matrix * XYZ for next vert.

        CLIPw.xyz ClipXYZ, ClipXYZ              IADDI SrcPtr, SrcPtr, 2             ; clip previously generated vertex
        FTOI4.xyz FixedXYZ, ProjXYZ2            SQ.xyz ProjST, -3(DestPtr)          ; store ST * Q, convert XYZ to 12.4 fixed point
        MULAx ACC, LToC1, SrcXYZ				DIV Q, VF00w, ProjXYZ.w             ; start xform to clip space, do perspective divide
        MADDAy ACC, LToC2, SrcXYZ				ILW.w Temp2, -1(DestPtr)

        MADDAz ACC, LToC3, SrcXYZ				FCAND Clip, 0x0003ffff              ; VI01 is 0or1
        NOP                                     NOP
        MADDw ClipXYZ, LToC4, VF00				IBNE Clip, VI00, ClipXYZ3           ; Is VI01 0 or !0 ?
        NOP                                     LQ SrcXYZ, 2(SrcPtr)                ; load source xyz

ClipXYZ2:
        NOP                                     IBGTZ VertCnt, ClipVertLoop
        NOP                                     SQ.xyz FixedXYZ, -1(DestPtr)        ; store XYZ

        NOP                                     B CommandListReturn
        NOP                                     NOP

ClipXYZ3:
        NOP                                     IAND Temp2, Temp2, SoftClip
        NOP                                     NOP
        NOP                                     IBNE Temp2, VI00, ClipXYZ2
        NOP                                     NOP
;      NOP                                     IOR Temp2, Temp2, SoftClip
        NOP                                     B ClipXYZ2
        NOP                                     ISW.w SoftClip, -1(DestPtr)          ; write out the XYZ3 bit.

/*----------------------------------------------------------------------------------------------------------------------
    nglBackfaceScreenCullAddr

    Backface cull the output vertices in view space.
----------------------------------------------------------------------------------------------------------------------*/
.equr TempV, VI01                   ; temp var
.equr Flags, VI02                  ; temp var
.equr VertCnt, VI03                ; verts in strip counter
.equr SrcPtr, VI04                 ; dest pointer for xyz
.equr DestPtr, VI05                ; dest pointer for xyz
.equr HardClip, VI06               ; clip bit - 0x8000
.equr SoftClip, VI07               ; soft clip bit - 0x8001
.equr CWFlag, VI08                 ; clockwise vert - 0x2

.equr Zero, VF01                   ;
.equr SrcXYZ1, VF10                ; source xyz
.equr SrcXYZ2, VF11                ; previous source xyz
.equr SrcXYZ3, VF12                ; previous previous source xyz
.equr Delta1, VF13                 ; SrcXYZ1-SrcXYZ3
.equr Delta2, VF14                 ; SrcXYZ2-SrcXYZ3
.equr Cross, VF15                  ; cross product result
.equr Sign, VF16                   ; current sign (toggles between -1 and 1)
.equr SignTog, VF17                ; constant -1
.equr ViewPos, VF18                ; local space position of the camera
.equr ViewVec, VF19                ; vector from the view position to the vertex
.equr Dot, VF20                    ; dot product of the view pos and the vertex normal

.global nglBackfaceCullScreenAddr
nglBackfaceCullScreenAddr:
        ; check the flag to see if the program should be run.
        NOP                                     ILW.x Flags, NGLMEM_FLAGS+0(VI00)
        NOP                                     IADDIU Temp, VI00, NGLVU_BACKFACE
        NOP                                     IAND Temp, Flags, Temp
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, CommandListReturnA
        NOP                                     NOP

        NOP                                     LQ ViewPos, NGLMEM_VIEW_TO_LOCAL+3(VI00)

        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     IADDIU HardClip, VI00, 0x7fff
        NOP                                     IADDIU HardClip, HardClip, 1
        NOP                                     IADDIU SoftClip, HardClip, 1
        NOP                                     IADDIU CWFlag, VI00, 2

        NOP                                     LQ SrcXYZ2, 0(SrcPtr)
        NOP                                     LQ SrcXYZ1, 2(SrcPtr)
        NOP                                     IADDI VertCnt, VertCnt, -2
        NOP                                     IADDI DestPtr, DestPtr, 6
        NOP                                     IADDI SrcPtr, SrcPtr, 4

BackfaceScreenVertLoop:
        ADD SrcXYZ3, SrcXYZ2, Zero              ILW.w Temp, 2(DestPtr)
        ADD SrcXYZ2, SrcXYZ1, Zero              LQ SrcXYZ1, 0(SrcPtr)
        ADDw.w Sign, Zero, VF00                 NOP
        NOP                                     IAND Temp, CWFlag, Temp
        NOP                                     NOP

        NOP                                     IBEQ Temp, CWFlag, BackfaceScreenSkipReset
        NOP                                     NOP
        SUBw.w Sign, Zero, VF00                 NOP
BackfaceScreenSkipReset:

        SUB Delta1, SrcXYZ1, SrcXYZ3            NOP
        SUB Delta2, SrcXYZ2, SrcXYZ3            NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        OPMULA.xyz ACC, Delta1, Delta2          NOP
        OPMSUB.xyz Cross, Delta2, Delta1        NOP
        SUB.xyz ViewVec, ViewPos, SrcXYZ1       NOP
        NOP                                     NOP
        NOP                                     NOP
        MUL.xyz Dot, ViewVec, Cross             NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ADDAx.w ACC, Zero, Dot                  IADDI VertCnt, VertCnt, -1
        MADDAy.w ACC, VF00, Dot                 IADDI SrcPtr, SrcPtr, 2
        MADDz.w Dot, VF00, Dot                  IADDI DestPtr, DestPtr, 3
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MUL.w Dot, Dot, Sign                    NOP
        NOP                                     IADDIU VI01, VI00, 0x10             ; W field sign bit.
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     FMAND VI01, VI01
        NOP                                     NOP

        NOP                                     IBEQ VI01, VI00, BackfaceScreenSkipClip
        NOP                                     NOP
        NOP                                     ISW.w HardClip, -1(DestPtr)          ; write out the XYZ3 bit.
BackfaceScreenSkipClip:

        NOP                                     IBGTZ VertCnt, BackfaceScreenVertLoop
        NOP                                     NOP

        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglZBiasAddr

    Dont ask
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr DestPtr, VI06                ; dest data pointer
.equr ZScale, VF01                 ; constant to multiply by Z to adjust Z <-- hehe
.equr XYZA, VF02
.equr XYZB, VF03
.equr XYZC, VF04
.equr XYZD, VF05

.global nglZBiasAddr
nglZBiasAddr:
        NOP                                     LQ ZScale, 0(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 1

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
ZBiasVertLoop:
        NOP                                     LQ XYZA, 2(DestPtr)
        NOP                                     LQ XYZB, 5(DestPtr)
        NOP                                     LQ XYZC, 8(DestPtr)
        NOP                                     LQ XYZD, 11(DestPtr)

        ITOF0.z XYZA, XYZA                      NOP
        ITOF0.z XYZB, XYZB                      NOP
        ITOF0.z XYZC, XYZC                      NOP
        ITOF0.z XYZD, XYZD                      NOP

        ADD.z XYZA, XYZA, ZScale                NOP
        ADD.z XYZB, XYZB, ZScale                NOP
        ADD.z XYZC, XYZC, ZScale                NOP
        ADD.z XYZD, XYZD, ZScale                NOP

        FTOI0.z XYZA, XYZA                      NOP
        FTOI0.z XYZB, XYZB                      NOP
        FTOI0.z XYZC, XYZC                      NOP
        FTOI0.z XYZD, XYZD                      NOP

        NOP                                     SQ XYZA, 2(DestPtr)
        NOP                                     SQ XYZB, 5(DestPtr)
        NOP                                     SQ XYZC, 8(DestPtr)
        NOP                                     SQ XYZD,11(DestPtr)

        NOP                                     IADDI VertCnt, VertCnt, -4
        NOP                                     IADDIU DestPtr, DestPtr, 12

        NOP                                     IBGTZ VertCnt, ZBiasVertLoop
        NOP                                     NOP

        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglDetailMapAddr

    Scale the S and T coordinates of transformed vertices by a constant.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr DestPtr, VI06                ; dest data pointer

.equr ZScale, VF01                 ; constant to multiply by Z to get alpha (calculated by C code).
.equr ZBase, VF02                  ; constant to subtract from Z.
.equr STScale, VF03                ; S and T scaling parameters.

.equr STA, VF05                     ;
.equr XYZA, VF06                    ;

.equr STB, VF07                     ;
.equr XYZB, VF08                    ;

.equr STC, VF09                     ;
.equr XYZC, VF10                    ;

.equr STD, VF11                     ;
.equr XYZD, VF12                    ;

.equr XYZA2, VF13                   ;
.equr XYZB2, VF14                   ;
.equr XYZC2, VF15                   ;
.equr XYZD2, VF16                   ;

.equr XYZA3, VF17                   ;
.equr XYZB3, VF18                   ;
.equr XYZC3, VF19                   ;
.equr XYZD3, VF20                   ;

.global nglDetailMapAddr
nglDetailMapAddr:
#if 0
        NOP                                     LQ ZScale, 0(gDataPtr)
        NOP                                     LQ ZBase, 1(gDataPtr)
        NOP                                     LQ STScale, 2(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 3

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     LQ XYZA2, 2(DestPtr)
        NOP                                     LQ XYZB2, 5(DestPtr)
        NOP                                     LQ XYZC2, 8(DestPtr)
        NOP                                     LQ XYZD2, 11(DestPtr)
        ITOF4.z XYZA, XYZA2                     LQ STA, 0(DestPtr)
        ITOF4.z XYZB, XYZB2                     LQ STB, 3(DestPtr)
        ITOF4.z XYZC, XYZC2                     LQ STC, 6(DestPtr)
        ITOF4.z XYZD, XYZD2                     LQ STD, 9(DestPtr)
        MUL.xy STA, STA, STScale                NOP
        MUL.xy STB, STB, STScale                NOP
        MUL.xy STC, STC, STScale                NOP
        MUL.xy STD, STD, STScale                NOP
        SUB.z XYZA, XYZA, ZBase                 SQ STA, 0(DestPtr)
        SUB.z XYZB, XYZB, ZBase                 SQ STB, 3(DestPtr)
        SUB.z XYZC, XYZC, ZBase                 SQ STC, 6(DestPtr)
        SUB.z XYZD, XYZD, ZBase                 SQ STD, 9(DestPtr)
        MULz.w XYZA, ZScale, XYZA               NOP                   ; scale Z into alpha.
        MULz.w XYZB, ZScale, XYZB               NOP
        MULz.w XYZC, ZScale, XYZC               NOP
        MULz.w XYZD, ZScale, XYZD               NOP
        MAX.w XYZA, XYZA, VF00                  NOP
        MAX.w XYZB, XYZB, VF00                  IADDI VertCnt, VertCnt, -4
        MAX.w XYZC, XYZC, VF00                  IADDIU DestPtr, DestPtr, 12
        MAX.w XYZD, XYZD, VF00                  LQ XYZA2, 2(DestPtr)
        FTOI0.w XYZA3, XYZA                     LQ XYZB2, 5(DestPtr)
        FTOI0.w XYZB3, XYZB                     LQ XYZC2, 8(DestPtr)
        FTOI0.w XYZC3, XYZC                     LQ XYZD2, 11(DestPtr)
        FTOI0.w XYZD3, XYZD                     NOP

DetailVertLoop:
        ITOF4.z XYZA, XYZA2                     LQ STA, 0(DestPtr)
        ITOF4.z XYZB, XYZB2                     LQ STB, 3(DestPtr)
        ITOF4.z XYZC, XYZC2                     LQ STC, 6(DestPtr)
        ITOF4.z XYZD, XYZD2                     LQ STD, 9(DestPtr)
        MUL.xy STA, STA, STScale                SQ.w XYZA3, -11(DestPtr)
        MUL.xy STB, STB, STScale                SQ.w XYZB3, -8(DestPtr)
        MUL.xy STC, STC, STScale                SQ.w XYZC3, -5(DestPtr)
        MUL.xy STD, STD, STScale                SQ.w XYZD3, -2(DestPtr)
        SUB.z XYZA, XYZA, ZBase                 SQ STA, 0(DestPtr)
        SUB.z XYZB, XYZB, ZBase                 SQ STB, 3(DestPtr)
        SUB.z XYZC, XYZC, ZBase                 SQ STC, 6(DestPtr)
        SUB.z XYZD, XYZD, ZBase                 SQ STD, 9(DestPtr)
        MULz.w XYZA, ZScale, XYZA               NOP                   ; scale Z into alpha.
        MULz.w XYZB, ZScale, XYZB               NOP
        MULz.w XYZC, ZScale, XYZC               NOP
        MULz.w XYZD, ZScale, XYZD               NOP
        MAX.w XYZA, XYZA, VF00                  NOP
        MAX.w XYZB, XYZB, VF00                  IADDI VertCnt, VertCnt, -4
        MAX.w XYZC, XYZC, VF00                  IADDIU DestPtr, DestPtr, 12
        MAX.w XYZD, XYZD, VF00                  LQ XYZA2, 2(DestPtr)
        FTOI0.w XYZA3, XYZA                     LQ XYZB2, 5(DestPtr)
        FTOI0.w XYZB3, XYZB                     LQ XYZC2, 8(DestPtr)
        FTOI0.w XYZC3, XYZC                     IBGTZ VertCnt, DetailVertLoop
        FTOI0.w XYZD3, XYZD                     LQ XYZD2, 11(DestPtr)

        NOP                                     SQ.w XYZA3, -11(DestPtr)
        NOP                                     SQ.w XYZB3, -8(DestPtr)
        NOP                                     SQ.w XYZC3, -5(DestPtr)
        NOP                                     SQ.w XYZD3, -2(DestPtr)
#endif
#endif
        NOP                                     B CommandListReturn
        NOP                                     NOP


/*----------------------------------------------------------------------------------------------------------------------
    nglLightMapAddr

    Remultiplies all ST values by the stored Q values.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr DestPtr, VI06                ; source and dest pointer for color

.equr SrcST1, VF10                 ; vertex st
.equr SrcST2, VF11                 ; vertex st
.equr SrcST3, VF12                 ; vertex st
.equr SrcST4, VF13                 ; vertex st

.equr SrcST1B, VF14                ; vertex st
.equr SrcST2B, VF15                ; vertex st
.equr SrcST3B, VF16                ; vertex st
.equr SrcST4B, VF17                ; vertex st

.global nglLightMapAddr
nglLightMapAddr:
#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     LQ SrcST1, 0(DestPtr)
        NOP                                     LQ SrcST2, 3(DestPtr)
        NOP                                     LQ SrcST3, 6(DestPtr)
        NOP                                     LQ SrcST4, 9(DestPtr)
        NOP                                     IADDIU DestPtr, DestPtr, 12

LightMapVertLoop:
        NOP                                     IADDI VertCnt, VertCnt, -4          ; argh, bound on the right side..
        MULz.xy SrcST1B, SrcST1, SrcST1         LQ SrcST1, 0(DestPtr)
        MULz.xy SrcST2B, SrcST2, SrcST2         LQ SrcST2, 3(DestPtr)
        MULz.xy SrcST3B, SrcST3, SrcST3         LQ SrcST3, 6(DestPtr)
        MULz.xy SrcST4B, SrcST4, SrcST4         LQ SrcST4, 9(DestPtr)

        NOP                                     SQ.xy SrcST1B, -12(DestPtr)
        NOP                                     SQ.xy SrcST2B, -9(DestPtr)
        NOP                                     SQ.xy SrcST3B, -6(DestPtr)
        NOP                                     SQ.xy SrcST4B, -3(DestPtr)

        NOP                                     IBGTZ VertCnt, LightMapVertLoop
        NOP                                     IADDIU DestPtr, DestPtr, 12
#endif
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglWriteQAddr

    Stores a 1.0f in the Q value of all the STs.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr DestPtr, VI06                ; source and dest pointer for color

.equr ST, VF10                     ; vertex st
.equr Zero, VF11                   ; vertex st

.global nglWriteQAddr
nglWriteQAddr:
#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        ; set (0, 0, 1.0f, 0)
        MULx Zero, VF00, VF00                   NOP
        ADDw.z ST, Zero, VF00                   NOP
        ADDx.xyw ST, Zero, VF00                 NOP

WriteQVertLoop:
        NOP                                     IADDI VertCnt, VertCnt, -4          ; argh, bound on the right side..

        NOP                                     SQ.xyz ST, 0(DestPtr)
        NOP                                     SQ.xyz ST, 3(DestPtr)
        NOP                                     SQ.xyz ST, 6(DestPtr)
        NOP                                     SQ.xyz ST, 9(DestPtr)

        NOP                                     IBGTZ VertCnt, WriteQVertLoop
        NOP                                     IADDIU DestPtr, DestPtr, 12

#endif
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglTextureScrollAddr

    Scrolls texture coordinates
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr Flags, VI02                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr DestPtr, VI06                ; source and dest pointer for color

.equr ScrollVec, VF09              ; ST coordinates to scroll by

.equr SrcST1, VF10                 ; vertex st
.equr SrcST2, VF11                 ; vertex st
.equr SrcST3, VF12                 ; vertex st
.equr SrcST4, VF13                 ; vertex st

.equr SrcST1B, VF14                ; vertex st
.equr SrcST2B, VF15                ; vertex st
.equr SrcST3B, VF16                ; vertex st
.equr SrcST4B, VF17                ; vertex st

.global nglTextureScrollAddr
nglTextureScrollAddr:
        ; check the flag to see if the program should be run.
        NOP                                     ILW.x Flags, NGLMEM_FLAGS+0(VI00)
        NOP                                     IADDIU Temp, VI00, NGLVU_TEXTURE_SCROLL
        NOP                                     IAND Temp, Flags, Temp
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, CommandListReturnA
        NOP                                     NOP

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     LQ ScrollVec, NGLMEM_TEXTURE_SCROLL+0(VI00)

        NOP                                     LQ SrcST1, 0(DestPtr)
        NOP                                     LQ SrcST2, 3(DestPtr)
        NOP                                     LQ SrcST3, 6(DestPtr)
        NOP                                     LQ SrcST4, 9(DestPtr)
        NOP                                     IADDIU DestPtr, DestPtr, 12

ScrollVertLoop:
        NOP                                     IADDI VertCnt, VertCnt, -4          ; argh, bound on the right side..

        ; the actual calculation
        ADD.xy SrcST1B, SrcST1, ScrollVec       LQ SrcST1, 0(DestPtr)
        ADD.xy SrcST2B, SrcST2, ScrollVec       LQ SrcST2, 3(DestPtr)
        ADD.xy SrcST3B, SrcST3, ScrollVec       LQ SrcST3, 6(DestPtr)
        ADD.xy SrcST4B, SrcST4, ScrollVec       LQ SrcST4, 9(DestPtr)

        NOP                                     SQ.xy SrcST1B, -12(DestPtr)
        NOP                                     SQ.xy SrcST2B, -9(DestPtr)
        NOP                                     SQ.xy SrcST3B, -6(DestPtr)
        NOP                                     SQ.xy SrcST4B, -3(DestPtr)

        NOP                                     IBGTZ VertCnt, ScrollVertLoop
        NOP                                     IADDIU DestPtr, DestPtr, 12

        NOP                                     B CommandListReturnA
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglAlphaFalloffAddr

    Acts like an alpha-affecting directional light.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; pointer for normal
.equr DestPtr, VI06                ; pointer for color

.equr ViewDir, VF01                ; View direction in local space.
.equr Dot, VF02                    ; Dot product result.
.equr SrcNorm, VF03                ; Light direction in local space.
.equr Zero, VF04                   ; (0, 0, 0, 0) constant.
.equr Scale, VF05                ; View direction in local space.

.global nglAlphaFalloffAddr
nglAlphaFalloffAddr:
        NOP                                     LQ ViewDir, 0(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 1

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        SUB.w Scale, VF00, ViewDir              ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     DIV Q, VF00w, Scale.w      ; Scale=1/(1-Falloff)
        NOP                                     WAITQ
        MULq.w Scale, VF00, Q                   NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     LOI 128.0
        MULi.w Scale, Scale, I                  NOP

AlphaFalloffVertLoop:
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MUL.xyz Dot, ViewDir, SrcNorm           IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     NOP

        ADDy.x Dot, Dot, Dot                    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDz.x Dot, Dot, Dot                    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        SUB.x Dot, Dot, ViewDir                 NOP     ; Dot = Dot - F * 1/(1-F)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULx.w Dot, Scale, Dot                  NOP     ; scale to color range, moves value into W
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MAX.w Dot, Dot, Zero                    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        FTOI0.w Dot, Dot                        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     SQ.w Dot, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, AlphaFalloffVertLoop
        NOP                                     NOP
#endif
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    CommandListReturnA

    Intermediate point within the file to overcome the limited range of the B instruction.
----------------------------------------------------------------------------------------------------------------------*/
CommandListReturnA:
        NOP                                     B CommandListReturn
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglPointLightAddr

    Applies a single point light to the output vertices.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr LightPos, VF01               ; Light position in local space.
.equr NearDist, VF03               ; Range at which light influence begins to falloff.
.equr FarDist, VF04                ; Range at which light influence begins to falloff.
.equr Color, VF05                  ; Additive color.

.equr SrcXYZ, VF10                 ; vertex xyz
.equr SrcColor, VF11               ; vertex color
.equr SrcNorm, VF12                ; vertex normal

.equr One, VF14                    ; (255, 255, 255, 255) constant.
.equr Zero, VF15                   ; (0, 0, 0, 0) constant.
.equr LightDist, VF16              ; w field holds the distance from the light to the vertex.
.equr LightDir, VF17               ; vector from light to vertex, normalized.
.equr Dot, VF18                    ; w field holds the dot product of the light vector and the vertex normal.

.equr SColor, VF19                 ; Color scaled by Dot.
.equr InvRange, VF21               ; 1.0 / ( FarDist - NearDist ).

.global nglPointLightAddr
nglPointLightAddr:
#if 0
        ; Loop setup.
        NOP                                     LQ LightPos, 0(gDataPtr)
        NOP                                     LQ NearDist, 1(gDataPtr)
        NOP                                     LQ FarDist, 2(gDataPtr)
        NOP                                     LQ Color, 3(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 4

        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        SUB.w InvRange, FarDist, NearDist       ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
        NOP                                     NOP
        NOP                                     DIV Q, VF00w, InvRange.w

        NOP                                     LOI 255.0
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDI One, Zero, I                       NOP
        MULQ.w InvRange, VF00w, Q               NOP

PointLightVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcColor, 1(DestPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     NOP

        SUB.xyz LightDir, LightPos, SrcXYZ      IADDIU SrcPtr, SrcPtr, 2
        ITOF0 SrcColor, SrcColor                IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     NOP

        ; Attenuate distance by the squared distance from the light to the vertex.
        MUL.xyz LightDist, LightDir, LightDir   NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDAx.w ACC, Zero, LightDist            NOP
        MADDAy.w ACC, VF00, LightDist           NOP
        MADDz.w LightDist, VF00, LightDist      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     SQRT Q, LightDist.w
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULQ.w LightDist, VF00, Q               NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        SUB.w LightDist, LightDist, NearDist    DIV Q, VF00w, LightDist.w
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MAX.w LightDist, LightDist, Zero        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MUL.w LightDist, LightDist, InvRange    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MINI.w LightDist, LightDist, VF00w      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        SUB.w LightDist, VF00, LightDist        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULQ.w LightDir, VF00w, Q               NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ; After this MUL, LightDir is the normalized vector from SrcXYZ to the Light.
        MULw.xyz LightDir, LightDir, LightDir   NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MUL.xyz Dot, LightDir, SrcNorm          NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDAx.w ACC, Zero, Dot                  NOP
        MADDAy.w ACC, VF00, Dot                 NOP
        MADDz.w Dot, VF00, Dot                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MAX.w Dot, Dot, Zero                    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ; Combine LightDist and LightDir scalars, and apply them to the colors.
        MUL.w Dot, Dot, LightDist               NOP
;      ADD.w Dot, Zero, LightDist              NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULw SColor, Color, Dot.w              NOP

        ; Apply the scaled colors to the light.
        ADD.xyz SrcColor, SrcColor, SColor      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MAX SrcColor, SrcColor, Zero            NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MINI SrcColor, SrcColor, One            NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        FTOI0 SrcColor, SrcColor                NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     SQ.xyz SrcColor, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, PointLightVertLoop
        NOP                                     NOP

#endif
        NOP                                     B CommandListReturnA
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglDirLightAddr

    Applies a directional light in local space to the output vertices.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr LightDir, VF01               ; Light direction in local space.
.equr Color, VF02                  ; Additive color.
.equr One, VF04                    ; (255, 255, 255, 255) constant.
.equr Zero, VF05                   ; (0, 0, 0, 0) constant.

.equr SrcColorA, VF06              ; vertex color
.equr DotA, VF07                   ; w field holds the dot product of the light direction and the vertex normal.
.equr SColorA, VF08                ; Color scaled by Dot.

.equr SrcColorB, VF10              ; vertex color
.equr DotB, VF11                   ; w field holds the dot product of the light direction and the vertex normal.
.equr SColorB, VF12                ; Color scaled by Dot.

.equr SrcColorC, VF14              ; vertex color
.equr DotC, VF15                   ; w field holds the dot product of the light direction and the vertex normal.
.equr SColorC, VF16                ; Color scaled by Dot.

.equr SrcColorD, VF18              ; vertex color
.equr DotD, VF19                   ; w field holds the dot product of the light direction and the vertex normal.
.equr SColorD, VF20                ; Color scaled by Dot.

.equr SrcColorA2, VF22             ; vertex color
.equr SrcColorB2, VF23             ; vertex color
.equr SrcColorC2, VF24             ; vertex color
.equr SrcColorD2, VF25             ; vertex color

.global nglDirLightAddr
nglDirLightAddr:
        MULx Zero, VF00, VF00                   LQ LightDir, 0(gDataPtr)
        NOP                                     LQ Color, 1(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 2
        NOP                                     LOI 128.0

        SUB.xyz LightDir, Zero, LightDir        XITOP Temp                          ; get base ptr
        MULi Color, Color, I                    IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
        NOP                                     LOI 255.0  ; negate the light direction vector
        NOP                                     LQ SrcColorA2, 1(DestPtr)
        NOP                                     LQ SrcColorB2, 4(DestPtr)
        NOP                                     LQ SrcColorC2, 7(DestPtr)
        ADDI One, Zero, I                       LQ SrcColorD2, 10(DestPtr)

DirLightVertLoop:
        ITOF0 SrcColorA, SrcColorA2             LQ DotA, 1(SrcPtr)   ; Dot comes from SrcNorm.
        ITOF0 SrcColorB, SrcColorB2             LQ DotB, 3(SrcPtr)
        ITOF0 SrcColorC, SrcColorC2             LQ DotC, 5(SrcPtr)
        ITOF0 SrcColorD, SrcColorD2             LQ DotD, 7(SrcPtr)

        MUL.xyz DotA, LightDir, DotA            IADDIU SrcPtr, SrcPtr, 8
        MUL.xyz DotB, LightDir, DotB            IADDIU DestPtr, DestPtr, 12
        MUL.xyz DotC, LightDir, DotC            IADDI VertCnt, VertCnt, -4
        MUL.xyz DotD, LightDir, DotD            NOP

        ADDy.x DotA, DotA, DotA                 NOP
        ADDy.x DotB, DotB, DotB                 NOP
        ADDy.x DotC, DotC, DotC                 NOP
        ADDy.x DotD, DotD, DotD                 NOP

        ADDz.x DotA, DotA, DotA                 NOP
        ADDz.x DotB, DotB, DotB                 NOP
        ADDz.x DotC, DotC, DotC                 NOP
        ADDz.x DotD, DotD, DotD                 NOP

        MAX.x DotA, DotA, Zero                  NOP
        MAX.x DotB, DotB, Zero                  NOP
        MAX.x DotC, DotC, Zero                  NOP
        MAX.x DotD, DotD, Zero                  NOP

        ; Apply dot product scalar to the colors.
        MULx SColorA, Color, DotA               NOP
        MULx SColorB, Color, DotB               NOP
        MULx SColorC, Color, DotC               NOP
        MULx SColorD, Color, DotD               NOP

        ; Apply the scaled colors to the vertex.
        ADD SrcColorA, SrcColorA, SColorA       NOP
        ADD SrcColorB, SrcColorB, SColorB       NOP
        ADD SrcColorC, SrcColorC, SColorC       NOP
        ADD SrcColorD, SrcColorD, SColorD       NOP

        MAX SrcColorA, SrcColorA, Zero          NOP       ; this could be axed if we didnt want to support subtractive lights
        MAX SrcColorB, SrcColorB, Zero          NOP
        MAX SrcColorC, SrcColorC, Zero          NOP
        MAX SrcColorD, SrcColorD, Zero          NOP

        MINI SrcColorA, SrcColorA, One          NOP
        MINI SrcColorB, SrcColorB, One          NOP
        MINI SrcColorC, SrcColorC, One          NOP
        MINI SrcColorD, SrcColorD, One          NOP

        FTOI0 SrcColorA, SrcColorA              LQ SrcColorA2, 1(DestPtr)
        FTOI0 SrcColorB, SrcColorB              LQ SrcColorB2, 4(DestPtr)
        FTOI0 SrcColorC, SrcColorC              LQ SrcColorC2, 7(DestPtr)
        FTOI0 SrcColorD, SrcColorD              LQ SrcColorD2, 10(DestPtr)

        NOP                                     SQ.xyz SrcColorA, -11(DestPtr)
        NOP                                     SQ.xyz SrcColorB, -8(DestPtr)
        NOP                                     SQ.xyz SrcColorC, -5(DestPtr)
        NOP                                     SQ.xyz SrcColorD, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, DirLightVertLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#if 1
/*----------------------------------------------------------------------------------------------------------------------
    nglSpecularAddr

    Applies a view-dependent specular highlight from a directional light source.
    See http:;www.cs.sunysb.edu/~mueller/teaching/cse332/illum.pdf for explanation.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr HalfVec, VF01                ; Light direction in local space.
.equr Specular, VF02               ; strength is in x - should be power is in x, strength is in y, magic is in w.
.equr Zero, VF03                   ; (0, 0, 0, 0) constant.

.equr Dot_1, VF04
.equr Color_1, VF05
.equr Dot_2, VF06
.equr Color_2, VF07
.equr Dot_3, VF08
.equr Color_3, VF09
.equr Dot_4, VF10
.equr Color_4, VF11

.global nglSpecularAddr
nglSpecularAddr:
        NOP                                     LQ HalfVec, 0(gDataPtr)
        NOP                                     LQ Specular, 1(gDataPtr)
        NOP                                     IADDI gDataPtr, gDataPtr, 2

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
        MULx Zero, VF00, VF00                   NOP

SpecularVertLoop:
        NOP                                     LQ Dot_1, 1(SrcPtr)  ; source normal
        NOP                                     LQ Dot_2, 3(SrcPtr)
        NOP                                     LQ Dot_3, 5(SrcPtr)
        NOP                                     LQ Dot_4, 7(SrcPtr)

        ; dot SrcNorm with HalfVec
        MUL.xyz Dot_1, HalfVec, Dot_1           NOP
        MUL.xyz Dot_2, HalfVec, Dot_2           NOP
        MUL.xyz Dot_3, HalfVec, Dot_3           NOP
        MUL.xyz Dot_4, HalfVec, Dot_4           NOP

        ADDy.x Dot_1, Dot_1, Dot_1              NOP
        ADDy.x Dot_2, Dot_2, Dot_2              NOP
        ADDy.x Dot_3, Dot_3, Dot_3              NOP
        ADDy.x Dot_4, Dot_4, Dot_4              NOP

        ADDz.x Dot_1, Dot_1, Dot_1              NOP
        ADDz.x Dot_2, Dot_2, Dot_2              NOP
        ADDz.x Dot_3, Dot_3, Dot_3              NOP
        ADDz.x Dot_4, Dot_4, Dot_4              NOP

        MAX.x Dot_1, Dot_1, Zero                NOP
        MAX.x Dot_2, Dot_2, Zero                NOP
        MAX.x Dot_3, Dot_3, Zero                NOP
        MAX.x Dot_4, Dot_4, Zero                NOP

        ; highlight = pow(cos,pow)*strength
;      ITOF0.x Dot, Dot                        NOP
;      MULAx.x ACC, Dot, Specular              NOP
;      MADDw.x Dot, Specular, VF00             NOP
;      FTOI0.x Dot, Dot                        NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

;      MUL.x Dot_1, Dot_1, Dot_1               NOP
;      MUL.x Dot_2, Dot_2, Dot_2               NOP
;      MUL.x Dot_3, Dot_3, Dot_3               NOP
;      MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Specular            LQ Color_1, 1(DestPtr)
        MUL.x Dot_2, Dot_2, Specular            LQ Color_2, 4(DestPtr)
        MUL.x Dot_3, Dot_3, Specular            LQ Color_3, 7(DestPtr)
        MUL.x Dot_4, Dot_4, Specular            LQ Color_4, 10(DestPtr)

        ITOF0.w Color_1, Color_1                NOP
        ITOF0.w Color_2, Color_2                NOP
        ITOF0.w Color_3, Color_3                NOP
        ITOF0.w Color_4, Color_4                NOP

        ADDx.w Color_1, Color_1, Dot_1          NOP
        ADDx.w Color_2, Color_2, Dot_2          NOP
        ADDx.w Color_3, Color_3, Dot_3          NOP
        ADDx.w Color_4, Color_4, Dot_4          LOI 255.0

        MINIi.w Color_1, Color_1, I             NOP
        MINIi.w Color_2, Color_2, I             IADDI VertCnt, VertCnt, -4
        MINIi.w Color_3, Color_3, I             IADDI SrcPtr, SrcPtr, 8
        MINIi.w Color_4, Color_4, I             IADDI DestPtr, DestPtr, 12

        FTOI0.w Color_1, Color_1                NOP
        FTOI0.w Color_2, Color_2                NOP
        FTOI0.w Color_3, Color_3                NOP
        FTOI0.w Color_4, Color_4                NOP

        NOP                                     SQ.w Color_1, -11(DestPtr)
        NOP                                     SQ.w Color_2, -8(DestPtr)
        NOP                                     SQ.w Color_3, -5(DestPtr)
        NOP                                     IBGTZ VertCnt, SpecularVertLoop
        NOP                                     SQ.w Color_4, -2(DestPtr)

        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif

#else
/*----------------------------------------------------------------------------------------------------------------------
    nglSpecularAddr

    Applies a view-dependent specular highlight from a directional light source.
    See http:;www.cs.sunysb.edu/~mueller/teaching/cse332/illum.pdf for explanation.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr HalfVec, VF01                ; Light direction in local space.
.equr Specular, VF02               ; strength is in x - should be power is in x, strength is in y, magic is in w.
.equr Zero, VF03                   ; (0, 0, 0, 0) constant.

.equr Dot_1, VF04
.equr Color_1, VF05
.equr Dot_2, VF06
.equr Color_2, VF07
.equr Dot_3, VF08
.equr Color_3, VF09
.equr Dot_4, VF10
.equr Color_4, VF11

.global nglSpecularAddr
nglSpecularAddr:
        NOP                                     LQ HalfVec, 0(gDataPtr)
        NOP                                     LQ Specular, 1(gDataPtr)
        NOP                                     IADDI gDataPtr, gDataPtr, 2

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
        MULx Zero, VF00, VF00                   NOP

SpecularVertLoop:
        NOP                                     LQ Dot_1, 1(SrcPtr)  ; source normal
        NOP                                     LQ Dot_2, 3(SrcPtr)
        NOP                                     LQ Dot_3, 5(SrcPtr)
        NOP                                     LQ Dot_4, 7(SrcPtr)

        ; dot SrcNorm with HalfVec
        MUL.xyz Dot_1, HalfVec, Dot_1           NOP
        MUL.xyz Dot_2, HalfVec, Dot_2           NOP
        MUL.xyz Dot_3, HalfVec, Dot_3           NOP
        MUL.xyz Dot_4, HalfVec, Dot_4           NOP

        ADDy.x Dot_1, Dot_1, Dot_1              NOP
        ADDy.x Dot_2, Dot_2, Dot_2              NOP
        ADDy.x Dot_3, Dot_3, Dot_3              NOP
        ADDy.x Dot_4, Dot_4, Dot_4              NOP

        ADDz.x Dot_1, Dot_1, Dot_1              NOP
        ADDz.x Dot_2, Dot_2, Dot_2              NOP
        ADDz.x Dot_3, Dot_3, Dot_3              NOP
        ADDz.x Dot_4, Dot_4, Dot_4              NOP

        MAX.x Dot_1, Dot_1, Zero                NOP
        MAX.x Dot_2, Dot_2, Zero                NOP
        MAX.x Dot_3, Dot_3, Zero                NOP
        MAX.x Dot_4, Dot_4, Zero                NOP

        ; highlight = pow(cos,pow)*strength
;      ITOF0.x Dot, Dot                        NOP
;      MULAx.x ACC, Dot, Specular              NOP
;      MADDw.x Dot, Specular, VF00             NOP
;      FTOI0.x Dot, Dot                        NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Dot_1               NOP
        MUL.x Dot_2, Dot_2, Dot_2               NOP
        MUL.x Dot_3, Dot_3, Dot_3               NOP
        MUL.x Dot_4, Dot_4, Dot_4               NOP

;      MUL.x Dot_1, Dot_1, Dot_1               NOP
;      MUL.x Dot_2, Dot_2, Dot_2               NOP
;      MUL.x Dot_3, Dot_3, Dot_3               NOP
;      MUL.x Dot_4, Dot_4, Dot_4               NOP

        MUL.x Dot_1, Dot_1, Specular            LQ Color_1, 1(DestPtr)
        MUL.x Dot_2, Dot_2, Specular            LQ Color_2, 4(DestPtr)
        MUL.x Dot_3, Dot_3, Specular            LQ Color_3, 7(DestPtr)
        MUL.x Dot_4, Dot_4, Specular            LQ Color_4, 10(DestPtr)

        ITOF0.w Color_1, Color_1                NOP
        ITOF0.w Color_2, Color_2                NOP
        ITOF0.w Color_3, Color_3                NOP
        ITOF0.w Color_4, Color_4                NOP

        ADDx.w Color_1, Color_1, Dot_1          NOP
        ADDx.w Color_2, Color_2, Dot_2          NOP
        ADDx.w Color_3, Color_3, Dot_3          NOP
        ADDx.w Color_4, Color_4, Dot_4          LOI 255.0

        MINIi.w Color_1, Color_1, I             NOP
        MINIi.w Color_2, Color_2, I             IADDI VertCnt, VertCnt, -4
        MINIi.w Color_3, Color_3, I             IADDI SrcPtr, SrcPtr, 8
        MINIi.w Color_4, Color_4, I             IADDI DestPtr, DestPtr, 12

        FTOI0.w Color_1, Color_1                NOP
        FTOI0.w Color_2, Color_2                NOP
        FTOI0.w Color_3, Color_3                NOP
        FTOI0.w Color_4, Color_4                NOP

        NOP                                     SQ.w Color_1, -11(DestPtr)
        NOP                                     SQ.w Color_2, -8(DestPtr)
        NOP                                     SQ.w Color_3, -5(DestPtr)
        NOP                                     IBGTZ VertCnt, SpecularVertLoop
        NOP                                     SQ.w Color_4, -2(DestPtr)

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#endif
#endif

#ifdef PROJECT_SPIDERMAN

/*----------------------------------------------------------------------------------------------------------------------
    nglProjectedTextureAddr

    Computes new UV texture coords for each vertex in local space based on the passed in matrix.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var
.equr VertCnt, VI02                ; verts in strip counter

.equr SrcPtr, VI03                 ; source pointer for xyz
.equr DestPtr, VI04                ; dest pointer

.equr Zero, VF01

.equr LightDir, VF02               ; the lights position
.equr LToUV1, VF03                 ; local to UV matrix
.equr LToUV2, VF04
.equr LToUV3, VF05
.equr LToUV4, VF06

    ; per vert data
.equr SrcXYZ_1, VF07
.equr SrcST_1, VF08
.equr SrcNorm_1, VF09
.equr TColor_1, VF10             ; temp color
.equr Dot_1, VF11                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_2, VF12
.equr SrcST_2, VF13
.equr SrcNorm_2, VF14
.equr TColor_2, VF15             ; temp color
.equr Dot_2, VF16                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_3, VF17
.equr SrcST_3, VF18
.equr SrcNorm_3, VF19
.equr TColor_3, VF20             ; temp color
.equr Dot_3, VF21                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_4, VF22
.equr SrcST_4, VF23
.equr SrcNorm_4, VF24
.equr TColor_4, VF25             ; temp color
.equr Dot_4, VF26                ; the dot product of LightToVert and the vertexs normal

.equr CScale, VF27               ; (255,255,255,255)
.equr Dist1, VF28               ; For distance falloff, frustum clipping
.equr Dist2, VF29
.equr Dist3, VF30
.equr Dist4, VF31



.global nglProjectedTextureAddr
nglProjectedTextureAddr:
        NOP                                     LQ LightDir, 0(gDataPtr)
        NOP                                     LQ LightPos, 1(gDataPtr)
        NOP                                     LQ LToUV1, 2(gDataPtr)
        NOP                                     LQ LToUV2, 3(gDataPtr)
        NOP                                     LQ LToUV3, 4(gDataPtr)
        NOP                                     LQ LToUV4, 5(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 6

        SUB.xyz LightDir, VF00, LightDir        XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, gVertBasePtr
        NOP                                     ILW.x VertCnt, gGIFTagPtr + 0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

;      NOP                                     NOP
;      NOP                                     NOP
;      NOP                                     NOP
;      MULw.x CScale, CScale, LToUV4           NOP     ; We hide the fade scale here.

ProjectedTextureLoop:
        NOP                                     LOI 96.0
        ADDi CScale, VF00, I                    NOP

        NOP                                     LQ SrcXYZ_1, 0(SrcPtr)        ; load vert 1
        NOP                                     LQ SrcST_1, 0(DestPtr)        ; load ST 1
        NOP                                     LQ SrcNorm_1, 1(SrcPtr)        ; load the no
        NOP                                     LQ SrcXYZ_2, 2(SrcPtr)        ; load vert 1

        NOP                                     MOVE Dist1, SrcST_1

        MULAx ACC, LToUV1, SrcXYZ_1				LQ SrcST_2, 3(DestPtr)
        MADDAy ACC, LToUV2, SrcXYZ_1            LQ SrcNorm_2, 3(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_1            LQ SrcXYZ_3, 4(SrcPtr)
        MADDw.xyz SrcST_1, LToUV4, VF00             LQ SrcST_3, 6(DestPtr)
;        MADDw.z Dist1, LToUV4, VF00w          NOP

        NOP                                     MOVE Dist2, SrcST_2
        NOP                                     MOVE Dist3, SrcST_3

        MULAx ACC, LToUV1, SrcXYZ_2             LQ SrcNorm_3, 5(SrcPtr)
        MADDAy ACC, LToUV2, SrcXYZ_2            LQ SrcXYZ_4, 6(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_2            LQ SrcST_4, 9(DestPtr)
        MADDw.xyz SrcST_2, LToUV4, VF00             LQ SrcNorm_4, 7(SrcPtr)
;        MADDw.z Dist2, LToUV4, VF00w          NOP

        NOP                                     MOVE Dist4, SrcST_4


        MULAx ACC, LToUV1, SrcXYZ_3             NOP
        MADDAy ACC, LToUV2, SrcXYZ_3            IADDI VertCnt, VertCnt, -4
        MADDAz ACC, LToUV3, SrcXYZ_3            IADDI DestPtr, DestPtr, 12
        MADDw.xyz SrcST_3, LToUV4, VF00         IADDI SrcPtr, SrcPtr, 8
;        MADDw.z Dist3, LToUV4, VF00w          NOP

        MULAx ACC, LToUV1, SrcXYZ_4             NOP
        MADDAy ACC, LToUV2, SrcXYZ_4            NOP
        MADDAz ACC, LToUV3, SrcXYZ_4            NOP
        MADDw.xyz SrcST_4, LToUV4, VF00          NOP
;        MADDw.z Dist4, LToUV4, VF00w          NOP

        MULz.xy SrcST_1,SrcST_1,Dist1           NOP        ; multiply X and Y by Q
        MULz.xy SrcST_2,SrcST_2,Dist2           NOP
        MULz.xy SrcST_3,SrcST_3,Dist3           NOP
        MULz.xy SrcST_4,SrcST_4,Dist4           NOP

        ; dot the vertex normal with the normalized vector to the light
        NOP                                     SQ.xy SrcST_1, -12(DestPtr)
        NOP                                     SQ.xy SrcST_2, -9(DestPtr)
        NOP                                     SQ.xy SrcST_3, -6(DestPtr)
        NOP                                     SQ.xy SrcST_4, -3(DestPtr)

        MUL.xyz Dot_1, LightDir, SrcNorm_1      NOP         ; The first backface culling
        MUL.xyz Dot_2, LightDir, SrcNorm_2      NOP
        MUL.xyz Dot_3, LightDir, SrcNorm_3      NOP
        MUL.xyz Dot_4, LightDir, SrcNorm_4      NOP

        ADDy.x Dot_1, Dot_1, Dot_1              NOP
        ADDy.x Dot_2, Dot_2, Dot_2              NOP
        ADDy.x Dot_3, Dot_3, Dot_3              NOP
        ADDy.x Dot_4, Dot_4, Dot_4              NOP

        ADDz.x Dot_1, Dot_1, Dot_1              NOP
        ADDz.x Dot_2, Dot_2, Dot_2              NOP
        ADDz.x Dot_3, Dot_3, Dot_3              NOP
        ADDz.x Dot_4, Dot_4, Dot_4              NOP

        MAX.x Dot_1, Dot_1, VF00                NOP            ; if dot<0 then dot=0
        MAX.x Dot_2, Dot_2, VF00                NOP
        MAX.x Dot_3, Dot_3, VF00                NOP
        MAX.x Dot_4, Dot_4, VF00                LOI 255.0

        MULx TColor_1, CScale, Dot_1            NOP
        MULx TColor_2, CScale, Dot_2            NOP
        MULx TColor_3, CScale, Dot_3            NOP
        MULx TColor_4, CScale, Dot_4            NOP


        MULw.w TColor_1, TColor_1, LightDir         NOP     ; We hide the fade scale here, in LightDir.w
        MULw.w TColor_2, TColor_2, LightDir         NOP
        MULw.w TColor_3, TColor_3, LightDir         NOP
        MULw.w TColor_4, TColor_4, LightDir         NOP

        FTOI0 TColor_1, TColor_1                NOP
        FTOI0 TColor_2, TColor_2                NOP
        FTOI0 TColor_3, TColor_3                NOP
        FTOI0 TColor_4, TColor_4                NOP

        NOP                                     SQ TColor_1, -11(DestPtr)
        NOP                                     SQ TColor_2, -8(DestPtr)
        NOP                                     SQ TColor_3, -5(DestPtr)
        NOP                                     SQ TColor_4, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, ProjectedTextureLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#if 0

.global nglProjectedTextureAddr
nglProjectedTextureAddr:
        NOP                                     LQ LightDir, 0(gDataPtr)
        NOP                                     LQ LToUV1, 1(gDataPtr)
        NOP                                     LQ LToUV2, 2(gDataPtr)
        NOP                                     LQ LToUV3, 3(gDataPtr)
        NOP                                     LQ LToUV4, 4(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 5

        SUB.xyz LightDir, VF00, LightDir        XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, gVertBasePtr
        NOP                                     ILW.x VertCnt, gGIFTagPtr + 0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     LOI 128.0
        ADDi CScale, Zero, I                    NOP

ProjectedTextureLoop:
        NOP                                     LQ SrcXYZ_1, 0(SrcPtr)        ; load vert 1
        NOP                                     LQ SrcST_1, 0(DestPtr)        ; load ST 1
        NOP                                     LQ SrcNorm_1, 1(SrcPtr)        ; load the no
        NOP                                     LQ SrcXYZ_2, 2(SrcPtr)        ; load vert 1

        NOP                                     MOVE Dist1, SrcST_1

        MULAx ACC, LToUV1, SrcXYZ_1          LQ SrcST_2, 3(DestPtr)
        MADDAy ACC, LToUV2, SrcXYZ_1         LQ SrcNorm_2, 3(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_1         LQ SrcXYZ_3, 4(SrcPtr)
        MADDw.xyz SrcST_1, LToUV4, VF00w            LQ SrcST_3, 6(DestPtr)
;        MADDw.z Dist1, LToUV4, VF00w          NOP

        NOP                                     MOVE Dist2, SrcST_2
        NOP                                     MOVE Dist3, SrcST_3

        MULAx ACC, LToUV1, SrcXYZ_2          LQ SrcNorm_3, 5(SrcPtr)
        MADDAy ACC, LToUV2, SrcXYZ_2         LQ SrcXYZ_4, 6(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_2         LQ SrcST_4, 9(DestPtr)
        MADDw.xyz SrcST_2, LToUV4, VF00w            LQ SrcNorm_4, 7(SrcPtr)
;        MADDw.z Dist2, LToUV4, VF00w          NOP

        NOP                                     MOVE Dist4, SrcST_4


        MULAx ACC, LToUV1, SrcXYZ_3          NOP
        MADDAy ACC, LToUV2, SrcXYZ_3         IADDI VertCnt, VertCnt, -4
        MADDAz ACC, LToUV3, SrcXYZ_3         IADDI DestPtr, DestPtr, 12
        MADDw.xyz SrcST_3, LToUV4, VF00w         IADDI SrcPtr, SrcPtr, 8
;        MADDw.z Dist3, LToUV4, VF00w          NOP

        MULAx ACC, LToUV1, SrcXYZ_4          NOP
        MADDAy ACC, LToUV2, SrcXYZ_4         NOP
        MADDAz ACC, LToUV3, SrcXYZ_4         NOP
        MADDw.xyz SrcST_4, LToUV4, VF00w         NOP
;        MADDw.z Dist4, LToUV4, VF00w          NOP

        MULz.xy SrcST_1,SrcST_1,Dist1        NOP        ; multiply X and Y by Q
        MULz.xy SrcST_2,SrcST_2,Dist2        NOP
        MULz.xy SrcST_3,SrcST_3,Dist3        NOP
        MULz.xy SrcST_4,SrcST_4,Dist4        NOP

        ; dot the vertex normal with the normalized vector to the light
        NOP                                     SQ.xy SrcST_1, -12(DestPtr)
        NOP                                     SQ.xy SrcST_2, -9(DestPtr)
        NOP                                     SQ.xy SrcST_3, -6(DestPtr)
        NOP                                     SQ.xy SrcST_4, -3(DestPtr)

        MUL.xyz Dot_1, LightDir, SrcNorm_1      NOP
        MUL.xyz Dot_2, LightDir, SrcNorm_2      NOP
        MUL.xyz Dot_3, LightDir, SrcNorm_3      NOP
        MUL.xyz Dot_4, LightDir, SrcNorm_4      NOP

        ADDy.x Dot_1, Dot_1, Dot_1              NOP
        ADDy.x Dot_2, Dot_2, Dot_2              NOP
        ADDy.x Dot_3, Dot_3, Dot_3              NOP
        ADDy.x Dot_4, Dot_4, Dot_4              NOP

        ADDz.x Dot_1, Dot_1, Dot_1              NOP
        ADDz.x Dot_2, Dot_2, Dot_2              NOP
        ADDz.x Dot_3, Dot_3, Dot_3              NOP
        ADDz.x Dot_4, Dot_4, Dot_4              NOP

        MAX.x Dot_1, Dot_1, Zero                NOP            ; if dot<0 then dot=0
        MAX.x Dot_2, Dot_2, Zero                NOP
        MAX.x Dot_3, Dot_3, Zero                NOP
        MAX.x Dot_4, Dot_4, Zero                LOI 255.0

        MULx TColor_1, CScale, Dot_1            NOP
        MULx TColor_2, CScale, Dot_2            NOP
        MULx TColor_3, CScale, Dot_3            NOP
        MULx TColor_4, CScale, Dot_4            NOP
                                                                ; Distance falloff

        NOP                                     LOI 1.0
        ;ADDi.z  fTemp, Zero, I                    NOP
        ;FTOI0.z fTemp, fTemp                      NOP
        ;ITOF4.z fTemp, fTemp                      NOP

        ADDi.z Dot_4, Zero, I                   NOP

        SUB.z Dot_1, Dot_4, SrcST_1              NOP
        SUB.z Dot_2, Dot_4, SrcST_2              NOP
        SUB.z Dot_3, Dot_4, SrcST_3              NOP
        SUB.z Dot_4, Dot_4, SrcST_4              NOP

        MAX.z Dot_1, Dot_1, Zero                NOP
        MAX.z Dot_2, Dot_2, Zero                NOP
        MAX.z Dot_3, Dot_3, Zero                NOP
        MAX.z Dot_4, Dot_4, Zero                NOP

        NOP                                     MOVE Dist1, VF00    ; Backvert clip
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ADDw.xyz Dist1, Dist1, VF00             NOP
        clipw.xyz Dot_1, Dist1                  NOP
        clipw.xyz Dot_2, Dist1                  NOP
        clipw.xyz Dot_3, Dist1                  NOP
        clipw.xyz Dot_4, Dist1                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     FCAND Temp, 0x400000
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, NC1
        NOP                                     NOP
        NOP                                     MOVE Dot_1, VF00
NC1:
        NOP                                     FCAND Temp, 0x10000
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, NC2
        NOP                                     NOP
        NOP                                     MOVE Dot_2, VF00
NC2:
        NOP                                     FCAND Temp, 0x400
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, NC3
        NOP                                     NOP
        NOP                                     MOVE Dot_3, VF00
NC3:
        NOP                                     FCAND Temp, 0x10
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, NC4
        NOP                                     NOP
        NOP                                     MOVE Dot_4, VF00
NC4:

        MULz.w TColor_1, TColor_1, Dot_1            NOP
        MULz.w TColor_2, TColor_2, Dot_2            NOP
        MULz.w TColor_3, TColor_3, Dot_3            NOP
        MULz.w TColor_4, TColor_4, Dot_4            NOP


        FTOI0 TColor_1, TColor_1                NOP
        FTOI0 TColor_2, TColor_2                NOP
        FTOI0 TColor_3, TColor_3                NOP
        FTOI0 TColor_4, TColor_4                NOP

        NOP                                     SQ TColor_1, -11(DestPtr)
        NOP                                     SQ TColor_2, -8(DestPtr)
        NOP                                     SQ TColor_3, -5(DestPtr)
        NOP                                     SQ TColor_4, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, ProjectedTextureLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif


#else ; #ifdef PROJECT_SPIDERMAN

/*----------------------------------------------------------------------------------------------------------------------
    nglProjectedTextureAddr

    Computes new UV texture coords for each vertex in local space based on the passed in matrix.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var
.equr VertCnt, VI02                ; verts in strip counter

.equr SrcPtr, VI03                 ; source pointer for xyz
.equr DestPtr, VI04                ; dest pointer

.equr Zero, VF01

.equr LightDir, VF02               ; the lights position
.equr LToUV1, VF03                 ; local to UV matrix
.equr LToUV2, VF04
.equr LToUV3, VF05
.equr LToUV4, VF06

    ; per vert data
.equr SrcXYZ_1, VF07
.equr SrcST_1, VF08
.equr SrcNorm_1, VF09
.equr TColor_1, VF10             ; temp color
.equr Dot_1, VF11                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_2, VF12
.equr SrcST_2, VF13
.equr SrcNorm_2, VF14
.equr TColor_2, VF15             ; temp color
.equr Dot_2, VF16                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_3, VF17
.equr SrcST_3, VF18
.equr SrcNorm_3, VF19
.equr TColor_3, VF20             ; temp color
.equr Dot_3, VF21                ; the dot product of LightToVert and the vertexs normal

.equr SrcXYZ_4, VF22
.equr SrcST_4, VF23
.equr SrcNorm_4, VF24
.equr TColor_4, VF25             ; temp color
.equr Dot_4, VF26                ; the dot product of LightToVert and the vertexs normal

.equr CScale, VF27               ; (255,255,255,255)

.global nglProjectedTextureAddr
nglProjectedTextureAddr:
        NOP                                     LQ LightDir, 0(gDataPtr)
        NOP                                     LQ LToUV1, 1(gDataPtr)
        NOP                                     LQ LToUV2, 2(gDataPtr)
        NOP                                     LQ LToUV3, 3(gDataPtr)
        NOP                                     LQ LToUV4, 4(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 5

        SUB.xyz LightDir, VF00, LightDir        XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG + 0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     LOI 128.0
        ADDi CScale, Zero, I                    NOP

ProjectedTextureLoop:
        NOP                                     LQ SrcXYZ_1, 0(SrcPtr)        ; load vert 1
        NOP                                     LQ SrcST_1, 0(DestPtr)        ; load ST 1
        NOP                                     LQ SrcNorm_1, 1(SrcPtr)        ; load the no
        NOP                                     LQ SrcXYZ_2, 2(SrcPtr)        ; load vert 1

        MULAx ACC, LToUV1, SrcXYZ_1             LQ SrcST_2, 3(DestPtr)
        MADDAy ACC, LToUV2, SrcXYZ_1            LQ SrcNorm_2, 3(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_1            LQ SrcXYZ_3, 4(SrcPtr)
        MADDw.xy SrcST_1, LToUV4, VF00w         LQ SrcST_3, 6(DestPtr)

        MULAx ACC, LToUV1, SrcXYZ_2          LQ SrcNorm_3, 5(SrcPtr)
        MADDAy ACC, LToUV2, SrcXYZ_2         LQ SrcXYZ_4, 6(SrcPtr)
        MADDAz ACC, LToUV3, SrcXYZ_2         LQ SrcST_4, 9(DestPtr)
        MADDw.xy SrcST_2, LToUV4, VF00w         LQ SrcNorm_4, 7(SrcPtr)

        MULAx ACC, LToUV1, SrcXYZ_3          NOP
        MADDAy ACC, LToUV2, SrcXYZ_3         IADDI VertCnt, VertCnt, -4
        MADDAz ACC, LToUV3, SrcXYZ_3         IADDI DestPtr, DestPtr, 12
        MADDw.xy SrcST_3, LToUV4, VF00w         IADDI SrcPtr, SrcPtr, 8

        MULAx ACC, LToUV1, SrcXYZ_4          NOP
        MADDAy ACC, LToUV2, SrcXYZ_4         NOP
        MADDAz ACC, LToUV3, SrcXYZ_4         NOP
        MADDw.xy SrcST_4, LToUV4, VF00w         NOP

        MULz.xy SrcST_1,SrcST_1,SrcST_1      NOP        ; multiply X and Y by Q
        MULz.xy SrcST_2,SrcST_2,SrcST_2      NOP
        MULz.xy SrcST_3,SrcST_3,SrcST_3      NOP
        MULz.xy SrcST_4,SrcST_4,SrcST_4      NOP

        ; dot the vertex normal with the normalized vector to the light
        NOP                                     SQ.xyz SrcST_1, -12(DestPtr)
        NOP                                     SQ.xyz SrcST_2, -9(DestPtr)
        NOP                                     SQ.xyz SrcST_3, -6(DestPtr)
        NOP                                     SQ.xyz SrcST_4, -3(DestPtr)

        MUL.xyz Dot_1, LightDir, SrcNorm_1      NOP
        MUL.xyz Dot_2, LightDir, SrcNorm_2      NOP
        MUL.xyz Dot_3, LightDir, SrcNorm_3      NOP
        MUL.xyz Dot_4, LightDir, SrcNorm_4      NOP

        ADDy.x Dot_1, Dot_1, Dot_1              NOP
        ADDy.x Dot_2, Dot_2, Dot_2              NOP
        ADDy.x Dot_3, Dot_3, Dot_3              NOP
        ADDy.x Dot_4, Dot_4, Dot_4              NOP

        ADDz.x Dot_1, Dot_1, Dot_1              NOP
        ADDz.x Dot_2, Dot_2, Dot_2              NOP
        ADDz.x Dot_3, Dot_3, Dot_3              NOP
        ADDz.x Dot_4, Dot_4, Dot_4              NOP

        MAX.x Dot_1, Dot_1, Zero                NOP            ; if dot<0 then dot=0
        MAX.x Dot_2, Dot_2, Zero                NOP
        MAX.x Dot_3, Dot_3, Zero                NOP
        MAX.x Dot_4, Dot_4, Zero                LOI 255.0

        MULx TColor_1, CScale, Dot_1            NOP
        MULx TColor_2, CScale, Dot_2            NOP
        MULx TColor_3, CScale, Dot_3            NOP
        MULx TColor_4, CScale, Dot_4            NOP

        FTOI0 TColor_1, TColor_1                NOP
        FTOI0 TColor_2, TColor_2                NOP
        FTOI0 TColor_3, TColor_3                NOP
        FTOI0 TColor_4, TColor_4                NOP

        NOP                                     SQ TColor_1, -11(DestPtr)
        NOP                                     SQ TColor_2, -8(DestPtr)
        NOP                                     SQ TColor_3, -5(DestPtr)
        NOP                                     SQ TColor_4, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, ProjectedTextureLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#endif ; #ifdef PROJECT_SPIDERMAN

/*----------------------------------------------------------------------------------------------------------------------
    nglPointProjectedTextureAddr

    Computes new UV texture coords for each vertex based on a spherical projection.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; temp var
.equr VertCnt, VI02                ; verts in strip counter

.equr SrcPtr, VI03                 ; source pointer for xyz
.equr DestPtr, VI04                ; dest pointer

.equr Temp, VI05                   ; verts in strip counter
.equr MACMask, VI06                ; verts in strip counter

.equr Zero, VF01                   ; (0, 0, 0, 0) constant

.equr LightPos, VF02
.equr LightColor, VF03
.equr LightRange, VF04             ; range in x
.equr InvLightRange, VF05          ; range in x

.equr SrcXYZ, VF07
.equr SrcST, VF08
.equr SrcNorm, VF09
.equr Dot, VF10
.equr HalfRange, VF11
.equr Color, VF12
.equr Right, VF13
.equr RightSqr, VF14
.equr Up, VF15
.equr U, VF16
.equr V, VF17
.equr Comp, VF18                   ; float register for comparisons

.global nglPointProjectedTextureAddr
nglPointProjectedTextureAddr:
        NOP                                     LQ LightPos, 0(gDataPtr)
        NOP                                     LQ LightColor, 1(gDataPtr)
        NOP                                     LQ LightRange, 2(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 3

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG + 0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     LOI 128.0
        MULi Color, LightColor, I               NOP
        FTOI0 Color, Color                      NOP

        NOP                                     DIV Q, VF00w, LightRange.x
        NOP                                     WAITQ
        ADDq.w InvLightRange, Zero, Q           NOP
        MUL.x LightRange, LightRange, LightRange NOP

PointProjectedTextureLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)        ; load vert 1
        NOP                                     LQ SrcST, 0(DestPtr)        ; load ST 1
        NOP                                     LQ SrcNorm, 1(SrcPtr)       ; load the normal for this vertex

        ; get plane equation of plane defined by vertex/normal
        MUL.xyz Dot, SrcXYZ, SrcNorm            NOP
        ADDy.x Dot, Dot, Dot                    NOP
        ADDz.x Dot, Dot, Dot                    NOP
        SUBx.w SrcNorm, Zero, Dot               NOP             ; srcnorm is now the plane equation

        ; determine the distance from the light pos to the plane
        MUL.xyz Dot, LightPos, SrcNorm          NOP
        ADDy.x Dot, Dot, Dot                    NOP
        ADDz.x Dot, Dot, Dot                    NOP
        ADDw.x Dot, Dot, SrcNorm                NOP             ; dot is now the distance from the light position to the plane

        ; calculate distance attenuation
        NOP                                     NOP
        NOP                                     IADDIU MACMask, VI00, 0x80 ; x field sign bit
        NOP                                     NOP
        NOP                                     FMAND Temp, MACMask
        NOP                                     NOP

        MULx.w Color, InvLightRange, Dot        NOP

        NOP                                     IBEQ Temp, VI00, SkipCull
        NOP                                     NOP
        ADD.w Color, Zero, VF00                 NOP

SkipCull:
        MAX.w Color, Color, Zero                NOP
        MINI.w Color, Color, VF00               NOP

        SUB.w Color, VF00, Color                NOP
        MINI.w Color, Color, VF00               NOP
        MAX.w Color, Color, Zero                NOP
        NOP                                     LOI 128.0
        MULi.w Color, Color, I                  NOP
        FTOI0.w Color, Color                    NOP

        MUL.x HalfRange, Dot, Dot               NOP
        SUB.x HalfRange, LightRange, HalfRange  NOP
        NOP                                     SQRT Q, HalfRange.x
        NOP                                     WAITQ           ; halfrange is the distance from the light position (on the plane)
        ADDq.x HalfRange, Zero, Q               NOP             ; to the intersection of the far range circle and the plane.

        NOP                                     LOI -1.0
        MULi.x Dot, Dot, I                      NOP
        MULx.xyz Dot, SrcNorm, Dot              NOP             ; dot is now the light projected on the plane
        ADD.xyz Dot, Dot, LightPos              NOP

        SUB.xyz Dot, SrcXYZ, Dot                NOP
        NOP                                     DIV Q, VF00w, HalfRange.x
        NOP                                     WAITQ
        MULq.xyz Dot, Dot, Q                    NOP             ; dot is now the uvw coordinates.

        ; cross srcnorm with arbitrary (1,0,0) vector
        NOP                                     LOI 1.0
        ADD Right, Zero, Zero                   NOP
        ADDi.x Right, Zero, I                   NOP

        ; if srcnorm is mostly a horizontal vector, switch to a (0,1,0) vector
        ; so if x>y || z>y set vector to (0,1,0)
        ABS Comp, SrcNorm                       NOP
        SUBy.x Comp, Comp, Comp                 NOP
        NOP                                     NOP
        NOP                                     IADDIU MACMask, VI00, 0x80 ; x field sign bit
        NOP                                     NOP
        NOP                                     FMAND Temp, MACMask
        NOP                                     NOP
        NOP                                     IBNE Temp, VI00, SkipX  ; if x<y then skip
        NOP                                     NOP

        NOP                                     LOI 1.0
        ADD Right, Zero, Zero                   B SkipY
        ADDi.y Right, Zero, I                   NOP

SkipX:
        SUBy.z Comp, Comp, Comp                 NOP
        NOP                                     NOP
        NOP                                     IADDIU MACMask, VI00, 0x20 ; z field sign bit
        NOP                                     NOP
        NOP                                     FMAND Temp, MACMask
        NOP                                     NOP
        NOP                                     IBNE Temp, VI00, SkipY  ; if z<y then skip
        NOP                                     NOP

        NOP                                     NOP
        ADD Right, Zero, Zero                   NOP
        ADDi.y Right, Zero, I                   NOP

SkipY:
        OPMULA.xyz ACC, Right, SrcNorm          NOP
        OPMSUB.xyz Right, SrcNorm, Right        NOP

        ; renormalize right vector
        MUL.xyz RightSqr, Right, Right          NOP
        ADDy.x RightSqr, RightSqr, RightSqr     NOP
        ADDz.x RightSqr, RightSqr, RightSqr     NOP

        NOP                                     RSQRT Q, VF00w, RightSqr.x
        NOP                                     WAITQ
        MULq.xyz Right, Right, Q                NOP

        ; cross srcnorm again with the right vector
        OPMULA.xyz ACC, Right, SrcNorm          NOP
        OPMSUB.xyz Up, SrcNorm, Right           NOP

        MUL U, Right, Dot                       NOP
        ADDy.x U, U, U                          NOP
        ADDz.x U, U, U                          NOP

        MUL V, Up, Dot                          NOP
        ADDx.y V, V, V                          NOP
        ADDz.y V, V, V                          NOP

        ADD.y U, V, Zero                        NOP

        NOP                                     LOI 0.5
        MULi.xy U, U, I                         NOP
        ADDi.xy U, U, I                         NOP

        MULz.xy U, U, SrcST                     NOP             ; scale for perspective correction
        NOP                                     SQ.xy U, 0(DestPtr)
        NOP                                     SQ Color, 1(DestPtr)

        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IADDI DestPtr, DestPtr, 3
        NOP                                     IADDI SrcPtr, SrcPtr, 2

        NOP                                     IBGTZ VertCnt, PointProjectedTextureLoop
        NOP                                     NOP

#endif
        NOP                                     B CommandListReturnA
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglTintAddr

    Applies a additive and multiplicative effect (tint) to the untransformed vertices.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr DestPtr, VI06                ; source and dest pointer for color

.equr LightDir, VF02               ; Light direction in local space.
.equr MulColor, VF06               ; Scalar color.

.equr One, VF07                    ; (255, 255, 255, 255) constant.
.equr Zero, VF08                   ; (0, 0, 0, 0) constant.

.equr SrcColorA, VF10              ; vertex color
.equr SrcColorB, VF11              ; vertex color
.equr SrcColorC, VF12              ; vertex color
.equr SrcColorD, VF13              ; vertex color

.equr SrcColorA2, VF14             ; vertex color
.equr SrcColorB2, VF15             ; vertex color
.equr SrcColorC2, VF16             ; vertex color
.equr SrcColorD2, VF17             ; vertex color

.equr SrcColorA3, VF18             ; vertex color
.equr SrcColorB3, VF19             ; vertex color
.equr SrcColorC3, VF20             ; vertex color
.equr SrcColorD3, VF21             ; vertex color

.global nglTintAddr
nglTintAddr:
        ; check the flag to see if the program should be run.
        NOP                                     ILW.x Flags, NGLMEM_FLAGS+0(VI00)
        NOP                                     IADDIU Temp, VI00, NGLVU_TINT
        NOP                                     IAND Temp, Flags, Temp
        NOP                                     NOP
        NOP                                     IBEQ Temp, VI00, CommandListReturnA
        NOP                                     NOP

        MULx Zero, VF00, VF00                   LOI 255.0
        NOP                                     LQ MulColor, NGLMEM_TINT_COLOR+0(VI00)

        NOP                                     XITOP Temp
        ADDI One, Zero, I                       IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     NOP

        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     LQ SrcColorA2, 1(DestPtr)
        NOP                                     LQ SrcColorB2, 4(DestPtr)
        NOP                                     LQ SrcColorC2, 7(DestPtr)
        NOP                                     LQ SrcColorD2, 10(DestPtr)

        ; Argh...wish I didnt need all this prologue!
        ITOF0 SrcColorA, SrcColorA2             IADDIU DestPtr, DestPtr, 12
        ITOF0 SrcColorB, SrcColorB2             IADDI VertCnt, VertCnt, -4
        ITOF0 SrcColorC, SrcColorC2             NOP
        ITOF0 SrcColorD, SrcColorD2             NOP

        ; Apply the colors to the vertex.
        MUL SrcColorA, SrcColorA, MulColor      NOP
        MUL SrcColorB, SrcColorB, MulColor      NOP
        MUL SrcColorC, SrcColorC, MulColor      NOP
        MUL SrcColorD, SrcColorD, MulColor      NOP

        FTOI0 SrcColorA3, SrcColorA             LQ SrcColorA2, 1(DestPtr)
        FTOI0 SrcColorB3, SrcColorB             LQ SrcColorB2, 4(DestPtr)
        FTOI0 SrcColorC3, SrcColorC             LQ SrcColorC2, 7(DestPtr)
        FTOI0 SrcColorD3, SrcColorD             LQ SrcColorD2, 10(DestPtr)

TintVertLoop:
        ITOF0 SrcColorA, SrcColorA2             SQ SrcColorA3, -11(DestPtr)
        ITOF0 SrcColorB, SrcColorB2             SQ SrcColorB3, -8(DestPtr)
        ITOF0 SrcColorC, SrcColorC2             SQ SrcColorC3, -5(DestPtr)
        ITOF0 SrcColorD, SrcColorD2             SQ SrcColorD3, -2(DestPtr)

        ; Apply the colors to the vertex.
        MUL SrcColorA, SrcColorA, MulColor      IADDIU DestPtr, DestPtr, 12
        MUL SrcColorB, SrcColorB, MulColor      LQ SrcColorA2, 1(DestPtr)
        MUL SrcColorC, SrcColorC, MulColor      LQ SrcColorB2, 4(DestPtr)
        MUL SrcColorD, SrcColorD, MulColor      LQ SrcColorC2, 7(DestPtr)

        FTOI0 SrcColorA3, SrcColorA             IADDI VertCnt, VertCnt, -4
        FTOI0 SrcColorB3, SrcColorB             LQ SrcColorD2, 10(DestPtr)
        FTOI0 SrcColorC3, SrcColorC             IBGTZ VertCnt, TintVertLoop
        FTOI0 SrcColorD3, SrcColorD             NOP

        NOP                                     SQ SrcColorA3, -11(DestPtr)
        NOP                                     SQ SrcColorB3, -8(DestPtr)
        NOP                                     SQ SrcColorC3, -5(DestPtr)
        NOP                                     SQ SrcColorD3, -2(DestPtr)

        NOP                                     B CommandListReturnA
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglRenderNormalsAddr

    This function converts each vertex into 2 vertex linestrip primitve, ready to be kicked.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr SrcPtr, VI05                 ; src pointer - source xyz and normal
.equr DestPtr, VI06                ; dest pointer - st, color and final xyz
.equr DestWritePtr, VI07           ; output pointer for line verts

.equr XYZ3Bit, VI08                ; used to mask off the first line vert

.equr LToS1, VF01                  ; local to screen matrix
.equr LToS2, VF02
.equr LToS3, VF03
.equr LToS4, VF04

.equr XYZ, VF10                    ; source xyz
.equr Norm, VF11                   ; source normal
.equr FixedXYZ, VF16               ; fixed point xyz

.global nglRenderNormalsAddr
nglRenderNormalsAddr:
#if 0
        NOP                                     LQ LToS1, NGLMEM_LOCAL_TO_SCREEN+0(VI00)   ; load screen x transformation matrix
        NOP                                     LQ LToS2, NGLMEM_LOCAL_TO_SCREEN+1(VI00)
        NOP                                     LQ LToS3, NGLMEM_LOCAL_TO_SCREEN+2(VI00)
        NOP                                     LQ LToS4, NGLMEM_LOCAL_TO_SCREEN+3(VI00)

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     IADDIU DestWritePtr, DestPtr, 0
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     LOI 0.1
        NOP                                     IADDIU XYZ3Bit, VI00, 0x7fff
        NOP                                     IADDIU XYZ3Bit, XYZ3Bit, 1

NormalsVertLoop:
        NOP                                     LQ Norm, 1(SrcPtr)
        NOP                                     LQ FixedXYZ, 2(DestPtr)
        NOP                                     LQ XYZ, 0(SrcPtr)
        NOP                                     NOP
        MULi Norm, Norm, I                      NOP
        NOP                                     SQ.xyz FixedXYZ, 0(DestWritePtr)
        NOP                                     ISW.w VI00, 0(DestWritePtr)
        NOP                                     ISW.w VI00, 1(DestWritePtr)
        ADD XYZ, XYZ, Norm                      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULAx ACC, LToS1, XYZ                NOP
        MADDAy ACC, LToS2, XYZ               NOP
        MADDAz ACC, LToS3, XYZ               NOP
        MADDw XYZ, LToS4, VF00w                 NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     DIV Q, VF00w, XYZ.w
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULq XYZ, XYZ, Q                        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     IADDI VertCnt, VertCnt, -1
        FTOI4 XYZ, XYZ                          IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDIU DestWritePtr, DestWritePtr, 2
        NOP                                     IBGTZ VertCnt, NormalsVertLoop
        NOP                                     SQ.xyz XYZ, -1(DestWritePtr)

        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif

#ifdef PROJECT_KELLYSLATER


/*----------------------------------------------------------------------------------------------------------------------
    nglWaveFoamAddr

    Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr Offset, VF02                 ; Offset of alpha falloff

.equr SrcAlpha_1, VF05               ; holds the old alpha value
.equr SrcAlpha_2, VF06               ; holds the old alpha value
.equr SrcAlpha_3, VF07               ; holds the old alpha value
.equr SrcAlpha_4, VF08               ; holds the old alpha value

.global nglWaveFoamAddr
nglWaveFoamAddr:
        ; Loop setup.
;        NOP                                     LQ Offset, 1(gDataPtr)	; alpha offset --- currently unused (dc 06/04/02)
;        NOP                                     IADDIU gDataPtr, gDataPtr, 1
;        NOP                                     LQ CameraPos, 0(gDataPtr)
    ; These can be constants when the values are decided
;        NOP                                     LQ Scale, 1(gDataPtr)
;        NOP                                     LQ Offset, 2(gDataPtr)
;        NOP                                     IADDIU gDataPtr, gDataPtr, 3

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
;        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
;                NOP                                     LOI -1.0

WaveFoamVertLoop:
#if 1
        NOP                                     LQ SrcAlpha_1, 0(DestPtr)
        NOP                                     LQ SrcAlpha_2, 3(DestPtr)
        NOP                                     LQ SrcAlpha_3, 6(DestPtr)
        NOP                                     LQ SrcAlpha_4, 9(DestPtr)
;        SUBw.y SrcAlpha_1, SrcAlpha_1, Offset.w   SQ.w SrcAlpha_1, 1 (DestPtr)
;        SUBw.y SrcAlpha_2, SrcAlpha_2, Offset.w   SQ.w SrcAlpha_2, 4 (DestPtr)
;        SUBw.y SrcAlpha_3, SrcAlpha_3, Offset.w   SQ.w SrcAlpha_3, 7 (DestPtr)
;        SUBw.y SrcAlpha_4, SrcAlpha_4, Offset.w   SQ.w SrcAlpha_4, 10(DestPtr)
;        MULI.y SrcAlpha_1, SrcAlpha_1, I    SQ.w SrcAlpha_1, 1 (DestPtr)
;        MULI.y SrcAlpha_2, SrcAlpha_2, I    SQ.w SrcAlpha_2, 4 (DestPtr)
;        MULI.y SrcAlpha_3, SrcAlpha_3, I    SQ.w SrcAlpha_3, 7 (DestPtr)
;        MULI.y SrcAlpha_4, SrcAlpha_4, I    SQ.w SrcAlpha_4, 10(DestPtr)
        NOP                                     SQ.w SrcAlpha_1, 1 (DestPtr)
        NOP                                     SQ.w SrcAlpha_2, 4 (DestPtr)
        NOP                                     SQ.w SrcAlpha_3, 7 (DestPtr)
        NOP                                     SQ.w SrcAlpha_4, 10(DestPtr)
;        NOP                                     SQ SrcAlpha_1, 0(DestPtr)
;        NOP                                     SQ SrcAlpha_2, 3(DestPtr)
;        NOP                                     SQ SrcAlpha_3, 6(DestPtr)
;        NOP                                     SQ SrcAlpha_4, 9(DestPtr)
        NOP                                     IADDI VertCnt, VertCnt, -4
        NOP                                     IADDIU DestPtr, DestPtr, 12
        NOP                                     IBGTZ VertCnt, WaveFoamVertLoop
        NOP                                     NOP
        NOP                                     B CommandListReturnA
        NOP                                     NOP
#else
        NOP                                     LQ.w SrcAlpha, 0(DestPtr)
;        NOP                                     IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     SQ.w SrcAlpha, -2(DestPtr)
        NOP                                     IBGTZ VertCnt, WaveFoamVertLoop
        NOP                                     NOP
        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif

/*----------------------------------------------------------------------------------------------------------------------
    nglWaveDarkAddr

    Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color
.equr PrevDestPtr, VI07            ; source and dest pointer for color, previous loop iteration

; constant registers
.equr Scale, VF01                  ; Scale of alpha falloff
.equr Offset, VF02                 ; Offset of alpha falloff
.equr CameraPos, VF03               ; Camera position in local space.
.equr Zero, VF03                    ; 0 in w coord --- shared with CameraPos!.

; input data
.equr SrcXYZ_1, VF04                 ; vertex xyz
.equr SrcXYZ_2, VF05                 ; vertex xyz
.equr SrcXYZ_3, VF06                 ; vertex xyz
.equr SrcXYZ_4, VF07                 ; vertex xyz
.equr SrcNorm_1, VF08                ; vertex normal
.equr SrcNorm_2, VF09                ; vertex normal
.equr SrcNorm_3, VF10                ; vertex normal
.equr SrcNorm_4, VF11                ; vertex normal
.equr SrcAlpha_1, VF12               ; holds the old alpha value
.equr SrcAlpha_2, VF13               ; holds the old alpha value
.equr SrcAlpha_3, VF14               ; holds the old alpha value
.equr SrcAlpha_4, VF15               ; holds the old alpha value
.equr PrevSrcAlpha_1, VF16           ; holds the old alpha value, previous loop iteration
.equr PrevSrcAlpha_2, VF17           ; holds the old alpha value, previous loop iteration
.equr PrevSrcAlpha_3, VF18           ; holds the old alpha value, previous loop iteration
.equr PrevSrcAlpha_4, VF19           ; holds the old alpha value, previous loop iteration

; computations
.equr CameraDir_1, VF04              ; Vector from mesh vertex to camera position.
.equr CameraDir_2, VF05              ; Vector from mesh vertex to camera position.
.equr CameraDir_3, VF06              ; Vector from mesh vertex to camera position.
.equr CameraDir_4, VF07              ; Vector from mesh vertex to camera position.
.equr Dot_1, VF20                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr Dot_2, VF21                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr Dot_3, VF22                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr Dot_4, VF23                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr PrevDot_1, VF24                ; w field holds the dot product of the camera vector and the vertex normal.
.equr PrevDot_2, VF25                ; w field holds the dot product of the camera vector and the vertex normal.
.equr PrevDot_3, VF26                ; w field holds the dot product of the camera vector and the vertex normal.
.equr PrevDot_4, VF27                ; w field holds the dot product of the camera vector and the vertex normal.
.equr SelfDot_1, VF28                ; w field holds the dot product of the camera vector with itself.
.equr SelfDot_2, VF29                ; w field holds the dot product of the camera vector with itself.
.equr SelfDot_3, VF30                ; w field holds the dot product of the camera vector with itself.
.equr SelfDot_4, VF31                ; w field holds the dot product of the camera vector with itself.

; temp values
.equr WaveTemp, VF31                 ; Only used in loading parameters (dc 06/04/02)

.global nglWaveDarkAddr
nglWaveDarkAddr:
        ; Loop setup.
        NOP                                     LQ CameraPos, NGLMEM_VIEW_TO_LOCAL+3(VI00)
;        NOP                                     LQ CameraPos, 0(gDataPtr)	; old way (dc 06/04/02)
        MULx.w Zero, VF00, VF00                 LQ WaveTemp, 0(gDataPtr)
;        NOP                                     LQ Scale, 0(gDataPtr)
;        NOP                                     LQ Offset, 1(gDataPtr)	; old way (dc 06/04/02)
        NOP                                     IADDIU gDataPtr, gDataPtr, 1
        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START

		; Broadcast the inputs to w (dc 06/04/02)
        ADDy.w Offset, Zero, WaveTemp           ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        ADDx.w Scale, Zero, WaveTemp            IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        NOP                                     IADDIU PrevDestPtr, DestPtr, 12

    NOP                                     LQ.w SrcAlpha_1, 1(DestPtr)
    NOP                                     LQ.w SrcAlpha_2, 4(DestPtr)
    NOP                                     LQ.w SrcAlpha_3, 7(DestPtr)
    NOP                                     LQ.w SrcAlpha_4, 10(DestPtr)

    ; convert old alpha
    ITOF0.w SrcAlpha_1, SrcAlpha_1          LQ SrcXYZ_1, 0(SrcPtr)
    ITOF0.w SrcAlpha_2, SrcAlpha_2          LQ SrcXYZ_2, 2(SrcPtr)
    ITOF0.w SrcAlpha_3, SrcAlpha_3          LQ SrcXYZ_3, 4(SrcPtr)
    ITOF0.w SrcAlpha_4, SrcAlpha_4          LQ SrcXYZ_4, 6(SrcPtr)

    ; BEWARE:  CameraDir and SrcXYZ are the same register!
    SUB.xyz CameraDir_1, CameraPos, SrcXYZ_1   LQ SrcNorm_1, 1(SrcPtr)
    SUB.xyz CameraDir_2, CameraPos, SrcXYZ_2   LQ SrcNorm_2, 3(SrcPtr)
    SUB.xyz CameraDir_3, CameraPos, SrcXYZ_3   LQ SrcNorm_3, 5(SrcPtr)
    SUB.xyz CameraDir_4, CameraPos, SrcXYZ_4   LQ SrcNorm_4, 7(SrcPtr)

WaveDarkVertLoop:
        MUL.xyz SelfDot_1, CameraDir_1, CameraDir_1   IADDIU SrcPtr, SrcPtr, 8
        MUL.xyz SelfDot_2, CameraDir_2, CameraDir_2   IADDIU DestPtr, DestPtr, 12
        MUL.xyz SelfDot_3, CameraDir_3, CameraDir_3   IADDI VertCnt, VertCnt, -4
        MUL.xyz SelfDot_4, CameraDir_4, CameraDir_4   NOP

        ADDAx.w ACC, Zero, SelfDot_1            NOP
        MADDAy.w ACC, VF00, SelfDot_1           NOP
        MADDz.w SelfDot_1, VF00, SelfDot_1      NOP

        MUL.xyz Dot_1, CameraDir_1, SrcNorm_1   SQ.w SrcAlpha_1, -8(SrcPtr)	; record the old alpha for later
        MUL.xyz Dot_2, CameraDir_2, SrcNorm_2   SQ.w SrcAlpha_2, -6(SrcPtr)	; use in the highlight passes
        MUL.xyz Dot_3, CameraDir_3, SrcNorm_3   SQ.w SrcAlpha_3, -4(SrcPtr)
        MUL.xyz Dot_4, CameraDir_4, SrcNorm_4   SQ.w SrcAlpha_4, -2(SrcPtr)

        ADDAx.w ACC, Zero, Dot_1                RSQRT Q, Scale.w, SelfDot_1.w
        MADDAy.w ACC, VF00, Dot_1               NOP
        MADDz.w Dot_1, VF00, Dot_1              NOP
        ADDAx.w ACC, Zero, SelfDot_2            NOP
        MADDAy.w ACC, VF00, SelfDot_2           NOP
        MADDz.w SelfDot_2, VF00, SelfDot_2      NOP
    ; center PrevDot range at offset
    ADD.w PrevDot_1, PrevDot_1, Offset              NOP
    ADD.w PrevDot_2, PrevDot_2, Offset              NOP
    ADD.w PrevDot_3, PrevDot_3, Offset              NOP
    ADD.w PrevDot_4, PrevDot_4, Offset              NOP

    ; clamp to [0, 128]
    MAXx.w PrevDot_1, PrevDot_1, VF00x               NOP
    MAXx.w PrevDot_2, PrevDot_2, VF00x               NOP
    MAXx.w PrevDot_3, PrevDot_3, VF00x               NOP
    MAXx.w PrevDot_4, PrevDot_4, VF00x               WAITQ
        MULQ.w Dot_1, Dot_1, Q                  NOP

        ADDAx.w ACC, Zero, Dot_2                RSQRT Q, Scale.w, SelfDot_2.w
        MADDAy.w ACC, VF00, Dot_2               NOP
        MADDz.w Dot_2, VF00, Dot_2              NOP
        ADDAx.w ACC, Zero, SelfDot_3            NOP
        MADDAy.w ACC, VF00, SelfDot_3           NOP
        MADDz.w SelfDot_3, VF00, SelfDot_3      NOP
    MUL.w PrevDot_1, PrevDot_1, PrevSrcAlpha_1          NOP
    MUL.w PrevDot_2, PrevDot_2, PrevSrcAlpha_2          NOP
    MUL.w PrevDot_3, PrevDot_3, PrevSrcAlpha_3          NOP
    MUL.w PrevDot_4, PrevDot_4, PrevSrcAlpha_4          NOP

    MINI.w PrevDot_1, PrevDot_1, PrevSrcAlpha_1         NOP
    MINI.w PrevDot_2, PrevDot_2, PrevSrcAlpha_2         NOP
    MINI.w PrevDot_3, PrevDot_3, PrevSrcAlpha_3         NOP
    MINI.w PrevDot_4, PrevDot_4, PrevSrcAlpha_4         WAITQ
        MULQ.w Dot_2, Dot_2, Q                  NOP

        ADDAx.w ACC, Zero, Dot_3                RSQRT Q, Scale.w, SelfDot_3.w
        MADDAy.w ACC, VF00, Dot_3               NOP
        MADDz.w Dot_3, VF00, Dot_3              MOVE PrevSrcAlpha_1, SrcAlpha_1
        ADDAx.w ACC, Zero, SelfDot_4            MOVE PrevSrcAlpha_2, SrcAlpha_2
        MADDAy.w ACC, VF00, SelfDot_4           MOVE PrevSrcAlpha_3, SrcAlpha_3
        MADDz.w SelfDot_4, VF00, SelfDot_4      MOVE PrevSrcAlpha_4, SrcAlpha_4
    FTOI0.w PrevDot_1, PrevDot_1            LQ.w SrcAlpha_1, 1(DestPtr)
    FTOI0.w PrevDot_2, PrevDot_2            LQ.w SrcAlpha_2, 4(DestPtr)
    FTOI0.w PrevDot_3, PrevDot_3            LQ.w SrcAlpha_3, 7(DestPtr)
    FTOI0.w PrevDot_4, PrevDot_4            LQ.w SrcAlpha_4, 10(DestPtr)

    NOP                                     SQ.w PrevDot_1, -11(PrevDestPtr)
    NOP                                     SQ.w PrevDot_2, -8(PrevDestPtr)
    NOP                                     SQ.w PrevDot_3, -5(PrevDestPtr)
    NOP                                     SQ.w PrevDot_4, -2(PrevDestPtr)
        MULQ.w Dot_3, Dot_3, Q                  IADDIU PrevDestPtr, DestPtr, 0

        ADDAx.w ACC, Zero, Dot_4                RSQRT Q, Scale.w, SelfDot_4.w
        MADDAy.w ACC, VF00, Dot_4               NOP
        MADDz.w Dot_4, VF00, Dot_4              NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
    ; convert old alpha
    ITOF0.w SrcAlpha_1, SrcAlpha_1          LQ SrcXYZ_1, 0(SrcPtr)
    ITOF0.w SrcAlpha_2, SrcAlpha_2          LQ SrcXYZ_2, 2(SrcPtr)
    ITOF0.w SrcAlpha_3, SrcAlpha_3          LQ SrcXYZ_3, 4(SrcPtr)
    ITOF0.w SrcAlpha_4, SrcAlpha_4          LQ SrcXYZ_4, 6(SrcPtr)

    ; BEWARE:  CameraDir and SrcXYZ are the same register!
    SUB.xyz CameraDir_1, CameraPos, SrcXYZ_1   LQ SrcNorm_1, 1(SrcPtr)
    SUB.xyz CameraDir_2, CameraPos, SrcXYZ_2   LQ SrcNorm_2, 3(SrcPtr)
    SUB.xyz CameraDir_3, CameraPos, SrcXYZ_3   LQ SrcNorm_3, 5(SrcPtr)
    SUB.xyz CameraDir_4, CameraPos, SrcXYZ_4   LQ SrcNorm_4, 7(SrcPtr)
        MULQ.w Dot_4, Dot_4, Q                  NOP

        ; Move Dot to PrevDot
        NOP                                     MOVE PrevDot_1, Dot_1
        NOP                                     MOVE PrevDot_2, Dot_2
        NOP                                     MOVE PrevDot_3, Dot_3
        NOP                                     MOVE PrevDot_4, Dot_4

        NOP                                     IBGTZ VertCnt, WaveDarkVertLoop
        NOP                                     NOP

    ; center PrevDot range at offset
    ADD.w PrevDot_1, PrevDot_1, Offset              NOP
    ADD.w PrevDot_2, PrevDot_2, Offset              NOP
    ADD.w PrevDot_3, PrevDot_3, Offset              NOP
    ADD.w PrevDot_4, PrevDot_4, Offset              NOP

    ; clamp to [0, 128]
    MAXx.w PrevDot_1, PrevDot_1, VF00                NOP
    MAXx.w PrevDot_2, PrevDot_2, VF00                NOP
    MAXx.w PrevDot_3, PrevDot_3, VF00                NOP
    MAXx.w PrevDot_4, PrevDot_4, VF00                NOP

    MUL.w PrevDot_1, PrevDot_1, PrevSrcAlpha_1          NOP
    MUL.w PrevDot_2, PrevDot_2, PrevSrcAlpha_2          NOP
    MUL.w PrevDot_3, PrevDot_3, PrevSrcAlpha_3          NOP
    MUL.w PrevDot_4, PrevDot_4, PrevSrcAlpha_4          NOP

    MINI.w PrevDot_1, PrevDot_1, PrevSrcAlpha_1         NOP
    MINI.w PrevDot_2, PrevDot_2, PrevSrcAlpha_2         NOP
    MINI.w PrevDot_3, PrevDot_3, PrevSrcAlpha_3         NOP
    MINI.w PrevDot_4, PrevDot_4, PrevSrcAlpha_4         NOP

    FTOI0.w PrevDot_1, PrevDot_1            NOP
    FTOI0.w PrevDot_2, PrevDot_2            NOP
    FTOI0.w PrevDot_3, PrevDot_3            NOP
    FTOI0.w PrevDot_4, PrevDot_4            NOP

    NOP                                     SQ.w PrevDot_1, -11(PrevDestPtr)
    NOP                                     SQ.w PrevDot_2, -8(PrevDestPtr)
    NOP                                     SQ.w PrevDot_3, -5(PrevDestPtr)
    NOP                                     SQ.w PrevDot_4, -2(PrevDestPtr)

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#ifdef OLD_WAVEDARK
/*----------------------------------------------------------------------------------------------------------------------
    nglOldWaveDarkAddr

    Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr CameraPos, VF01               ; Camera position in local space.
.equr CameraDir, VF02               ; Vector from mesh vertex to camera position.
.equr InvLenCameraDir, VF02         ; Inverse length of CameraDir, for normalization (uses w of CameraDir!)
.equr Scale, VF03                   ; Scale of alpha falloff
.equr Offset, VF04                  ; Offset of alpha falloff

.equr SrcXYZ, VF10                 ; vertex xyz
.equr SrcNorm, VF12                ; vertex normal

.equr Zero, VF15                   ; (0, 0, 0, 0) constant.
.equr Dot, VF18                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr SrcAlpha, VF19               ; holds the old alpha value
.equr Its128, VF20               ; Its 128

.global nglOldWaveDarkAddr
nglOldWaveDarkAddr:
        ; Loop setup.
        NOP                                     LQ CameraPos, 0(gDataPtr)
    ; These can be constants when the values are decided
        NOP                                     LQ Scale, 1(gDataPtr)
        NOP                                     LQ Offset, 2(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 3

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADDIU SrcPtr, Temp, gSrcBufPtr









OldWaveDarkVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     NOP

        SUB.xyz CameraDir, CameraPos, SrcXYZ    IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     LQ.w SrcAlpha, -2(DestPtr)

        MUL.xyz Dot, CameraDir, SrcNorm         ERLENG P, CameraDir  ; not good for parallelization?
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDAx.w ACC, Zero, Dot                  NOP
        MADDAy.w ACC, VF00, Dot                 NOP
        MADDz.w Dot, VF00, Dot                  NOP

            ; convert old alpha
        ITOF0.w SrcAlpha, SrcAlpha              MFP.w InvLenCameraDir, P
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MUL.w Dot, Dot, InvLenCameraDir         NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ; scale Dot
        MUL.w Dot, Dot, Scale                   LQ.w OldAlpha, -2(DestPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

    ; center Dot range at offset
        ADD.w Dot, Dot, Offset                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

#if 1
    ; convert old alpha
        ITOF0.w OldAlpha, OldAlpha              NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif ; 1











            ; clamp to [0, 128]
        MAX.w Dot, Dot, Zero                    DIV Q, SrcAlpha.w, Its128.w
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MINIi.w Dot, Dot, I                     NOP

        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

#if 1
        MULQ.w Dot, Dot, Q                      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif

; To force the alpha values to a particular number
;NOP                                     LOI 128.0
;NOP                                     NOP
;NOP                                     NOP
;NOP                                     NOP
;MULi.w Dot, VF00, I                     NOP
;NOP                                     NOP
;NOP                                     NOP
;NOP                                     NOP

        FTOI0.w Dot, Dot                        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     SQ.w Dot, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, OldWaveDarkVertLoop
        NOP                                     NOP


        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif ; OLD_WAVEDARK

/*----------------------------------------------------------------------------------------------------------------------
    nglWaveHighlightAddr

  Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/

.equr Temp, VI01                   ; unused
.equr VertCnt, VI02                ; verts in strip counter
.equr SrcPtr, VI03                 ; source pointer for the xyz and normals
.equr DestPtr, VI04                ; source and dest pointer for color
.equr PrevDestPtr, VI05            ; source and dest pointer for color, previous loop iteration

; constant xyz parameters
.equr CameraPos, VF01              ; Camera position in world space.
.equr SunDir, VF02                ; Direction of sunlight

; constant w parameters
.equr Scale, VF01                 ; Scale of alpha falloff
.equr Offset, VF02                ; Offset of alpha falloff
.equr Zero, VF03                   ; 0 in w coord --- shared with CameraPos!.
.equr Neg2SunDirX, VF04           ; -2 * SunDir.x in w coord
.equr Neg2SunDirY, VF05           ; -2 * SunDir.y in w coord
.equr Neg2SunDirZ, VF06           ; -2 * SunDir.z in w coord

; per-vertex xyz parameters
.equr SrcXYZ_1, VF03               ; vertex xyz
.equr SrcXYZ_2, VF04               ; vertex xyz
.equr SrcXYZ_3, VF05               ; vertex xyz
.equr SrcXYZ_4, VF06               ; vertex xyz
.equr SrcNorm_1, VF07              ; vertex normal
.equr SrcNorm_2, VF08              ; vertex normal
.equr SrcNorm_3, VF09              ; vertex normal
.equr SrcNorm_4, VF10              ; vertex normal

; per-vertex w parameters
.equr OldAlpha_1, VF07             ; alpha from before nglWaveDarkAddr
.equr OldAlpha_2, VF08             ; alpha from before nglWaveDarkAddr
.equr OldAlpha_3, VF09             ; alpha from before nglWaveDarkAddr
.equr OldAlpha_4, VF10             ; alpha from before nglWaveDarkAddr

; calculated xyz values
.equr CameraDir_1, VF03            ; Vector from mesh vertex to camera position --- same reg as SrcXYZ!.
.equr CameraDir_2, VF04            ; Vector from mesh vertex to camera position --- same reg as SrcXYZ!.
.equr CameraDir_3, VF05            ; Vector from mesh vertex to camera position --- same reg as SrcXYZ!.
.equr CameraDir_4, VF06            ; Vector from mesh vertex to camera position --- same reg as SrcXYZ!.
.equr ReflDir_1, VF07             ; SunDir reflected in surface normal --- same reg as SrcNorm!
.equr ReflDir_2, VF08             ; SunDir reflected in surface normal --- same reg as SrcNorm!
.equr ReflDir_3, VF09             ; SunDir reflected in surface normal --- same reg as SrcNorm!
.equr ReflDir_4, VF10             ; SunDir reflected in surface normal --- same reg as SrcNorm!

; calculated xyzw values
.equr SunDot_1, VF11               ; Dot product of the camera vector and the vertex normal.
.equr SunDot_2, VF12               ; Dot product of the camera vector and the vertex normal.
.equr SunDot_3, VF13               ; Dot product of the camera vector and the vertex normal.
.equr SunDot_4, VF14               ; Dot product of the camera vector and the vertex normal.
.equr HighDot_1, VF15              ; Dot product of CameraDir and ReflDir.
.equr HighDot_2, VF16              ; Dot product of CameraDir and ReflDir.
.equr HighDot_3, VF17              ; Dot product of CameraDir and ReflDir.
.equr HighDot_4, VF18              ; Dot product of CameraDir and ReflDir.
.equr CamSelfDot_1, VF23           ; Dot product of the camera vector and itself.
.equr CamSelfDot_2, VF24           ; Dot product of the camera vector and itself.
.equr CamSelfDot_3, VF25           ; Dot product of the camera vector and itself.
.equr CamSelfDot_4, VF26           ; Dot product of the camera vector and itself.

; temp values
.equr WaveTemp, VF27               ; Only used in loading parameters (dc 06/04/02)

.global nglWaveHighlightAddr
nglWaveHighlightAddr:

    ; Loop setup.
    NOP                                                 LOI -3.0    ; get -2 in reg
    ADDi.w Neg2SunDirZ, VF00, I                         LQ CameraPos, NGLMEM_VIEW_TO_LOCAL+3(VI00)
;    ADDi.w Neg2SunDirZ, VF00, I                         LQ.xyz CameraPos, 0(gDataPtr)	; old way (dc 06/04/02)
    NOP                                                 LQ.xyz SunDir, 0(gDataPtr)
    ; These can be constants when the values are decided
    NOP                                                 LQ WaveTemp, 1(gDataPtr)
;    NOP                                                 LQ.w Scale, 1(gDataPtr)
;    NOP                                                LQ.w Offset, 2(gDataPtr)	; old way (dc 06/04/02)
    MULx.w Zero, VF00, VF00                             IADDIU gDataPtr, gDataPtr, 2
    NOP                                                 XITOP Temp                          ; get base ptr
    MULx.w Neg2SunDirX, Neg2SunDirZ, SunDir          IADDIU DestPtr, Temp, NGLMEM_VERT_START
    MULy.w Neg2SunDirY, Neg2SunDirZ, SunDir          ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
    MULz.w Neg2SunDirZ, Neg2SunDirZ, SunDir          IAND VertCnt, VertCnt, gGIFTagMask

	; Broadcast the inputs to w (dc 06/04/02)
    ADDy.w Offset, Zero, WaveTemp                       IADD SrcPtr, Temp, gSrcBufPtr
    ADDx.w Scale, Zero, WaveTemp                        LOI 128.0
    NOP                                                 LQ.xyz SrcXYZ_1, 0(SrcPtr)
    NOP                                                 LQ.xyz SrcXYZ_2, 2(SrcPtr)
    NOP                                                 LQ.xyz SrcXYZ_3, 4(SrcPtr)
    NOP                                                 LQ.xyz SrcXYZ_4, 6(SrcPtr)

    ; get surface => camera vector;
    SUB.xyz CameraDir_1, CameraPos, SrcXYZ_1            LQ.xyz SrcNorm_1, 1(SrcPtr)
    SUB.xyz CameraDir_2, CameraPos, SrcXYZ_2            LQ.xyz SrcNorm_2, 3(SrcPtr)
    SUB.xyz CameraDir_3, CameraPos, SrcXYZ_3            LQ.xyz SrcNorm_3, 5(SrcPtr)
    SUB.xyz CameraDir_4, CameraPos, SrcXYZ_4            LQ.xyz SrcNorm_4, 7(SrcPtr)

    ; get ReflDir = SunDir - 2 * < SunDir, SrcNorm > * SrcNorm
    MULAx.w ACC, Neg2SunDirX, SrcNorm_1                 IADDIU SrcPtr, SrcPtr, 8
    MADDAy.w ACC, Neg2SunDirY, SrcNorm_1                NOP
    MADDz.w SunDot_1, Neg2SunDirZ, SrcNorm_1            NOP
    MULAx.w ACC, Neg2SunDirX, SrcNorm_2                 NOP
    MADDAy.w ACC, Neg2SunDirY, SrcNorm_2                NOP
    MADDz.w SunDot_2, Neg2SunDirZ, SrcNorm_2            NOP
    MULAx.w ACC, Neg2SunDirX, SrcNorm_3                 NOP
    MADDAy.w ACC, Neg2SunDirY, SrcNorm_3                NOP
    MADDz.w SunDot_3, Neg2SunDirZ, SrcNorm_3            NOP
    MULAx.w ACC, Neg2SunDirX, SrcNorm_4                 NOP
    MADDAy.w ACC, Neg2SunDirY, SrcNorm_4                NOP
    MADDz.w SunDot_4, Neg2SunDirZ, SrcNorm_4            NOP

    ADDA.xyz ACC, VF00, SunDir                          NOP
    MADDw.xyz ReflDir_1, SrcNorm_1, SunDot_1            NOP
    MADDw.xyz ReflDir_2, SrcNorm_2, SunDot_2            NOP
    MADDw.xyz ReflDir_3, SrcNorm_3, SunDot_3            NOP
    MADDw.xyz ReflDir_4, SrcNorm_4, SunDot_4            NOP

    MUL.xyz CamSelfDot_1, CameraDir_1, CameraDir_1      NOP
    MUL.xyz CamSelfDot_2, CameraDir_2, CameraDir_2      NOP
    MUL.xyz CamSelfDot_3, CameraDir_3, CameraDir_3      NOP
    MUL.xyz CamSelfDot_4, CameraDir_4, CameraDir_4      NOP

    ADDAx.w ACC, Zero, CamSelfDot_1                     NOP
    MADDAy.w ACC, VF00, CamSelfDot_1                    NOP
    MADDz.w CamSelfDot_1, VF00, CamSelfDot_1            NOP
    ADDAx.w ACC, Zero, CamSelfDot_2                     NOP
    MADDAy.w ACC, VF00, CamSelfDot_2                    NOP
    MADDz.w CamSelfDot_2, VF00, CamSelfDot_2            NOP
    ADDAx.w ACC, Zero, CamSelfDot_3                     NOP
    MADDAy.w ACC, VF00, CamSelfDot_3                    NOP
    MADDz.w CamSelfDot_3, VF00, CamSelfDot_3            NOP
    ADDAx.w ACC, Zero, CamSelfDot_4                     NOP
    MADDAy.w ACC, VF00, CamSelfDot_4                    NOP
                                                            ; dont overwrite earlier memory
    MADDz.w CamSelfDot_4, VF00, CamSelfDot_4                IADDIU PrevDestPtr, DestPtr, 0

WaveHighlightVertLoop:
    ; get <SunDir, CameraDir>
    MUL.xyz HighDot_1, CameraDir_1, ReflDir_1               SQ.w HighDot_1, 1(PrevDestPtr)
    MUL.xyz HighDot_2, CameraDir_2, ReflDir_2               SQ.w HighDot_2, 4(PrevDestPtr)
    MUL.xyz HighDot_3, CameraDir_3, ReflDir_3               SQ.w HighDot_3, 7(PrevDestPtr)
    MUL.xyz HighDot_4, CameraDir_4, ReflDir_4               SQ.w HighDot_4, 10(PrevDestPtr)

    ; At this point, we need only CamSelfDot and HighDot to finish the loop
    ; We can reload the other registers

    ; scale Dot
    NOP                                                 RSQRT Q, Scale.w, CamSelfDot_1.w
    ADDAx.w ACC, Zero, HighDot_1                            IADDIU PrevDestPtr, DestPtr, 0
    MADDAy.w ACC, VF00, HighDot_1                       NOP
    MADDz.w HighDot_1, VF00, HighDot_1                  NOP
    ADDAx.w ACC, Zero, HighDot_2                        NOP
    MADDAy.w ACC, VF00, HighDot_2                       NOP
    MADDz.w HighDot_2, VF00, HighDot_2                  NOP
    ADDAx.w ACC, Zero, HighDot_3                        NOP
    MADDAy.w ACC, VF00, HighDot_3                       NOP
    MADDz.w HighDot_3, VF00, HighDot_3                      LQ.xyz SrcXYZ_1, 0(SrcPtr)
    ADDAx.w ACC, Zero, HighDot_4                            LQ.xyz SrcXYZ_2, 2(SrcPtr)
    MADDAy.w ACC, VF00, HighDot_4                           LQ.xyz SrcXYZ_3, 4(SrcPtr)
    MADDz.w HighDot_4, VF00, HighDot_4                      LQ.xyz SrcXYZ_4, 6(SrcPtr)
;    NOP                                                 WAITQ
    MULQ.w HighDot_1, HighDot_1, Q                      NOP
    NOP                                                 RSQRT Q, Scale.w, CamSelfDot_2.w
        ; get surface => camera vector;
        SUB.xyz CameraDir_1, CameraPos, SrcXYZ_1            LQ.xyz SrcNorm_1, 1(SrcPtr)
        SUB.xyz CameraDir_2, CameraPos, SrcXYZ_2            LQ.xyz SrcNorm_2, 3(SrcPtr)
        SUB.xyz CameraDir_3, CameraPos, SrcXYZ_3            LQ.xyz SrcNorm_3, 5(SrcPtr)
        SUB.xyz CameraDir_4, CameraPos, SrcXYZ_4            LQ.xyz SrcNorm_4, 7(SrcPtr)

        ; get ReflDir = SunDir - 2 * < SunDir, SrcNorm > * SrcNorm
        MULAx.w ACC, Neg2SunDirX, SrcNorm_1                 IADDIU SrcPtr, SrcPtr, 8
        MADDAy.w ACC, Neg2SunDirY, SrcNorm_1                IADDIU DestPtr, DestPtr, 12
        MADDz.w SunDot_1, Neg2SunDirZ, SrcNorm_1            IADDI VertCnt, VertCnt, -4
        MULAx.w ACC, Neg2SunDirX, SrcNorm_2                 NOP
        MADDAy.w ACC, Neg2SunDirY, SrcNorm_2                NOP
        MADDz.w SunDot_2, Neg2SunDirZ, SrcNorm_2            NOP
        MULAx.w ACC, Neg2SunDirX, SrcNorm_3                 NOP
        MADDAy.w ACC, Neg2SunDirY, SrcNorm_3                NOP
;    NOP                                                 WAITQ
    MULQ.w HighDot_2, HighDot_2, Q                      NOP
        MADDz.w SunDot_3, Neg2SunDirZ, SrcNorm_3        RSQRT Q, Scale.w, CamSelfDot_3.w
        MULAx.w ACC, Neg2SunDirX, SrcNorm_4                 NOP
        MADDAy.w ACC, Neg2SunDirY, SrcNorm_4                NOP
        MADDz.w SunDot_4, Neg2SunDirZ, SrcNorm_4            NOP

        ADDA.xyz ACC, VF00, SunDir                          NOP
        MADDw.xyz ReflDir_1, SrcNorm_1, SunDot_1            NOP
        MADDw.xyz ReflDir_2, SrcNorm_2, SunDot_2            NOP
        MADDw.xyz ReflDir_3, SrcNorm_3, SunDot_3            NOP
        MADDw.xyz ReflDir_4, SrcNorm_4, SunDot_4            NOP

        MUL.xyz CamSelfDot_1, CameraDir_1, CameraDir_1      NOP
        MUL.xyz CamSelfDot_2, CameraDir_2, CameraDir_2      NOP
        MUL.xyz CamSelfDot_3, CameraDir_3, CameraDir_3      NOP
        MUL.xyz CamSelfDot_4, CameraDir_4, CameraDir_4      NOP
;    NOP                                                 WAITQ
    MULQ.w HighDot_3, HighDot_3, Q                      NOP
    NOP                                                 RSQRT Q, Scale.w, CamSelfDot_4.w
        ADDAx.w ACC, Zero, CamSelfDot_1                     NOP
        MADDAy.w ACC, VF00, CamSelfDot_1                    NOP
        MADDz.w CamSelfDot_1, VF00, CamSelfDot_1            NOP
        ADDAx.w ACC, Zero, CamSelfDot_2                     NOP
        MADDAy.w ACC, VF00, CamSelfDot_2                    NOP
        MADDz.w CamSelfDot_2, VF00, CamSelfDot_2            NOP
        ADDAx.w ACC, Zero, CamSelfDot_3                     NOP
        MADDAy.w ACC, VF00, CamSelfDot_3                    NOP
        MADDz.w CamSelfDot_3, VF00, CamSelfDot_3            NOP
        ADDAx.w ACC, Zero, CamSelfDot_4                     NOP
        MADDAy.w ACC, VF00, CamSelfDot_4                    NOP
        MADDz.w CamSelfDot_4, VF00, CamSelfDot_4            NOP
;    NOP                                                 WAITQ
    MULQ.w HighDot_4, HighDot_4, Q                      NOP

    ; add Offset
    ADD.w HighDot_1, HighDot_1, Offset                  NOP
    ADD.w HighDot_2, HighDot_2, Offset                  NOP
    ADD.w HighDot_3, HighDot_3, Offset                  NOP
    ADD.w HighDot_4, HighDot_4, Offset                  NOP

    ; clamp to [0, 128]
    MAXx.w HighDot_1, HighDot_1, VF00x                  LQ.w OldAlpha_1, -16(SrcPtr)	; retrieve old alpha
    MAXx.w HighDot_2, HighDot_2, VF00x                  LQ.w OldAlpha_2, -14(SrcPtr)
    MAXx.w HighDot_3, HighDot_3, VF00x                  LQ.w OldAlpha_3, -12(SrcPtr)
    MAXx.w HighDot_4, HighDot_4, VF00x                  LQ.w OldAlpha_4, -10(SrcPtr)

    MINI.w HighDot_1, HighDot_1, OldAlpha_1             NOP
    MINI.w HighDot_2, HighDot_2, OldAlpha_2             NOP
    MINI.w HighDot_3, HighDot_3, OldAlpha_3             NOP
    MINI.w HighDot_4, HighDot_4, OldAlpha_4             NOP

    FTOI0.w HighDot_1, HighDot_1                        NOP
    FTOI0.w HighDot_2, HighDot_2                        NOP
    FTOI0.w HighDot_3, HighDot_3                        IBGTZ VertCnt, WaveHighlightVertLoop
    FTOI0.w HighDot_4, HighDot_4                        NOP

    NOP                                                 SQ.w HighDot_1, 1(PrevDestPtr)
    NOP                                                 SQ.w HighDot_2, 4(PrevDestPtr)
    NOP                                                 SQ.w HighDot_3, 7(PrevDestPtr)
    NOP                                                 SQ.w HighDot_4, 10(PrevDestPtr)

    NOP                                                 B CommandListReturnA
    NOP                                                 NOP

#ifdef OLD_WAVEHIGHLIGHT
/*----------------------------------------------------------------------------------------------------------------------
    nglOldWaveHighlightAddr

  Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; source pointer for the xyz and normals
.equr DestPtr, VI06                ; source and dest pointer for color

.equr CameraPos, VF01              ; Camera position in world space.
.equr CameraDir, VF02              ; Vector from mesh vertex to camera position.
.equr InvLenCameraDir, VF02        ; Inverse length of CameraDir, for normalization (uses w of CameraDir!)
.equr Scale, VF03                 ; Scale of alpha falloff
.equr Offset, VF04                ; Offset of alpha falloff
.equr SunDir, VF06                ; Vector from sun position to mesh vertex (normalized)
.equr ReflCameraDir, VF07         ; CameraDir reflected in horizontal plane

.equr SunAng, VF08                ; Angle from sun to surface normal
.equr InvLenSunAng, VF09        ; Inverse length of CameraDir, for normalization (uses w of CameraDir!)
.equr CamLen, VF09           ; Inverse length of CameraDir, for normalization (uses w of CameraDir!)

.equr SrcXYZ, VF10                 ; vertex xyz
.equr OldAlpha, VF11               ; holds the old alpha value
.equr SrcNorm, VF12                ; vertex normal
;.equr SubFactor, VF13                ; vertex normal
.equr SunLen, VF13              ; vertex normal

.equr One, VF14                    ; (0, 0, 0, 1) constant.
.equr Zero, VF15                   ; (0, 0, 0, 0) constant.
.equr NegOne, VF16                 ; (0, 0, 0, -1) constant.
.equr Dot, VF18                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr SunDot, VF19                    ; w field holds the dot product of the camera vector and the vertex normal.
.equr Its128, VF20               ; Its 128

.global nglOldWaveHighlightAddr
nglOldWaveHighlightAddr:

        ;MULAx.w ACC, SunAngX, SrcNorm                (ACC.w = SunAngX.w * SrcNorm.x)
        ;MADDAy.w ACC, SunAngY, SrcNorm             (ACC.w += SunAngX.w * SrcNorm.y)
        ;MADDz.w Result, SunAngZ, SrcNorm            (Result.w = ACC.w + SunAngX.w * SrcNorm.z)

        ; Loop setup.
        NOP                                     LQ CameraPos, 0(gDataPtr)
        NOP                                     LQ SunDir, 1(gDataPtr)
    ; These can be constants when the values are decided
        NOP                                     LQ Scale, 2(gDataPtr)
        NOP                                     LQ Offset, 3(gDataPtr)
;        NOP                                     LQ SubFactor, 4(gDataPtr)
        NOP                                     IADDIU gDataPtr, gDataPtr, 4

        SUB Zero, Zero, Zero                    XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADDIU SrcPtr, Temp, gSrcBufPtr

        NOP                                                     LOI 1.0
        MULi One, VF00, I                       NOP
        NOP                                                     LOI -1.0
        MULi NegOne, VF00, I                    NOP
        NOP                                     LOI 128.0
        MULi Its128, VF00, I                    NOP
        ;ADDI.w Its128, Zero, I                  NOP

OldWaveHighlightVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        ; Update loop variables
        NOP                                     IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     IADDI VertCnt, VertCnt, -1

                ;------------------------------------------------
                ; Sun Angle

        ; get sun => surface vector;           Update loop variables
        SUB.xyz SunAng, SunDir, SrcXYZ          NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        ; get < SunAng, SrcNorm >              Get old alpha
        MUL.xyz SunDot, SunAng, SrcNorm         NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
        ADDAx.w ACC, Zero, SunDot               NOP
        MADDAy.w ACC, VF00, SunDot              NOP
        MADDz.w SunDot, VF00, SunDot            NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

                ; double it
        ;MUL.w SunDot.w, SubFactor.w, SunDot.w   NOP
        ADD.w SunDot.w, SunDot.w, SunDot.w   NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

                ADDA.xyz ACC, SunAng, Zero              NOP

        ; compute projection of SunAng onto SrcNorm
        ;MULAw.xyz ACCxyz, SrcNorm(xyz), SunAng.w  NOP

        ; SunAng = SunAng reflected around SrcNorm
        MSUBw.xyz SunAng, SrcNorm, SunDot.w    LQ.w OldAlpha, -2(DestPtr)
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

#if 1
        ; get < SunAng, SunAng >
        MUL.xyz SunLen, SunAng, SunAng          LOI 1.0
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
        ADDAx.w ACC, Zero, SunLen               NOP
        MADDAy.w ACC, VF00, SunLen              NOP
        MADDz.w SunLen, VF00, SunLen            NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        SUB.xyz CameraDir, CameraPos, SrcXYZ    RSQRT q, One.w, SunLen.w
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
        MUL.xyz CamLen, CameraDir, CameraDir    NOP ;      LOI 1.0
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
        ADDAx.w ACC, Zero, CamLen               NOP
        MADDAy.w ACC, VF00, CamLen              NOP
        MADDz.w CamLen, VF00, CamLen            NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
        NOP                                     WAITQ

        MULQ.xyz SunAng(xyz), SunAng(xyz), Q    NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        NOP                                     RSQRT q, One.w, CamLen.w
                                                                                                ; BIG STALL 13
        NOP                                     WAITQ

        MULQ.xyz CameraDir(xyz), CameraDir(xyz), Q    NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        ; compute < CameraDir, SunAng >
        MUL.xyz Dot, CameraDir, SunAng          NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        ADDAx.w ACC, Zero, Dot                  NOP
        MADDAy.w ACC, VF00, Dot                 NOP
        MADDz.w Dot, VF00, Dot                  NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

#else
        NOP                                     ERLENG P, SunAng  ; not good for parallelization?
        NOP                                     NOP
        NOP                                     WAITP

        SUB.xyz CameraDir, CameraPos, SrcXYZ    MFP.w InvLenSunAng, P
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULw.xyz SunAng(xyz), SunAng(xyz), InvLenSunAng.w NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

                ;------------------------------------------------
                ; Camera Angle
#if 0
        ; Find relative camera pos
        SUB.xyz CameraDir, CameraPos, SrcXYZ    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif

        NOP                                     ERLENG P, CameraDir  ; not good for parallelization?
        NOP                                     NOP
        NOP                                     WAITP

        ITOF0.w OldAlpha.w, OldAlpha.w        MFP.w InvLenCameraDir, P
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        MULw.xyz CameraDir, CameraDir, InvLenCameraDir.w NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ; compute < CameraDir, SunAng >
        MUL.xyz Dot, CameraDir, SunAng          NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ADDAx.w ACC, Zero, Dot                  NOP
        MADDAy.w ACC, VF00, Dot                 NOP
        MADDz.w Dot, VF00, Dot                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif


                ;------------------------------------------------
                ; Old Alpha
#if 0
        NOP                                     LQ.w OldAlpha, -2(DestPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ITOF0.w OldAlpha.w, OldAlpha.w        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif
#if 0
        NOP                                     DIV Q, OldAlpha.w, Its128.w
                NOP                                     WAITQ
#endif

                ;------------------------------------------------
                ; Adjust Alpha

        ; scale Dot
        MUL.w Dot, Dot, Scale                   NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        ; center Dot range at offset
        ADD.w Dot, Dot, Offset                  NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

#if 0
        NOP                                     NOP

        MULQ.w Dot, Dot, Q                      NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
#endif

        ; clamp to [0, 128]
        MAX.w Dot, Dot, Zero                    LOI 128.0
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        MINIi.w Dot, Dot, I                     NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

; To force the alpha values to a particular number
;NOP                                     LOI 128.0
;NOP                                     NOP
;NOP                                     NOP
;NOP                                     NOP
;MULi.w Dot, VF00, I                     NOP
;NOP                                     NOP
;NOP                                     NOP
;NOP                                     NOP

        FTOI0.w Dot, Dot                        NOP
;        NOP                                     NOP
;        NOP                                     NOP
;        NOP                                     NOP

        NOP                                     SQ.w Dot, -2(DestPtr)

        NOP                                     IBGTZ VertCnt, OldWaveHighlightVertLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP
#endif ; OLD_WAVEHIGHLIGHT

/*----------------------------------------------------------------------------------------------------------------------
    nglWaveTransAddr

  Special wave texture mapping and effects
----------------------------------------------------------------------------------------------------------------------*/

    ; counters and indexes
.equr Temp, VI01                     ; unused
.equr VertCnt, VI04                  ; verts in strip counter
.equr SrcPtr, VI05                   ; source pointer for the xyz and normals
.equr DestPtr, VI06                  ; source and dest pointer for color
.equr PrevDestPtr, VI07              ; source and dest pointer for color, previous loop iteration
.equr PrevSrcPtr, VI08               ; source pointer for the xyz and normals

    ; Constants
.equr One, VF00                      ; (0, 0, 0, 1) constant.
.equr Zero, VF01                     ; (0, 0, 0, 0) constant.
.equr UpNorm, VF02                   ; (0, 1, 0, 0) up normal

    ; Per execution constants passed from outside
.equr CamPos, VF03                   ; Camera position. NOTE: Y is artificially set at -1 in CPP code
.equr Scale, VF04                   ; Scale of alpha falloff
.equr TMin, VF05                    ; Minimum transparency
.equr Fudge, VF06                    ; Adjustment to camera position (reduces translucency on wave roof)

    ; Per vertex data
.equr SrcXYZ_1, VF10                 ; vertex xyz
.equr CamDir_1, VF10                 ; Vector from mesh vertex to camera position.
.equr CamLen_1, VF10                 ; < CamDir, CamDir > and its length in w
.equr SrcNorm_1, VF11                ; vertex normal
.equr NormDot_1, VF22                ; < Norm, (0,1,0) > and its length in w
.equr SclXY_1, VF12                 ; Y adjusted Scale of alpha falloff
.equr NewAlpha_1, VF12               ; Result
.equr OldAlpha_1, VF27               ; Result

.equr SrcXYZ_2, VF13                 ; Vertex 2
.equr CamDir_2, VF13                 ;
.equr CamLen_2, VF13                 ;
.equr SrcNorm_2, VF14                ;
.equr NormDot_2, VF24                ;
.equr SclXY_2, VF15                 ;
.equr NewAlpha_2, VF15               ;
.equr OldAlpha_2, VF28               ; Result

.equr SrcXYZ_3, VF16                 ; Vertex 3
.equr CamDir_3, VF16                 ;
.equr CamLen_3, VF16                 ;
.equr SrcNorm_3, VF17                ;
.equr NormDot_3, VF25                ;
.equr SclXY_3, VF18                 ;
.equr NewAlpha_3, VF18               ;
.equr OldAlpha_3, VF29               ; Result

.equr SrcXYZ_4, VF19                 ; Vertex 4
.equr CamDir_4, VF19                 ;
.equr CamLen_4, VF19                 ;
.equr SrcNorm_4, VF20                ;
.equr NormDot_4, VF26                ;
.equr SclXY_4, VF21                 ;
.equr NewAlpha_4, VF21               ;
.equr OldAlpha_4, VF30               ; Result


.global nglWaveTransAddr
nglWaveTransAddr:
        ; Loop setup.
        SUB Zero, Zero, Zero                     LQ CamPos, NGLMEM_VIEW_TO_LOCAL+3(VI00)
;        NOP                                      LQ CamPos, 0(gDataPtr)	; old way (dc 06/04/01)
        NOP                                      LQ Scale, 0(gDataPtr)
;        NOP                                      LQ TMin, 1(gDataPtr)	; old way (dc 06/04/02)
        NOP                                      IADDIU gDataPtr, gDataPtr, 1
        SUB UpNorm,UpNorm,UpNorm                 LOI 1.0
        NOP                                      XITOP Temp                          ; get base ptr

		; Broadcast the inputs to xyzw (Scale must go last) (dc 06/04/02)
        ADDz Fudge, Zero, Scale                  IADDIU DestPtr, Temp, NGLMEM_VERT_START
        ADDy TMin, Zero, Scale                   ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        ADDx Scale, Zero, Scale                  IAND VertCnt, VertCnt, gGIFTagMask
        ADDw.y UpNorm, UpNorm, One.w            IADD SrcPtr, Temp, gSrcBufPtr ; IADDIU SrcPtr, Temp, gSrcBufPtr

        ADDw.y CamPos, Zero, Fudge               LQ SrcXYZ_1, 0(SrcPtr)
        NOP                                      LQ SrcXYZ_2, 2(SrcPtr)
        NOP                                      LQ SrcXYZ_3, 4(SrcPtr)
        NOP                                      LQ SrcXYZ_4, 6(SrcPtr)
#if 1
        SUB.xyz CamDir_1, SrcXYZ_1, CamPos       LQ SrcNorm_1, 1(SrcPtr)
        SUB.xyz CamDir_2, SrcXYZ_2, CamPos       LQ SrcNorm_2, 3(SrcPtr)
        SUB.xyz CamDir_3, SrcXYZ_3, CamPos       LQ SrcNorm_3, 5(SrcPtr)
        SUB.xyz CamDir_4, SrcXYZ_4, CamPos       LQ SrcNorm_4, 7(SrcPtr)
#else
        SUB.xyz CamDir_1, CamPos, SrcXYZ_1       LQ SrcNorm_1, 1(SrcPtr)
        SUB.xyz CamDir_2, CamPos, SrcXYZ_2       LQ SrcNorm_2, 3(SrcPtr)
        SUB.xyz CamDir_3, CamPos, SrcXYZ_3       LQ SrcNorm_3, 5(SrcPtr)
        SUB.xyz CamDir_4, CamPos, SrcXYZ_4       LQ SrcNorm_4, 7(SrcPtr)
#endif
        MUL.xyz NormDot_1, SrcNorm_1, UpNorm     NOP
                MUL.xyz NormDot_2, SrcNorm_2, UpNorm     NOP
                MUL.xyz NormDot_3, SrcNorm_3, UpNorm     NOP
                MUL.xyz NormDot_4, SrcNorm_4, UpNorm     NOP
WaveTransVertLoop:

        MAXI.y CamDir_1, CamDir_1, I             IADDIU PrevDestPtr, DestPtr, 0
        ADDAx.w ACC, Zero, NormDot_1             IADDIU PrevSrcPtr, SrcPtr, 0
        MADDAy.w ACC, VF00, NormDot_1            IADDIU SrcPtr, SrcPtr, 8
        MADDz.w NormDot_1, VF00, NormDot_1       IADDIU DestPtr, DestPtr, 12
        MUL.xyz CamLen_1, CamDir_1, CamDir_1     IADDI VertCnt, VertCnt, -4

                SUB.w NormDot_1.w,One.w,NormDot_1.w   LOI 4096.0
        ADDAx.w ACC, Zero, CamLen_1              NOP
        MADDAy.w ACC, VF00, CamLen_1             NOP
        MADDz.w CamLen_1, VF00, CamLen_1         NOP
                MULI.w NormDot_1.w, NormDot_1.w, I     LOI 1.0

        MAXI.y CamDir_2, CamDir_2, I             NOP
        ADDAx.w ACC, Zero, NormDot_2             NOP
        MULy.w SclXY_1.w, Scale.w, CamLen_1 SQRT Q, CamLen_1.w
        MADDAy.w ACC, VF00, NormDot_2            NOP
        MADDz.w NormDot_2, VF00, NormDot_2       NOP
        MUL.xyz CamLen_2, CamDir_2, CamDir_2     NOP

                SUB.w NormDot_2.w,One.w,NormDot_2.w   LOI 4096.0
        ADDAx.w ACC, Zero, CamLen_2              NOP
        MADDAy.w ACC, VF00, CamLen_2             NOP
        MADDz.w CamLen_2, VF00, CamLen_2         NOP
                MULI.w NormDot_2.w, NormDot_2.w, I     WAITQ
        MULQ.w NewAlpha_1.w, SclXY_1.w, Q      LOI 1.0

        MAXI.y CamDir_3, CamDir_3, I             NOP
        ADDAx.w ACC, Zero, NormDot_3             NOP
        MULy.w SclXY_2.w, Scale.w, CamLen_2 SQRT Q, CamLen_2.w
        MADDAy.w ACC, VF00, NormDot_3            NOP
        MADDz.w NormDot_3, VF00, NormDot_3       NOP
        MUL.xyz CamLen_3, CamDir_3, CamDir_3     NOP

                SUB.w NormDot_3.w,One.w,NormDot_3.w   LOI 4096.0
        ADDAx.w ACC, Zero, CamLen_3              NOP
        MADDAy.w ACC, VF00, CamLen_3             NOP
        MADDz.w CamLen_3, VF00, CamLen_3         NOP
                MULI.w NormDot_3.w, NormDot_3.w, I     WAITQ
        MULQ.w NewAlpha_2.w, SclXY_2.w, Q      LOI 1.0

        MAXI.y CamDir_4, CamDir_4, I             NOP
        ADDAx.w ACC, Zero, NormDot_4             NOP
        MULy.w SclXY_3.w, Scale.w, CamLen_3 SQRT Q, CamLen_3.w
        MADDAy.w ACC, VF00, NormDot_4            NOP
        MADDz.w NormDot_4, VF00, NormDot_4       NOP
        MUL.xyz CamLen_4, CamDir_4, CamDir_4     NOP

                SUB.w NormDot_4.w,One.w,NormDot_4.w   LOI 4096.0
        ADDAx.w ACC, Zero, CamLen_4              NOP
        MADDAy.w ACC, VF00, CamLen_4             NOP
        MADDz.w CamLen_4, VF00, CamLen_4         NOP
                MULI.w NormDot_4.w, NormDot_4.w, I     WAITQ
        MULQ.w NewAlpha_3.w, SclXY_3.w, Q      LOI 1.0

        MULy.w SclXY_4.w, Scale.w, CamLen_4 SQRT Q, CamLen_4.w
        NOP                                      LQ SrcXYZ_1, 0(SrcPtr)
        NOP                                      LQ SrcXYZ_2, 2(SrcPtr)
        NOP                                      LQ SrcXYZ_3, 4(SrcPtr)
        NOP                                      LQ SrcXYZ_4, 6(SrcPtr)
#if 1
        SUB.xyz CamDir_1, SrcXYZ_1, CamPos       LQ SrcNorm_1, 1(SrcPtr)
        SUB.xyz CamDir_2, SrcXYZ_2, CamPos       LQ SrcNorm_2, 3(SrcPtr)
        SUB.xyz CamDir_3, SrcXYZ_3, CamPos       LQ SrcNorm_3, 5(SrcPtr)
        SUB.xyz CamDir_4, SrcXYZ_4, CamPos       LQ SrcNorm_4, 7(SrcPtr)
#else
        SUB.xyz CamDir_1, CamPos, SrcXYZ_1       LQ SrcNorm_1, 1(SrcPtr)
        SUB.xyz CamDir_2, CamPos, SrcXYZ_2       LQ SrcNorm_2, 3(SrcPtr)
        SUB.xyz CamDir_3, CamPos, SrcXYZ_3       LQ SrcNorm_3, 5(SrcPtr)
        SUB.xyz CamDir_4, CamPos, SrcXYZ_4       LQ SrcNorm_4, 7(SrcPtr)
#endif
                ;NOP                                      WAITQ
        MULQ.w NewAlpha_4.w, SclXY_4.w, Q      NOP

        MAX.w NewAlpha_1, NewAlpha_1, NormDot_1  LQ.w OldAlpha_1, 1 (PrevDestPtr)
        MAX.w NewAlpha_2, NewAlpha_2, NormDot_2  LQ.w OldAlpha_2, 4 (PrevDestPtr)
        MAX.w NewAlpha_3, NewAlpha_3, NormDot_3  LQ.w OldAlpha_3, 7 (PrevDestPtr)
        MAX.w NewAlpha_4, NewAlpha_4, NormDot_4  LQ.w OldAlpha_4, 10(PrevDestPtr)
        MAX.w NewAlpha_1, NewAlpha_1, TMin       NOP
        MAX.w NewAlpha_2, NewAlpha_2, TMin       NOP
        MAX.w NewAlpha_3, NewAlpha_3, TMin       NOP
        MAX.w NewAlpha_4, NewAlpha_4, TMin       LOI 128.0
#if 1
        MINIi.w NewAlpha_1, NewAlpha_1, I        SQ.w OldAlpha_1, 0(PrevDestPtr)
        MINIi.w NewAlpha_2, NewAlpha_2, I        SQ.w OldAlpha_2, 3(PrevDestPtr)
        MINIi.w NewAlpha_3, NewAlpha_3, I        SQ.w OldAlpha_3, 6(PrevDestPtr)
        MINIi.w NewAlpha_4, NewAlpha_4, I        SQ.w OldAlpha_4, 9(PrevDestPtr)
#else
        MINIi.w NewAlpha_1, NewAlpha_1, I        NOP
        MINIi.w NewAlpha_2, NewAlpha_2, I        NOP
        MINIi.w NewAlpha_3, NewAlpha_3, I        NOP
        MINIi.w NewAlpha_4, NewAlpha_4, I        NOP
#endif
        FTOI0.w NewAlpha_1, NewAlpha_1           NOP
        FTOI0.w NewAlpha_2, NewAlpha_2           NOP
        FTOI0.w NewAlpha_3, NewAlpha_3           NOP
        FTOI0.w NewAlpha_4, NewAlpha_4           LOI 1.0 ; for next loop
        MUL.xyz NormDot_1, SrcNorm_1, UpNorm     SQ.w NewAlpha_1, 1 (PrevDestPtr)
        MUL.xyz NormDot_2, SrcNorm_2, UpNorm     SQ.w NewAlpha_2, 4 (PrevDestPtr)
        MUL.xyz NormDot_3, SrcNorm_3, UpNorm     SQ.w NewAlpha_3, 7 (PrevDestPtr)
        MUL.xyz NormDot_4, SrcNorm_4, UpNorm     SQ.w NewAlpha_4, 10(PrevDestPtr)

        NOP                                      IBGTZ VertCnt, WaveTransVertLoop
        NOP                                      NOP

        NOP                                      B CommandListReturnA
        NOP                                      NOP

#endif

/*----------------------------------------------------------------------------------------------------------------------
    nglEnvironmentMapSphereAddr

    Applies a spherical environment map to the vertices.

    NOTE: VCL Generated code, see ngl_spheremap.vcl for original code.
          NOPs have been removed from the prolog for space conservation.
----------------------------------------------------------------------------------------------------------------------*/
.global nglEnvironmentMapSphereAddr
nglEnvironmentMapSphereAddr:
; [0,7) size=7 nU=0 nL=7 ic=7 [lin=7 lp=0]
              nop                                                           xitop           VI03
              nop                                                           ilw.x           VI02,NGLMEM_GIFTAG+0(VI03)
              nop                                                           iaddiu          VI01,VI03,NGLMEM_VERT_START
              nop                                                           lq.xyz          VF01,0(gDataPtr)
              nop                                                           iaddi           gDataPtr,gDataPtr,1
#ifndef PROJECT_KELLYSLATER
              nop                                                           iand            VI02,VI02,gGIFTagMask
              nop                                                           iadd            VI03,VI03,gSrcBufPtr
; [0,96) size=96 nU=28 nL=25 ic=53 [lin=92 lp=0]
              nop                                                           lq.xyz          VF06,0(VI03)
              sub.xyz         VF02,VF06,VF01                                nop
              nop                                                           nop
              nop                                                           iaddiu          VI03,VI03,2
              nop                                                           nop
              nop                                                           erleng          P,VF02
              nop                                                           waitp
              nop                                                           lq.xyz          VF06,0(VI03)
              sub.xyz         VF02,VF06,VF01                                move.xyz        VF09,VF02
              nop                                                           lq.xyz          VF04,(1)-(1*(2))(VI03)
              nop                                                           iaddiu          VI03,VI03,2
              nop                                                           nop
              nop                                                           erleng          P,VF02
              nop                                                           mfp.w           VF01,P
              mulw.xyz        VF03,VF09,VF01w                               nop
              mul.xyz         VF07,VF03,VF04                                nop
              addz.x          VF08,VF07,VF07z                               nop
              nop                                                           lq.xyz          VF06,0(VI03)
              addy.x          VF10,VF08,VF07y                               loi             -2.0
              muli.xyz        VF11,VF04,I                                   nop
              nop                                                           nop
              sub.xyz         VF02,VF06,VF01                                move.xyz        VF09,VF02
              nop                                                           lq.xyz          VF04,(1)-(1*(2))(VI03)
              mulx.xyz        VF05,VF11,VF10x                               iaddiu          VI03,VI03,2
              nop                                                           waitp
              nop                                                           erleng          P,VF02
              nop                                                           mfp.w           VF01,P
              add.xyz         VF05,VF03,VF05                                nop
              nop                                                           nop
              nop                                                           nop
              mulw.xyz        VF03,VF09,VF01w                               nop
              addw.y          VF05,VF05,VF00w                               nop
              nop                                                           nop
              nop                                                           nop
              mul.xyz         VF07,VF03,VF04                                nop
              mul.xyz         VF09,VF05,VF05                                nop
              nop                                                           nop
              nop                                                           nop
              addz.x          VF08,VF07,VF07z                               nop
              addy.x          VF09,VF09,VF09y                               nop
              nop                                                           nop
              nop                                                           lq.xyz          VF06,0(VI03)
              addy.x          VF10,VF08,VF07y                               loi             -2.0
              muli.xyz        VF11,VF04,I                                   nop
              addz.x          VF08,VF09,VF09z                               loi             0.5
              sub.xyz         VF02,VF06,VF01                                move.xyz        VF09,VF02
              muli.xz         VF06,VF05,I                                   lq.xyz          VF04,(1)-(1*(2))(VI03)
              mulx.xyz        VF05,VF11,VF10x                               iaddiu          VI03,VI03,2
              nop                                                           waitp
              nop                                                           erleng          P,VF02
              nop                                                           mfp.w           VF01,P
              add.xyz         VF05,VF03,VF05                                rsqrt           Q,VF00w,VF08x
              addai.xz        ACC,VF00,I                                    nop
              nop                                                           nop
              mulw.xyz        VF03,VF09,VF01w                               nop
              addw.y          VF05,VF05,VF00w                               nop
              nop                                                           nop
              nop                                                           nop
              mul.xyz         VF07,VF03,VF04                                nop
              mul.xyz         VF09,VF05,VF05                                nop
              nop                                                           nop
              nop                                                           nop
; n>=0 .. t = 96 + 24*n cycles per iteration
EXPL_ngl_spheremap_vcl_EnvSphereVertLoop__MAIN_LOOP:
              addz.x          VF08,VF07,VF07z                               nop
              addy.x          VF09,VF09,VF09y                               nop
              maddq.xz        VF07,VF06,Q                                   nop
              nop                                                           lq.xyz          VF06,0(VI03)
              addy.x          VF10,VF08,VF07y                               loi             -2.0
              muli.xyz        VF11,VF04,I                                   lq.z            VF08,0(VI01)
              addz.x          VF08,VF09,VF09z                               loi             0.5
              sub.xyz         VF02,VF06,VF01                                move.xyz        VF09,VF02
              muli.xz         VF06,VF05,I                                   lq.xyz          VF04,(1)-(1*(2))(VI03)
              mulx.xyz        VF05,VF11,VF10x                               iaddiu          VI03,VI03,2
              addz.y          VF07,VF00,VF07z                               iaddiu          VI01,VI01,3
              nop                                                           erleng          P,VF02
              nop                                                           mfp.w           VF01,P
              add.xyz         VF05,VF03,VF05                                rsqrt           Q,VF00w,VF08x
              addai.xz        ACC,VF00,I                                    iaddi           VI02,VI02,-1
              mulz.xy         VF07,VF07,VF08z                               nop
              mulw.xyz        VF03,VF09,VF01w                               nop
              addw.y          VF05,VF05,VF00w                               nop
              nop                                                           nop
              nop                                                           sq.xy           VF07,-3(VI01)
              mul.xyz         VF07,VF03,VF04                                nop
              mul.xyz         VF09,VF05,VF05                                nop
              nop                                                           ibgtz           VI02,EXPL_ngl_spheremap_vcl_EnvSphereVertLoop__MAIN_LOOP
              nop                                                           nop
;   iCount=127
#endif

              nop                                                           B CommandListReturnA
              nop                                                           nop

#if 1

/*----------------------------------------------------------------------------------------------------------------------
    nglEnvironmentMapCylinderAddr

    Applies a cylindrical environment map to the vertices.  Uses Jason Bares code from SpiderMan, not sure about the
    correctness but it looked good on the PC version.
----------------------------------------------------------------------------------------------------------------------*/

#if 1

; VCL version
        .align 4
.global nglEnvironmentMapCylinderAddr
nglEnvironmentMapCylinderAddr:
; [5,69) size=35 nU=20 nL=30 ic=50 [lin=57 lp=0] cycles?=64
         mulx.xw       VF06,VF00,VF00x                              lq.xyz        VF01,NGLMEM_VIEW_TO_LOCAL+3(VI00)
         NOP                                                        xitop         VI03
         NOP                                                        ilw.x         VI02,NGLMEM_GIFTAG+0(VI03)
         NOP                                                        iaddiu        VI01,VI03,NGLMEM_VERT_START
         NOP                                                        iadd          VI03,VI03,VI13
         NOP                                                        lq.xyz        VF11,0(VI03)
         sub.xyz       VF11,VF01,VF11                               iaddiu        VI03,VI03,2                                ;  STALL_LATENCY ?3
#ifndef PROJECT_KELLYSLATER
         mul.xyz       VF08,VF11,VF11                               lq.xy         VF04,NGLMEM_LOCAL_TO_VIEW+2(VI00)          ;  STALL_LATENCY ?3
         addy.x        VF08,VF08,VF08y                              loi           2.000000000e+000                           ;  STALL_LATENCY ?3
         addz.x        VF08,VF08,VF08z                              NOP                                                      ;  STALL_LATENCY ?3
         NOP                                                        sqrt          Q,VF08x                                    ;  STALL_LATENCY ?3
         NOP                                                        lq.xyz        VF08,0(VI03)
         sub.xyz       VF08,VF01,VF08                               NOP                                                      ;  STALL_LATENCY ?3
         addq.x        VF07,VF06,Q                                  waitq                                                    ;  STALL_LATENCY ?1
         mul.xyz       VF10,VF08,VF08                               NOP                                                      ;  STALL_LATENCY ?1
         NOP                                                        div           Q,VF00w,VF07x                              ;  STALL_LATENCY ?1
         addy.x        VF10,VF10,VF10y                              NOP                                                      ;  STALL_LATENCY ?1
         NOP                                                        waitq                                                    ;  STALL_LATENCY ?4
         addz.x        VF10,VF10,VF10z                              iaddiu        VI03,VI03,2
         mulq.xyz      VF11,VF11,Q                                  lq.xyz        VF07,-3(VI03)
         mul.xyz       VF13,VF11,VF07                               sqrt          Q,VF10x                                    ;  STALL_LATENCY ?3
         NOP                                                        lq.xyz        VF10,0(VI03)
         addy.x        VF13,VF13,VF13y                              lq.xy         VF02,NGLMEM_LOCAL_TO_VIEW+0(VI00)          ;  STALL_LATENCY ?2
         sub.xyz       VF10,VF01,VF10                               lq.xy         VF03,NGLMEM_LOCAL_TO_VIEW+1(VI00)
         NOP                                                        waitq                                                    ;  STALL_LATENCY ?1
         addq.x        VF09,VF06,Q                                  lq.xy         VF05,NGLMEM_LOCAL_TO_VIEW+3(VI00)
         addz.x        VF14,VF13,VF13z                              iand          VI02,VI02,VI14
         mul.xyz       VF13,VF10,VF10                               iaddi         VI02,VI02,-1
         NOP                                                        iaddi         VI02,VI02,-1
         muli.xyz      VF09,VF07,I                                  div           Q,VF00w,VF09x
         NOP                                                        NOP
         addy.x        VF13,VF13,VF13y                              iaddi         VI02,VI02,-1
         NOP                                                        iaddiu        VI03,VI03,2
         mulx.xyz      VF14,VF09,VF14x                              iblez         VI02,EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EPI1
         NOP                                                        lq.xyz        VF07,-3(VI03)
; [0,22) size=19 nU=17 nL=11 ic=28 [lin=17 lp=0] cycles?=22
         addz.x        VF13,VF13,VF13z                              NOP
         mulq.xyz      VF09,VF08,Q                                  NOP
         sub.xyz       VF11,VF14,VF11                               sqrt          Q,VF13x                                    ;  STALL_LATENCY ?2
         mul.xyz       VF13,VF09,VF07                               move.xyz      VF08,VF10
         NOP                                                        lq.xyz        VF10,0(VI03)
         mulax.xy      ACC,VF02,VF11x                               NOP                                                      ;  STALL_LATENCY ?1
         addy.x        VF11,VF13,VF13y                              NOP
         sub.xyz       VF10,VF01,VF10                               NOP
         addq.x        VF14,VF06,Q                                  NOP
         madday.xy     ACC,VF03,VF11y                               NOP
         addz.x        VF11,VF11,VF13z                              NOP
         mul.xyz       VF13,VF10,VF10                               loi           2.000000000e+000
         muli.xyz      VF14,VF07,I                                  div           Q,VF00w,VF14x
         maddaz.xy     ACC,VF04,VF11z                               iaddi         VI02,VI02,-1
         maddw.xy      VF12,VF05,VF06w                              iaddiu        VI03,VI03,2
         addy.x        VF13,VF13,VF13y                              loi           5.000000000e-001
         mulx.xyz      VF14,VF14,VF11x                              move.xyz      VF11,VF09
         NOP                                                        iblez         VI02,EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EPI0
         muli.x        VF12,VF12,I                                  lq.xyz        VF07,-3(VI03)
EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__MAIN_LOOP:
; [0,22) size=22 nU=21 nL=16 ic=37 [lin=21 lp=21] cycles?=22
         addz.x        VF16,VF13,VF13z                              NOP
         mulq.xyz      VF09,VF08,Q                                  NOP
         sub.xyz       VF13,VF14,VF11                               NOP
         addi.x        VF11,VF12,I                                  loi           -5.000000000e-001
         muli.y        VF06,VF12,I                                  sqrt          Q,VF16x
         mul.xyz       VF12,VF09,VF07                               move.xyz      VF08,VF10
         mulax.xy      ACC,VF02,VF13x                               lq.xyz        VF10,0(VI03)
         madday.xy     ACC,VF03,VF13y                               lq.z          VF02,0(VI01)
         maddaz.xy     ACC,VF04,VF13z                               loi           5.000000000e-001
         addy.x        VF13,VF12,VF12y                              iaddiu        VI03,VI03,2
         sub.xyz       VF10,VF01,VF10                               iaddiu        VI01,VI01,3
         addq.x        VF12,VF06,Q                                  NOP
         addi.y        VF11,VF06,I                                  iaddi         VI02,VI02,-1
         addz.x        VF14,VF13,VF12z                              loi           2.000000000e+000
         mul.xyz       VF13,VF10,VF10                               NOP
         muli.xyz      VF16,VF07,I                                  div           Q,VF00w,VF12x
         maddw.xy      VF12,VF05,VF06w                              lq.xyz        VF07,-3(VI03)
         mulz.xy       VF15,VF11,VF02z                              loi           5.000000000e-001
         addy.x        VF13,VF13,VF13y                              NOP
         mulx.xyz      VF14,VF16,VF14x                              move.xyz      VF11,VF09
         muli.x        VF12,VF12,I                                  ibgtz         VI02,EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__MAIN_LOOP
         NOP                                                        sq.xy         VF15,-3(VI01)
EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EPI0:
; [0,71) size=53 nU=48 nL=30 ic=78 [lin=66 lp=0] cycles?=71
         addz.x        VF01,VF13,VF13z                              NOP
         mulq.xyz      VF08,VF08,Q                                  NOP
         sub.xyz       VF14,VF14,VF11                               NOP
         addi.x        VF12,VF12,I                                  loi           -5.000000000e-001
         muli.y        VF06,VF12,I                                  sqrt          Q,VF01x
         mul.xyz       VF11,VF08,VF07                               NOP
         mulax.xy      ACC,VF02,VF14x                               loi           5.000000000e-001
         addi.y        VF12,VF06,I                                  NOP                                                      ;  STALL_LATENCY ?1
         addy.x        VF14,VF11,VF11y                              loi           2.000000000e+000
         muli.xyz      VF01,VF07,I                                  loi           5.000000000e-001
         addq.x        VF06,VF06,Q                                  NOP
         madday.xy     ACC,VF03,VF14y                               lq.z          VF05,0(VI01)
         addz.x        VF14,VF14,VF11z                              iaddiu        VI01,VI01,3
         maddaz.xy     ACC,VF04,VF14z                               NOP
         maddw.xy      VF11,VF05,VF06w                              div           Q,VF00w,VF06x
         mulz.xy       VF07,VF12,VF05z                              lq.z          VF05,0(VI01)
         mulx.xyz      VF14,VF01,VF14x                              move.xyz      VF12,VF08
         muli.x        VF08,VF11,I                                  NOP                                                      ;  STALL_LATENCY ?1
         sub.xyz       VF12,VF14,VF12                               lq.xyz        VF06,-1(VI03)                              ;  STALL_LATENCY ?1
         mulq.xyz      VF07,VF10,Q                                  sq.xy         VF07,-3(VI01)
         addi.x        VF10,VF08,I                                  loi           -5.000000000e-001
         muli.y        VF10,VF11,I                                  NOP
         mulax.xy      ACC,VF02,VF12x                               NOP
         mul.xyz       VF08,VF07,VF06                               NOP
         madday.xy     ACC,VF03,VF12y                               NOP
         maddaz.xy     ACC,VF04,VF12z                               loi           5.000000000e-001
         addi.y        VF10,VF10,I                                  NOP
         addy.x        VF08,VF08,VF08y                              loi           2.000000000e+000
         muli.xyz      VF14,VF06,I                                  loi           5.000000000e-001
         maddw.xy      VF06,VF05,VF06w                              NOP
         mulz.xy       VF12,VF10,VF05z                              NOP
         addz.x        VF08,VF08,VF08z                              NOP
         muli.x        VF06,VF06,I                                  NOP                                                      ;  STALL_LATENCY ?1
         mulx.xyz      VF10,VF14,VF08x                              NOP                                                      ;  STALL_LATENCY ?1
         addi.x        VF06,VF06,I                                  loi           -5.000000000e-001                          ;  STALL_LATENCY ?1
         muli.y        VF06,VF06,I                                  loi           5.000000000e-001
         sub.xyz       VF07,VF10,VF07                               NOP
         addi.y        VF06,VF06,I                                  NOP                                                      ;  STALL_LATENCY ?2
         mulax.xy      ACC,VF02,VF07x                               NOP
         madday.xy     ACC,VF03,VF07y                               iaddiu        VI03,VI01,3
         maddaz.xy     ACC,VF04,VF07z                               lq.z          VF06,0(VI03)
         maddw.xy      VF05,VF05,VF06w                              NOP
         mulz.xy       VF07,VF06,VF06z                              loi           5.000000000e-001                           ;  STALL_LATENCY ?2
         muli.x        VF06,VF05,I                                  NOP
         addi.x        VF06,VF06,I                                  loi           -5.000000000e-001                          ;  STALL_LATENCY ?3
         muli.y        VF06,VF05,I                                  sq.xy         VF12,-3(VI03)
         NOP                                                        iaddiu        VI03,VI03,3
         NOP                                                        lq.z          VF06,0(VI03)
         NOP                                                        loi           5.000000000e-001
         addi.y        VF06,VF06,I                                  sq.xy         VF07,-3(VI03)
         mulz.xy       VF06,VF06,VF06z                              iaddiu        VI03,VI03,3                                ;  STALL_LATENCY ?3
         NOP                                                        b             EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EXIT_POINT
         NOP                                                        sq.xy         VF06,-3(VI03)                              ;  STALL_LATENCY ?2
EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EPI1:
; [0,71) size=48 nU=44 nL=25 ic=69 [lin=66 lp=0] cycles?=71
         addz.x        VF01,VF13,VF13z                              lq.z          VF05,0(VI01)
         mulq.xyz      VF08,VF08,Q                                  NOP
         sub.xyz       VF14,VF14,VF11                               sqrt          Q,VF01x                                    ;  STALL_LATENCY ?2
         mul.xyz       VF11,VF08,VF07                               NOP
         mulax.xy      ACC,VF02,VF14x                               NOP                                                      ;  STALL_LATENCY ?2
         addy.x        VF14,VF11,VF11y                              loi           2.000000000e+000
         muli.xyz      VF07,VF07,I                                  loi           5.000000000e-001
         addq.x        VF06,VF06,Q                                  NOP
         madday.xy     ACC,VF03,VF14y                               NOP
         addz.x        VF14,VF14,VF11z                              NOP
         maddaz.xy     ACC,VF04,VF14z                               NOP
         maddw.xy      VF11,VF05,VF06w                              div           Q,VF00w,VF06x
         mulx.xyz      VF01,VF07,VF14x                              move.xyz      VF14,VF08                                  ;  STALL_LATENCY ?1
         muli.x        VF08,VF11,I                                  NOP                                                      ;  STALL_LATENCY ?1
         sub.xyz       VF14,VF01,VF14                               waitq                                                    ;  STALL_LATENCY ?2
         mulq.xyz      VF07,VF10,Q                                  lq.xyz        VF06,-1(VI03)
         addi.x        VF10,VF08,I                                  loi           -5.000000000e-001
         muli.y        VF10,VF11,I                                  NOP
         mulax.xy      ACC,VF02,VF14x                               NOP
         mul.xyz       VF08,VF07,VF06                               NOP
         madday.xy     ACC,VF03,VF14y                               NOP
         maddaz.xy     ACC,VF04,VF14z                               loi           5.000000000e-001
         addi.y        VF10,VF10,I                                  NOP
         addy.x        VF08,VF08,VF08y                              loi           2.000000000e+000
         muli.xyz      VF11,VF06,I                                  loi           5.000000000e-001
         maddw.xy      VF06,VF05,VF06w                              NOP
         mulz.xy       VF14,VF10,VF05z                              NOP
         addz.x        VF08,VF08,VF08z                              NOP
         muli.x        VF06,VF06,I                                  NOP                                                      ;  STALL_LATENCY ?1
         mulx.xyz      VF10,VF11,VF08x                              NOP                                                      ;  STALL_LATENCY ?1
         addi.x        VF06,VF06,I                                  loi           -5.000000000e-001                          ;  STALL_LATENCY ?1
         muli.y        VF06,VF06,I                                  loi           5.000000000e-001
         sub.xyz       VF07,VF10,VF07                               NOP
         addi.y        VF06,VF06,I                                  NOP                                                      ;  STALL_LATENCY ?2
         mulax.xy      ACC,VF02,VF07x                               NOP
         madday.xy     ACC,VF03,VF07y                               iaddiu        VI01,VI01,3
         maddaz.xy     ACC,VF04,VF07z                               lq.z          VF06,0(VI01)
         maddw.xy      VF05,VF05,VF06w                              NOP
         mulz.xy       VF07,VF06,VF06z                              loi           5.000000000e-001                           ;  STALL_LATENCY ?2
         muli.x        VF06,VF05,I                                  NOP
         addi.x        VF06,VF06,I                                  loi           -5.000000000e-001                          ;  STALL_LATENCY ?3
         muli.y        VF06,VF05,I                                  sq.xy         VF14,-3(VI01)
         NOP                                                        iaddiu        VI01,VI01,3
         NOP                                                        lq.z          VF06,0(VI01)
         NOP                                                        loi           5.000000000e-001
         addi.y        VF06,VF06,I                                  sq.xy         VF07,-3(VI01)
         mulz.xy       VF06,VF06,VF06z                              iaddiu        VI01,VI01,3                                ;  STALL_LATENCY ?3
         NOP                                                        sq.xy         VF06,-3(VI01)                              ;  STALL_LATENCY ?3
EXPL_ngl_spideymap_vcl_EnvCylinderVertLoop__EXIT_POINT:
; [0,2) size=2 nU=0 nL=0 ic=0 [lin=0 lp=0] cycles?=2

#endif	; #ifndef PROJECT_KELLYSLATER
        NOP                                     B CommandListReturnA
        NOP                                     NOP
#else

.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; src pointer - source xyz and normal
.equr DestPtr, VI06                ; dest pointer - st, color and final xyz

.equr Zero, VF01                   ; (0,0,0,0) constant.
.equr SrcXYZ, VF02                 ;
.equr SrcST, VF03                  ;
.equr SrcColor, VF04               ;
.equr SrcNorm, VF05                ;

.equr LToV1, VF06                  ; Local to View matrix.
.equr LToV2, VF07                  ;
.equr LToV3, VF08                  ;
.equr LToV4, VF09                  ;

.equr LToV1, VF14                  ; Local to View matrix.
.equr LToV2, VF15                  ;
.equr LToV3, VF16                  ;
.equr LToV4, VF17                  ;

.equr CamPos, VF19                 ;
.equr CamNorm, VF20                ;
.equr Norm, VF21                   ;
.equr Pos, VF22                    ;
.equr InvLength, VF23              ;
.equr Dot, VF24                    ;
.equr Result, VF25                 ;
.equr Refl, VF26                   ;

.global nglEnvironmentMapCylinderAddr
nglEnvironmentMapCylinderAddr:
#ifndef PROJECT_KELLYSLATER

;  vector3d cam_pos = app::inst()->get_game()->get_current_view_camera()->get_abs_position();
;  matrix4x4 world_to_screen = geometry_manager::inst()->xforms[ geometry_manager::XFORM_WORLD_TO_VIEW ];

        NOP                                     LQ CamPos, NGLMEM_VIEW_TO_LOCAL+3(VI00)
        NOP                                     LQ LToV1, NGLMEM_LOCAL_TO_VIEW+0(VI00)
        NOP                                     LQ LToV2, NGLMEM_LOCAL_TO_VIEW+1(VI00)
        NOP                                     LQ LToV3, NGLMEM_LOCAL_TO_VIEW+2(VI00)
        NOP                                     LQ LToV4, NGLMEM_LOCAL_TO_VIEW+3(VI00)

;  matrix4x4 local_to_world = geometry_manager::inst()->xforms[ geometry_manager::XFORM_LOCAL_TO_WORLD ];

        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

EnvCylinderVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     LQ SrcST, 0(DestPtr)
        NOP                                     LQ SrcColor, 1(DestPtr)

        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3

;    vector3d norm = normalv->get_normal();
;    SO3_XFORM( norm, local_to_world, result_norm );

;    XFORM_VERT((*destv), local_to_world, result_pos);

;    vector3d v2cam_norm = cam_pos - result_pos;

        SUB.xyzw CamNorm, CamPos, SrcXYZ        NOP

;    v2cam_norm.normalize();

        MUL.xyz InvLength, CamNorm, CamNorm     NOP
        ADDy.x InvLength, InvLength, InvLength  NOP
        ADDz.x InvLength, InvLength, InvLength  NOP

        NOP                                     SQRT Q, InvLength.x
        NOP                                     WAITQ

        ADDq.x InvLength, Zero, Q               NOP

        NOP                                     DIV Q, VF00w, InvLength.x
        NOP                                     WAITQ

        MULq.xyz CamNorm, CamNorm, Q            NOP

;    rational_t dot_prod = dot(v2cam_norm, result_norm);
        MUL.xyz Dot, CamNorm, SrcNorm           NOP
        ADDy.x Dot, Dot, Dot                 NOP
        ADDz.x Dot, Dot, Dot                 NOP

;                                                             WTB - isnt this 1 always?
;    vector3d reflection = (result_norm * (2.0f * (dot_prod / result_norm.length2()))) - v2cam_norm;

        NOP                                     LOI 2.0
        MULi.xyz Refl, SrcNorm, I               NOP
        MULx.xyz Refl, Refl, Dot             NOP
        SUB.xyz Refl, Refl, CamNorm             NOP

;    vector3d result;
;    SO3_XFORM( reflection, world_to_screen, result);

        MULAx ACC, LToV1, Refl               NOP
        MADDAy ACC, LToV2, Refl              NOP
        MADDAz ACC, LToV3, Refl              NOP
        MADDw Result, LToV4, Zero.w            NOP

;    destv->tc[0].x = (result.x * 0.5f) + 0.5f;  ; from the DirectX SDK
;    destv->tc[0].y = -(result.y * 0.5f) + 0.5f;

        NOP                                     LOI 0.5
        MULi.x SrcST, Result, I                 NOP
        ADDi.x SrcST, SrcST, I                  NOP

        NOP                                     LOI -0.5
        MULi.y SrcST, Result, I                 LOI 0.5
        ADDi.y SrcST, SrcST, I                  NOP

        MULz.xy SrcST, SrcST, SrcST             NOP

;    if(dot_prod < 0.0f)
;      dot_prod = 0.0f;

;    destv->diffuse.c.a = (unsigned char)((mat->get_environment_blend() * 255.0f /* * dot_prod */));

        NOP                                     IBGTZ VertCnt, EnvCylinderVertLoop
        NOP                                     SQ.xy SrcST, -3(DestPtr)

#endif

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#endif ; vcl version

#else

/*----------------------------------------------------------------------------------------------------------------------
    nglEnvironmentMapCylinderAddr

    Applies a cylindrical environment map to the vertices.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter
.equr SrcPtr, VI05                 ; src pointer - source xyz and normal
.equr DestPtr, VI06                ; dest pointer - st, color and final xyz
.equr XSignFlag, VI07              ; mask for x sign FMAC flag (calculated)
.equr ZSignFlag, VI08              ; mask for z sign FMAC flag (calculated)
.equr Branch, VI09                 ; result for branching (calculated)
.equr Reflect, VI10                ; need to reflect from 0-45 degree range into 45-90 range (calculated)

.equr Zero, VF01                   ; (0,0,0,0) constant.
.equr SrcXYZ, VF02                 ;
.equr SrcST, VF03                  ;
.equr SrcColor, VF04               ;
.equr SrcNorm, VF05                ;
.equr CamPos, VF06                 ; local space camera position
.equr CamNorm, VF07                ; local space camera normal (calculated)
.equr InvLength, VF08              ; for normalizing normals (calculated)
.equr Dot, VF09                    ; dot product of normals (calculated)
.equr Refl, VF10                   ; reflection vector (calculated)
.equr ST, VF11                     ; ST (calculated)
.equr ATan, VF12                   ; arctangent stuff (calculated)
.equr CylParms, VF13               ; x is (-1 / cylinder height), y is cylinder radius
.equr PI_OVER_2, VF14              ; x is 1/2 pi (calculated)
.equr PI, VF15                     ; x is pi (calculated)
.equr _3PI_OVER_2, VF16            ; x is 3/2 pi (calculated)
.equr _2PI, VF17                   ; x is 2 pi (calculated)
.equr Compare, VF18                ; compare register (calculated)

.global nglEnvironmentMapCylinderAddr
nglEnvironmentMapCylinderAddr:
        NOP                                     LQ CamPos, 0(gDataPtr)
        NOP                                     LQ.xy CylParms, 1(gDataPtr)
        NOP                                     IADDI gDataPtr, gDataPtr, 2

#ifndef PROJECT_KELLYSLATER
        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

        ; set up sign flag registers
        NOP                                     IADDIU XSignFlag, VI00, 0x0080
        NOP                                     IADDIU ZSignFlag, VI00, 0x0020

        ; set up our PI constants
        NOP                                     LOI 1.5707963267948966192313216916398
        ADDi.x PI_OVER_2, VF00, I               LOI 3.1415926535897932384626433832795
        ADDi.x PI, VF00, I                      LOI 4.7123889803846898576939650749193
        ADDi.x _3PI_OVER_2, VF00, I             LOI 6.283185307179586476925286766559
        ADDi.x _2PI, VF00, I                    NOP

EnvCylinderVertLoop:
        NOP                                     LQ SrcXYZ, 0(SrcPtr)
        NOP                                     LQ SrcNorm, 1(SrcPtr)
        NOP                                     LQ SrcColor, 1(DestPtr)
        NOP                                     LQ SrcST, 0(DestPtr)

        ; compute the vector from vertex to camera
        SUB.xyzw CamNorm, CamPos, SrcXYZ        IADDI VertCnt, VertCnt, -1
        NOP                                     IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3
        NOP                                     NOP

        ; normalize the vector from vertex to camera.
        NOP                                     ERLENG P, CamNorm
        NOP                                     WAITP
        NOP                                     MFP.w InvLength, P
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULw.xyz CamNorm, CamNorm, InvLength.w NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ; dot the vertex normal with the normalized vector to the camera
        MUL.xyz Dot, CamNorm, SrcNorm           NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ADDz.x Dot, Dot, Dot                 NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ADDy.x Dot, Dot, Dot                 LOI 2.0

        ; compute the reflection vector
        MULi.xyz Refl, SrcNorm, I               NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULx.xyz Refl, Refl, Dot             NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        SUB.xyz Refl, Refl, CamNorm             NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

/*
        ; use this to turn off the reflection mapping to see how normals map into the map
        ADD.xyz Refl, VF00, SrcNorm             NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
*/

        ; begin ST calculations
        ADD.xyz ST, VF00, Refl                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        ABS.xz ST, ST                           NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        SUBz.x Compare, ST, ST                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     FMAND Reflect, XSignFlag
        NOP                                     IBEQ VI00, Reflect, SwitchDone
        NOP                                     NOP

        ; switch x and z
        MULx.w ST, VF00, ST                  NOP
        ADDz.x ST, VF00, ST                  NOP
        ADDw.z ST, VF00, ST.w                  NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

SwitchDone:

        ; TODO: replace EATANxz with a less accurate approximation (say four terms instead of 8)
        ; and done in the upper execution unit

        ; now start the atan and square root
        NOP                                     EATANxz P, ST
        MUL.xz ST, ST, ST                       NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        ADDz.x ST, ST, ST                    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MUL.y ST, ST, CylParms                  RSQRT Q, VF00w, ST.x
        NOP                                     WAITQ
        MULq.y ST, ST, Q                        NOP
        NOP                                     WAITP
        NOP                                     MFP.x ST.x, P

        ; figure out the octant from the original reflection vector and adjust the angle appropriately
        ADD.xyz Refl, VF00, Refl                NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP

        NOP                                     FMAND Branch, ZSignFlag
        NOP                                     IBNE VI00, Branch, Quadrant3or4
        NOP                                     NOP
        NOP                                     FMAND Branch, XSignFlag
        NOP                                     IBNE VI00, Branch, Quadrant2
        NOP                                     NOP

; Quadrant 1/Octant 1
        NOP                                     IBEQ VI00, Reflect, AngleDone
        NOP                                     NOP

; Octant 2
        SUB.x ST, PI_OVER_2, ST                 B AngleDone
        NOP                                     NOP

Quadrant2:
        NOP                                     IBEQ VI00, Reflect, Octant4
        NOP                                     NOP

; Octant 3
        ADD.x ST, PI_OVER_2, ST                 B AngleDone
        NOP                                     NOP

Octant4:
        SUB.x ST, PI, ST                        B AngleDone
        NOP                                     NOP

Quadrant3or4:
        NOP                                     FMAND Branch, XSignFlag
        NOP                                     IBEQ VI00, Branch, Quadrant4
        NOP                                     NOP

; Quadrant 3
        NOP                                     IBNE VI00, Reflect, Octant6
        NOP                                     NOP

; Octant 5
        ADD.x ST, PI, ST                        B AngleDone
        NOP                                     NOP

Octant6:
        SUB.x ST, _3PI_OVER_2, ST               B AngleDone
        NOP                                     NOP

Quadrant4:
        NOP                                     IBEQ VI00, Reflect, Octant8
        NOP                                     NOP

; Octant 7
        ADD.x ST, _3PI_OVER_2, ST               B AngleDone
        NOP                                     NOP

Octant8:
        SUB.x ST, _2PI, ST                      NOP
        NOP                                     NOP

AngleDone:

        NOP                                     NOP
        NOP                                     LOI 0.15915494309189533576888376337251
        MULi.x ST, ST, I                        NOP
        MULx.y ST, ST, CylParms              NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     LOI 0.5
        ADDi.y ST, ST, I                        NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULz.xy ST, ST, SrcST                   NOP
        NOP                                     NOP
        NOP                                     SQ SrcColor, -2(DestPtr)
        NOP                                     IBGTZ VertCnt, EnvCylinderVertLoop
        NOP                                     SQ.xy ST, -3(DestPtr)

#endif

        NOP                                     B CommandListReturnA
        NOP                                     NOP

#endif

/*----------------------------------------------------------------------------------------------------------------------
    nglMatColorAddr

    Sets all vertices to a particular material color.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr DestPtr, VI06                ; dest pointer - st, color and final xyz

.equr Color, VF01                  ; Color to store.

.global nglMatColorAddr
nglMatColorAddr:
        NOP                                     LQ Color, 0(gDataPtr)
        NOP                                     IADDI gDataPtr, gDataPtr, 1

        NOP                                     XITOP Temp                          ; get base ptr
        NOP                                     IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask

        NOP                                     IADDI VertCnt, VertCnt, -4

MatColorVertLoop:
        NOP                                     SQ Color, 1(DestPtr)
        NOP                                     SQ Color, 4(DestPtr)
        NOP                                     SQ Color, 7(DestPtr)
        NOP                                     SQ Color, 10(DestPtr)
        NOP                                     IADDI DestPtr, DestPtr, 12
        NOP                                     IBGTZ VertCnt, MatColorVertLoop
        NOP                                     IADDI VertCnt, VertCnt, -4

        NOP                                     B CommandListReturnA
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglFrustumClipAddr

    Transforms and clips a model with guard band frustum clipping.
----------------------------------------------------------------------------------------------------------------------*/

;   NOTE: It is necessary that the StackPtr be VI02 for PopStackIFRegs to work correctly.
;   NOTE: VI01 is not being pushed and popped but is used as a Temp value.
.equr Temp, VI01                   ; base or offset address (temporary)
.equr StackPtr, VI02               ; stack pointer
.equr ReturnPtr, VI03              ; link register
.equr Clip1, VI04                  ; clip checking reg 1
.equr SrcPtr, VI05                 ; src pointer - source xyz and normal
.equr DestPtr, VI06                ; dest pointer - st, color and final xyz
.equr Temp2, VI07               ; store pointer for RGBAQ (and others I assume)
.equr VertCnt, VI10                ; counter for vertices
.equr SoftClipFlag, VI11                ; Mask & Branch frag
.equr HardClipFlag, VI12              ;

; NOTE: Several definitions from nglFrustumClipAddr carry over to SCISSOR function.
.equr TriFanGifTag, VF05
.equr ScreenPtMaxVal, VF06
.equr ScreenPtMinVal, VF07
.equr LToC1, VF13                  ; local_clip matrix
.equr LToC2, VF14
.equr LToC3, VF15
.equr LToC4, VF16
.equr CToS1, VF01                  ; clip_screen matrix (used for Scissored triangle drawing)
.equr CToS2, VF02
.equr CToS3, VF03
.equr CToS4, VF04
.equr GIFTag, VF19                 ; gif tag(temporary)
.equr SrcVert1, VF20               ; source vertex & st (st uses Q(Perspective 1/w))
.equr SrcVert2, VF21               ; source normal & color (color uses lo_light*norm)
.equr PrevXYZ1, VF22               ; recent 3 vertex point on GSprimitive coordinate
.equr PrevXYZ2, VF23               ;
.equr PrevXYZ3, VF24               ;
.equr XYZ1, VF25               ;
.equr XYZ2, VF26               ;
.equr Zero, VF31                   ;

.global nglFrustumClipAddr
nglFrustumClipAddr:
        NOP                                     XITOP Temp
        NOP                                     IADDIU StackPtr, VI00, 1023              ; set stack pointer

        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr
        NOP                                     LQ GIFTag, NGLMEM_GIFTAG+0(Temp)           ; load gif tag

        NOP                                     IADDIU HardClipFlag, VI00, 0x7fff
        NOP                                     IADDI HardClipFlag, HardClipFlag, 1     ; hard clip is 0x8000.
        NOP                                     IADDI SoftClipFlag, HardClipFlag, 1     ; soft clip is 0x8001.

        NOP                                     LQ LToC1, NGLMEM_LOCAL_TO_CLIP+0(VI00)   ; load clip x transformation matrix
        NOP                                     LQ LToC2, NGLMEM_LOCAL_TO_CLIP+1(VI00)
        NOP                                     LQ LToC3, NGLMEM_LOCAL_TO_CLIP+2(VI00)
        NOP                                     LQ LToC4, NGLMEM_LOCAL_TO_CLIP+3(VI00)
        NOP                                     LQ CToS1, NGLMEM_CLIP_TO_SCREEN+0(VI00)
        NOP                                     LQ CToS2, NGLMEM_CLIP_TO_SCREEN+1(VI00)
        NOP                                     LQ CToS3, NGLMEM_CLIP_TO_SCREEN+2(VI00)
        NOP                                     LQ CToS4, NGLMEM_CLIP_TO_SCREEN+3(VI00)
        NOP                                     LQ TriFanGifTag, NGLMEM_TRIFAN_GIFTAG+0(VI00)
        NOP                                     LQ ScreenPtMinVal, NGLMEM_SCREEN_MIN+0(VI00)
        NOP                                     LQ ScreenPtMaxVal, NGLMEM_SCREEN_MAX+0(VI00)

        NOP                                     ILW.w Temp2, 2(DestPtr)
        NOP                                     FCSET 0

        ; Soft Clip bit detection loop.  Scans through for verts marked by the rejection clipper.
FrustumClipVertLoop:
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IAND Temp2, Temp2, SoftClipFlag
        NOP                                     IADDI SrcPtr, SrcPtr, 2
        NOP                                     IBEQ Temp2, SoftClipFlag, ScissorVert
        NOP                                     ILW.w Temp2, 5(DestPtr)
ScissorReturn:
        NOP                                     IBGTZ VertCnt, FrustumClipVertLoop
        NOP                                     IADDI DestPtr, DestPtr, 3

        NOP                                     B CommandListReturnA
        NOP                                     NOP

ScissorVert:
        ; Load up and project the XYZ values for rejection checking against the screen and guard band, values are also used in the scissor function.
        NOP                                     LQ PrevXYZ1, -6(SrcPtr)
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     NOP
        MULAx ACC, LToC1, PrevXYZ1              LQ PrevXYZ2, -4(SrcPtr)
        MADDAy ACC, LToC2, PrevXYZ1             NOP
        MADDAz ACC, LToC3, PrevXYZ1             NOP
        MADDw PrevXYZ1, LToC4, VF00w            NOP
        MULAx ACC, LToC1, PrevXYZ2              LQ PrevXYZ3, -2(SrcPtr)
        MADDAy ACC, LToC2, PrevXYZ2             NOP
        MADDAz ACC, LToC3, PrevXYZ2             NOP
        MADDw PrevXYZ2, LToC4, VF00w            NOP
        MULAx ACC, LToC1, PrevXYZ3              NOP
        MADDAy ACC, LToC2, PrevXYZ3             NOP
        MADDAz ACC, LToC3, PrevXYZ3             NOP
        MADDw PrevXYZ3, LToC4, VF00w            NOP

        ; Try to reject vs screen edges.
        NOP                                     LOI 0.25
        MULi.w PrevXYZ1, PrevXYZ1, I            NOP
        MULi.w PrevXYZ2, PrevXYZ2, I            NOP
        MULi.w PrevXYZ3, PrevXYZ3, I            NOP

        NOP                                     NOP
        CLIPw.xyz PrevXYZ1, PrevXYZ1    NOP
        CLIPw.xyz PrevXYZ2, PrevXYZ2    NOP
        CLIPw.xyz PrevXYZ3, PrevXYZ3    NOP
        NOP                                     NOP
        NOP                                     NOP
        NOP                                     LOI 4.0

        ; If all 3 verts are clipped by the same screen edge then the triangle can be Hard Clipped (not considered for clipping by future passes).
        ; (Its intentional that the FCORs are in the delay slot of the previous IBNE)
        MULi.w PrevXYZ1, PrevXYZ1, I            FCOR Temp, 0xffdf7d         ; Negative X
        MULi.w PrevXYZ2, PrevXYZ2, I            IBNE Temp, VI00, RejectVert
        MULi.w PrevXYZ3, PrevXYZ3, I            FCOR Temp, 0xffefbe         ; Positive X
        NOP                                     IBNE Temp, VI00, RejectVert
        CLIPw.xyz PrevXYZ1, PrevXYZ1    FCOR Temp, 0xff7df7         ; Negative Y
        CLIPw.xyz PrevXYZ2, PrevXYZ2    IBNE Temp, VI00, RejectVert
        CLIPw.xyz PrevXYZ3, PrevXYZ3    FCOR Temp, 0xffbefb         ; Positive Y
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     NOP
        NOP                                     NOP

        ; Try to reject vs guard band edges.
        NOP                                     FCOR Temp, 0xfdf7df         ; Negative Z
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     FCOR Temp, 0xffdf7d         ; Negative X
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     FCOR Temp, 0xffefbe         ; Positive X
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     FCOR Temp, 0xff7df7         ; Negative Y
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     FCOR Temp, 0xffbefb         ; Positive Y
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     FCOR Temp, 0xfefbef         ; Positive Z
        NOP                                     IBNE Temp, VI00, RejectVert
        NOP                                     NOP

        NOP                                     BAL  ReturnPtr, PushStackIFRegs
        NOP                                     NOP
        NOP                                     BAL  ReturnPtr, SCISSOR
        NOP                                     NOP
        NOP                                     BAL  ReturnPtr, PopStackIFRegs
        NOP                                     NOP

        ; Store ADC bit of 0x8001 - indicates soft clipped, which requires later passes to generate scissored verts.
        ; Restore the Clip flag to its previous state for continuing the testing loop.
        CLIPw.xyz PrevXYZ1, PrevXYZ1    NOP
        CLIPw.xyz PrevXYZ2, PrevXYZ2    B ScissorReturn
        CLIPw.xyz PrevXYZ3, PrevXYZ3    ISW.w SoftClipFlag, 2(DestPtr)

RejectVert:
        ; Store ADC bit of 0x8000 - indicates hard clipped, informs later passes to ignore this vertex.
        ; Restore the Clip flag to its previous state (in case we were rejected by screen polys).
        CLIPw.xyz PrevXYZ1, PrevXYZ1    NOP
        CLIPw.xyz PrevXYZ2, PrevXYZ2    B ScissorReturn
        CLIPw.xyz PrevXYZ3, PrevXYZ3    ISW.w HardClipFlag, 2(DestPtr)

; ------------------------------------- Scissor code Begin-----------------------------------
; SAL 22-May-2001: The pushing and popping of most registers before and after the scissor routines
;   isolates the scissoring from the rest of the code to a large extent.
;
; NOTE: Several definitions from nglFrustumClipAddr carry over to SCISSOR function.
; Also DrawScissoredPolys reuses a few of these.
.equr CurrPtData1, VF17            ; CurrentPtData
.equr CurrPtData2, VF18            ; CurrentPtData
.equr CurrPtData3, VF19            ; CurrentPtData
.equr TempF1, VF20             ; Used for intermediate operations.
.equr NextPtData1, VF21            ; NextPtData
.equr NextPtData2, VF22            ; NextPtData
.equr NextPtData3, VF23            ; NextPtData
.equr NextPtData4, VF24            ; NextPtData
.equr InterpPtData1, VF25          ; InterpPtData
.equr InterpPtData2, VF26          ; InterpPtData
.equr InterpPtData3, VF27          ; InterpPtData
.equr TempF2, VF28             ; Used for intermediate operations.
.equr KickBuf, VI04               ; Pointer to the next location to transform and kick generated scissored verts.
.equr ClipMask1, VI05              ;
.equr ClipMask2, VI06              ;
.equr XYZPlaneFlag, VI07           ;
.equr Buffer1, VI08                ; One of two buffers where the TriangleFan is built.
.equr Buffer2, VI09                ; One of two buffers where the TriangleFan is built.
.equr VertCnt1, VI10               ;
.equr VertCnt2, VI11               ;
.equr Temp2, VI12              ;
.equr TempPtr, VI14                ;

        ; Scissors a vertex.  This is only ever called from the ScissorVert block of code.
SCISSOR:
        ; SAL: Buffer1 and Buffer2 should point to a little below the top of the stack.
        ; Buffer1 is where we do all our interpolation, Buffer2 is where we transform into and then kick.
        ; Working on getting it so the whole thing is double buffered and happening asynchronously via KickBuf.
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 40; link buffer pointer(61+10*4)
        NOP                                         ISUBIU KickBuf, StackPtr, 120

/*
        ; Copy XYZ, ST and Color of the triangle into the clip buffer:
        ; STs come from where the rejection clipper left them for us (in W of XYZ and Norm).
        ; XYZs are passed in from the caller in PrevXYZ1-3 aka NextPtrData2-4).
        ; This abuses register naming, actually this whole function needs to be cleaned up register-wise.
        NOP                                         LQ.w InterpPtData1, -6(SrcPtr)          ; first ST
        NOP                                         LQ.w InterpPtData2, -5(SrcPtr)
        NOP                                         SQ NextPtData2, 0(Buffer1)              ; first XYZ
        NOP                                         LQ.w CurrPtData1, -4(SrcPtr)            ; second ST
        ADDw.x InterpPtData1, VF00, InterpPtData1   LQ.w CurrPtData2, -3(SrcPtr)
        ADDw.y InterpPtData1, VF00, InterpPtData2   SQ NextPtData3, 3(Buffer1)              ; second XYZ
        ADDw.z InterpPtData1, Zero, VF00w           LQ.w CurrPtData3, -2(SrcPtr)            ; third ST
        ADDw.x CurrPtData1, VF00, CurrPtData1       LQ.w InterpPtData3, -1(SrcPtr)
        ADDw.y CurrPtData1, VF00, CurrPtData2       SQ NextPtData4, 6(Buffer1)              ; third XYZ
        ADDw.z CurrPtData1, Zero, VF00w             SQ NextPtData2, 9(Buffer1)              ; first XYZ (appended to end)
        ADDw.x CurrPtData3, VF00, CurrPtData3       SQ InterpPtData1, 2(Buffer1)
        ADDw.y CurrPtData3, VF00, InterpPtData3     SQ InterpPtData1, 11(Buffer1)
        ADDw.z CurrPtData3, Zero, VF00w             LQ NextPtData2, -5(DestPtr)             ; first Color
        NOP                                         SQ CurrPtData1, 5(Buffer1)
        NOP                                         LQ NextPtData3, -2(DestPtr)             ; second Color
        ITOF0 NextPtData2, NextPtData2              LQ NextPtData4, 1(DestPtr)              ; third color
        NOP                                         SQ CurrPtData3, 8(Buffer1)
        ITOF0 NextPtData3, NextPtData3              NOP
        ITOF0 NextPtData4, NextPtData4              NOP
        NOP                                         SQ  NextPtData2, 1(Buffer1)
        NOP                                         SQ  NextPtData3, 4(Buffer1)
        NOP                                         SQ  NextPtData4, 7(Buffer1)
        NOP                                         SQ  NextPtData2, 10(Buffer1)
*/

; SAL: The UVs are set a little differently. Moving this code further up
;   from where it used to be to facilitate multiplying with the pt w values.
; SAL: Multiply the STQs with the corresponding pt w values in order to undo the change to STQs in the transform stage.
        NOP                                         LQ  InterpPtData1, -6(DestPtr);load&save texUV
        NOP                                         LQ  InterpPtData2, -3(DestPtr)
        NOP                                         LQ  InterpPtData3, 0(DestPtr)

        NOP                                         DIV Q, VF00w, InterpPtData1.z
        ADDw.z InterpPtData1, VF00, VF00            WAITQ
        MULq.xy InterpPtData1, InterpPtData1, Q     NOP

        NOP                                         DIV Q, VF00w, InterpPtData2.z
        ADDw.z InterpPtData2, VF00, VF00            WAITQ
        MULq.xy InterpPtData2, InterpPtData2, Q     NOP

        NOP                                         DIV Q, VF00w, InterpPtData3.z
        ADDw.z InterpPtData3, VF00, VF00            WAITQ
        MULq.xy InterpPtData3, InterpPtData3, Q     NOP

; SAL: Store the STQs
        NOP                                         SQ  InterpPtData1, 2(Buffer1)
        NOP                                         SQ  InterpPtData2, 5(Buffer1)
        NOP                                         SQ  InterpPtData3, 8(Buffer1)
        NOP                                         SQ  InterpPtData1, 11(Buffer1)

        NOP                                         SQ  NextPtData2, 0(Buffer1);set recent 3 point
        NOP                                         SQ  NextPtData3, 3(Buffer1)
        NOP                                         SQ  NextPtData4, 6(Buffer1)
        NOP                                         SQ  NextPtData2, 9(Buffer1); add first element to end

        NOP                                         NOP                                         ; SAL: The color are set a little differently.
        NOP                                         LQ  NextPtData2, -5(DestPtr)                ; load&save gouraud_shaded color
        NOP                                         LQ  NextPtData3, -2(DestPtr)
        NOP                                         LQ  NextPtData4, 1(DestPtr)
        ITOF0 NextPtData2, NextPtData2              NOP
        ITOF0 NextPtData3, NextPtData3              NOP
        ITOF0 NextPtData4, NextPtData4              NOP
        NOP                                         SQ  NextPtData2, 1(Buffer1)
        NOP                                         SQ  NextPtData3, 4(Buffer1)
        NOP                                         SQ  NextPtData4, 7(Buffer1)
        NOP                                         SQ  NextPtData2, 10(Buffer1)

        ; Start of the plane clipper:
        ; Z minus
        NOP                                         IADDIU  ClipMask1, VI00, 0x800              ; 2nd -z
        NOP                                         IADDIU  ClipMask2, VI00, 0x020              ; 1st -z
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 2               ; set Z flag
        NOP                                         ISUBIU Buffer1, StackPtr, 80                ; SAL: Buffer1 and Buffer2 should point to a little below the top of the stack.
        NOP                                         ISUBIU Buffer2, StackPtr, 40                ; link buffer pointer(61+10*4)
        NOP                                         IADDIU  VertCnt1, VI00, 3                   ; Keep track of the number of vertices.
        NOP                                         IADDIU  VertCnt2, VI00, 0
        SUBw.x  VF30x, VF00x, VF00w                 NOP                                         ; Load -1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)               ; Load the vertex.
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_ZM:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_ZM
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 40                ; Buffer1 and Buffer2 should point to a little below the top of the stack.
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL                ; If all the vertices were clipped out by the clipping plane then leave the routine.
        NOP                                         NOP

        ; Z plus
        NOP                                         IADDIU  ClipMask1, VI00, 0x400 ;2nd +z
        NOP                                         IADDIU  ClipMask2, VI00, 0x010 ;1st +z
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 2   ;set Z flag
        NOP                                         ISUBIU Buffer1, StackPtr, 40 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 80; link buffer pointer(61+10*4)
        NOP                                         IADD    VertCnt1, VI00, VertCnt2;num of vertex
        NOP                                         IADDIU  VertCnt2, VI00, 0   ;
        ADDw.x  VF30x, VF00x, VF00w                 NOP ;load 1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_ZP:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_ZP
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL
        NOP                                         NOP

        ; X minus
        NOP                                         IADDIU  ClipMask1, VI00, 0x080 ;2nd -x
        NOP                                         IADDIU  ClipMask2, VI00, 0x002 ;1st -x
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 0 ;set Z flag
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 40; link buffer pointer(61+10*4)
        NOP                                         IADD    VertCnt1, VI00, VertCnt2
        NOP                                         IADDIU  VertCnt2, VI00, 0;
        SUBw.x  VF30x, VF00x, VF00w                 NOP ;load -1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_XM:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_XM
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 40 ; link buffer pointer
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL
        NOP                                         NOP

        ; X plus
        NOP                                         IADDIU  ClipMask1, VI00, 0x040 ;2nd +x
        NOP                                         IADDIU  ClipMask2, VI00, 0x001 ;1st +x
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 0 ;set Z flag
        NOP                                         ISUBIU Buffer1, StackPtr, 40 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 80; link buffer pointer(61+10*4)
        NOP                                         IADD    VertCnt1, VI00, VertCnt2 ;
        NOP                                         IADDIU  VertCnt2, VI00, 0;
        ADDw.x  VF30x, VF00x, VF00w                 NOP ;load 1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_XP:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_XP
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL
        NOP                                         NOP

        ; Y minus
        NOP                                         IADDIU  ClipMask1, VI00, 0x200  ; 2nd -y
        NOP                                         IADDIU  ClipMask2, VI00, 0x008  ; 1st -y
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 1   ; set Y flag
        NOP                                         ISUBIU Buffer1, StackPtr, 80    ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 40    ; link buffer pointer(61+10*4)
        NOP                                         IADD    VertCnt1, VI00, VertCnt2
        NOP                                         IADDIU  VertCnt2, VI00, 0;
        SUBw.x  VF30x, VF00x, VF00w                 NOP ;load -1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_YM:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_YM
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 40 ; link buffer pointer
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL
        NOP                                         NOP

        ; Y plus
        NOP                                         IADDIU  ClipMask1, VI00, 0x100 ;2nd +y
        NOP                                         IADDIU  ClipMask2, VI00, 0x004 ;1st +y
        NOP                                         IADDIU  XYZPlaneFlag, VI00, 1 ;set Z flag
        NOP                                         ISUBIU Buffer1, StackPtr, 40 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 80; link buffer pointer(61+10*4)
        NOP                                         IADD    VertCnt1, VI00, VertCnt2 ;
        NOP                                         IADDIU  VertCnt2, VI00, 0;
        ADDw.x  VF30x, VF00x, VF00w                 NOP ;load 1(plane normal flag)
        NOP                                         LQI  NextPtData1, (Buffer1++)
        NOP                                         LQI  NextPtData2, (Buffer1++)
        NOP                                         LQI  NextPtData3, (Buffer1++)
LOOP_YP:
        NOP                                         BAL  TempPtr, CLIP_INTER
        NOP                                         NOP
        NOP                                         ISUBIU  VertCnt1, VertCnt1, 1
        NOP                                         NOP
        NOP                                         IBNE    VertCnt1, VI00, LOOP_YP
        NOP                                         NOP
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         BAL  TempPtr, SAVE_LAST_LOOP
        NOP                                         NOP
        NOP                                         IBEQ VertCnt2, VI00, END_ALL
        NOP                                         NOP

; SAL: Coming here means that some portion of the triangle is to be drawn.
        NOP                                         ISUBIU Buffer1, StackPtr, 80 ; link buffer pointer
        NOP                                         ISUBIU Buffer2, StackPtr, 40; link buffer pointer(61+10*4)
        NOP                                         IADD   VertCnt1, VI00, VertCnt2 ;
        NOP                                         IADDIU VertCnt2, VI00, 0;
        NOP                                         BAL  Temp, DrawScissorPolygon
        NOP                                         NOP

; SAL: Done with scissoring of this triangle.
END_ALL:
        NOP                                         JR  ReturnPtr
        NOP                                         NOP

;--------------------------------------------------------------
;  Add first element to end of the list for triangle fan
;--------------------------------------------------------------
SAVE_LAST_LOOP:
        NOP                                         LQ NextPtData1, 0(Buffer1)
        NOP                                         LQ NextPtData2, 1(Buffer1)
        NOP                                         LQ NextPtData3, 2(Buffer1)
        NOP                                         SQI NextPtData1, (Buffer2++)
        NOP                                         SQI NextPtData2, (Buffer2++)
        NOP                                         SQI NextPtData3, (Buffer2++)
        NOP                                         JR TempPtr
        NOP                                         NOP


;-------------------------------------------------------------------
;  [ Tracing TriangleFan vertex list ]
;  To trace and check two link points on the vertex list
;  (Are current&next points inside or outside against the plane?),
;  we can get the cross point and add it to the list.
;--------------------------------------------------------------------

CLIP_INTER:
        ADD CurrPtData1, Zero, NextPtData1          LQI NextPtData1, (Buffer1++) ;LOAD current&next
        ADD CurrPtData2, Zero, NextPtData2          LQI NextPtData2, (Buffer1++)
        ADD CurrPtData3, Zero, NextPtData3          LQI NextPtData3, (Buffer1++)
        NOP                                         NOP
        CLIPw.xyz CurrPtData1, CurrPtData1          NOP
        CLIPw.xyz NextPtData1, NextPtData1          NOP
        NOP                                         NOP
        NOP                                         NOP
        NOP                                         NOP
        NOP                                         FCGET Temp
        NOP                                         IAND  VI04, Temp, ClipMask1 ;currmask
        NOP                                         NOP
        NOP                                         IBEQ  VI04, VI00, CUR_IN
        NOP                                         NOP

        ; current is outside:
        NOP                                         IAND  VI04, Temp, ClipMask2
        NOP                                         NOP
        NOP                                         IBEQ  VI04, VI00, CO_NEXT_IN
        NOP                                         NOP

        ; both curr&next are outside:
        NOP                                         B  CLIP_INTER_END ;do nothing
        NOP                                         NOP

        ; curr is out & next is in (save cross point only)
CO_NEXT_IN:
        NOP                                         BAL  Temp, INTERPOLATE
        NOP                                         NOP
        NOP                                         SQI  InterpPtData1, (Buffer2++)
        NOP                                         SQI  InterpPtData2, (Buffer2++)
        NOP                                         SQI  InterpPtData3, (Buffer2++)
        NOP                                         IADDIU  VertCnt2, VertCnt2, 1
        NOP                                         B  CLIP_INTER_END
        NOP                                         NOP

        ; current is inside
CUR_IN:
        NOP                                         IAND  VI04, Temp, ClipMask2
        NOP                                         NOP
        NOP                                         IBEQ  VI04, VI00, CI_NEXT_IN
        NOP                                         NOP

        ; curr is in & next is out (save both curr&cross point):
        NOP                                         BAL  Temp, INTERPOLATE
        NOP                                         NOP
        NOP                                         SQI  CurrPtData1, (Buffer2++)
        NOP                                         SQI  CurrPtData2, (Buffer2++)
        NOP                                         SQI  CurrPtData3, (Buffer2++)
        NOP                                         SQI  InterpPtData1, (Buffer2++)
        NOP                                         SQI  InterpPtData2, (Buffer2++)
        NOP                                         SQI  InterpPtData3, (Buffer2++)
        NOP                                         IADDIU  VertCnt2, VertCnt2, 2
        NOP                                         B  CLIP_INTER_END
        NOP                                         NOP

        ; curr is in & next is in (save curr point only)
CI_NEXT_IN:
        NOP                                         SQI  CurrPtData1, (Buffer2++)
        NOP                                         SQI  CurrPtData2, (Buffer2++)
        NOP                                         SQI  CurrPtData3, (Buffer2++)
        NOP                                         IADDIU  VertCnt2, VertCnt2, 1

CLIP_INTER_END:
        NOP                                         JR  TempPtr
        NOP                                         NOP

;---------------------------------------------------------------
;  Function for Crossing point detection
;
;  c: current point (clipping coordinate)
;  n: next point (clipping coordinate)
;---------------------------------------------------------------
INTERPOLATE:
        MULx.w InterpPtData1, CurrPtData1, VF30         NOP ;sgn*c[w]
        MULx.w InterpPtData2, NextPtData1, VF30         NOP ;sgn*n[w]
        SUBw InterpPtData1, CurrPtData1, InterpPtData1  IADD Temp2, VI00, XYZPlaneFlag ; c[xyz]-sgn*c[w]         ;Num of rotation
        SUBw InterpPtData2, NextPtData1, InterpPtData2  NOP ; n[xyz]-sgn*n[w]

  LOOP_ROT:
        NOP                                         IBEQ Temp2, VI00, LOOP_ROT_END
        NOP                                         ISUBIU Temp2, Temp2, 1
        NOP                                         MR32 InterpPtData1, InterpPtData1
        NOP                                         B LOOP_ROT
        NOP                                         MR32 InterpPtData2, InterpPtData2

  LOOP_ROT_END:
        SUB.xyz InterpPtData3, InterpPtData2, InterpPtData1 NOP
        NOP                                         DIV Q, InterpPtData1.x, InterpPtData3.x
        NOP                                         WAITQ

; SAL: Q is the fraction of the distance from curr to next where the interpolated point lies.
        ADDq.x TempF2, VF00, Q                      NOP
        ABS.x TempF2, TempF2                        NOP ; ans = |(c-cw)/((n-nw)+(c-cw))|
        SUB InterpPtData1, NextPtData1, CurrPtData1 NOP ; n - c
        SUB InterpPtData2, NextPtData2, CurrPtData2 NOP
        SUB InterpPtData3, NextPtData3, CurrPtData3 NOP

; SAL: Interpolate the color, position and texture.
        MULx InterpPtData1, InterpPtData1, TempF2   NOP ; ans*(n-c)
        MULx InterpPtData2, InterpPtData2, TempF2   NOP
        MULx InterpPtData3, InterpPtData3, TempF2   NOP
        ADD InterpPtData1, InterpPtData1, CurrPtData1   NOP ; c+ans*(n-c)
        ADD InterpPtData2, InterpPtData2, CurrPtData2   NOP
        ADD InterpPtData3, InterpPtData3, CurrPtData3   NOP
        NOP                                         NOP
        NOP                                         JR  Temp
        NOP                                         NOP

        ; Perspective projection & XGKICK for the triangle fan generated by the Scissor function.  This is branched to at
        ; the end of the Scissor function, so all registers are fair game.
.equr FA, VF28                     ;
.equr FB, VF29                     ;
.equr Zero, VF30                       ;
.equr Clip, VI05                   ;
.equr FogByte, VI06                ;

DrawScissorPolygon:
; SAL: We will use the 40 lines at Buffer2 to store the verts to be kicked.
;        NOP                                         ISUBIU KickBuf, StackPtr, 120
        NOP                                         IADDIU KickBuf, Buffer2, 0

        NOP                                         IADDIU SrcPtr, Buffer1, 0           ; Set read pointer for verts (nonstandard naming for SrcPtr).
        NOP                                         IADDIU DestPtr, KickBuf, 0          ; Set store pointer for verts

        ; Write the Triangle Fan GIFtag.
        NOP                                         IADDIU VertCnt2, VertCnt1, 0x7fff
        NOP                                         IADDIU VertCnt2, VertCnt2, 1
        NOP                                         ISW.x VertCnt2, 0(DestPtr)
        NOP                                         SQI.yzw TriFanGifTag, (DestPtr++)

        ; Kick the dummy GIFtag.  This should either get queued or execute immediately causing the next XGKICK
        ; (at the end of the loop) to actually stall.
        NOP                                         IADDIU TempPtr, VI00, NGLMEM_DUMMY_GIFTAG
        NOP                                         XGKICK TempPtr

        ;MULx.w Zero, VF00, VF00                       LQ FA, NGLMEM_FOG_VAL+0(VI00)
        ;ADDx.w FA, Zero, FA                           NOP
        ;ADDy.w FB, Zero, FA                           NOP

DrawScissorLoop:
        NOP                                         LQ InterpPtData1, 0(SrcPtr)     ; load vertex
        NOP                                         LQ InterpPtData2, 1(SrcPtr)     ; load color
        NOP                                         LQ InterpPtData3, 2(SrcPtr)     ; load st

        ; Transform from clip space to screen space.
        MULAx ACC, CToS1, InterpPtData1             NOP
        MADDAy ACC, CToS2, InterpPtData1            NOP
        MADDAz ACC, CToS3, InterpPtData1            NOP
        MADDw InterpPtData1, CToS4, InterpPtData1   NOP
        NOP                                         DIV Q, VF00w, InterpPtData1.w
        NOP                                         WAITQ

        ; --- calc transformed position and store it ---
        MULq InterpPtData1, InterpPtData1, Q        NOP
        MULq.xyz InterpPtData3, InterpPtData3, Q    NOP
        FTOI0 InterpPtData2, InterpPtData2          NOP

        MINI.xyz InterpPtData1, InterpPtData1, ScreenPtMaxVal   NOP
        MAX.xyz InterpPtData1, InterpPtData1, ScreenPtMinVal    NOP

        FTOI4 InterpPtData1, InterpPtData1          NOP
        NOP                                         SQ InterpPtData3, 0(DestPtr)   ; store st
        NOP                                         SQ InterpPtData2, 1(DestPtr)   ; store color
        NOP                                         SQ InterpPtData1, 2(DestPtr)   ; store vertex
/*
        MULA.w ACC, FA, VF00                        NOP                     ; ACCw=FA
        MADDq.w Fog, FB, Q                          LOI 255.0               ; Fog.w=ACCw+FB*(1/W)
        MINIi.w Fog, Fog, I                         NOP
        MAXx.w Fog, Fog, VF00                       NOP
        FTOI4.w Fog, Fog                            NOP;ILW.w Clip, 2(DestPtr)
        NOP                                         NOP
        NOP                                         NOP
        NOP                                         NOP
        NOP                                         MTIR FogByte, Fog.w
;      NOP                                         IOR FogByte, FogByte, Clip
;        NOP                                           ISW.w FogByte, 2(DestPtr)
*/
        NOP                                         IADDI VertCnt1, VertCnt1, -1
        NOP                                         IADDIU DestPtr, DestPtr, 3
        NOP                                         IADDIU SrcPtr, SrcPtr, 3

        NOP                                         IBNE VertCnt1, VI00, DrawScissorLoop
        NOP                                         NOP

        NOP                                         XGKICK KickBuf
        NOP                                         NOP

        ; Swap the kick buffer.
;        NOP                                         ISUBIU Temp, StackPtr, 120
;        NOP                                         NOP
;        NOP                                         IBEQ KickBuf, Temp, HighBuf
;        NOP                                         ISUBIU KickBuf, StackPtr, 160
;        NOP                                         ISUBIU KickBuf, StackPtr, 120
;HighBuf:

        ; SAL: To postpone dealing with potential memory conflicts, stall here.
        NOP                                         IADDIU TempPtr, VI00, NGLMEM_DUMMY_GIFTAG
        NOP                                         NOP
        NOP                                         XGKICK TempPtr
        NOP                                         NOP
        NOP                                         JR Temp
        NOP                                         NOP

; -------------------------------------------------------------------
;   PushStackIFRegs
;
; SAL: Push all the registers we may need after the scissoring of a triangle is done.
;   This is called just before calling the scissor routine.
PushStackIFRegs:
        NOP                                     SQD VF17, (--StackPtr)
        NOP                                     SQD VF18, (--StackPtr)
        NOP                                     SQD VF19, (--StackPtr)
        NOP                                     SQD VF20, (--StackPtr)
        NOP                                     SQD VF21, (--StackPtr)
        NOP                                     SQD VF22, (--StackPtr)
        NOP                                     SQD VF23, (--StackPtr)
        NOP                                     SQD VF24, (--StackPtr)
        NOP                                     SQD VF25, (--StackPtr)
        NOP                                     SQD VF26, (--StackPtr)
        NOP                                     SQD VF27, (--StackPtr)
        NOP                                     SQD VF28, (--StackPtr)
        NOP                                     SQD VF29, (--StackPtr)
        NOP                                     SQD VF30, (--StackPtr)
        NOP                                     SQD VF31, (--StackPtr)
        NOP                                     ISUBIU StackPtr, StackPtr, 1
        NOP                                     ISWR.x VI02, (StackPtr)
        NOP                                     ISWR.y VI03, (StackPtr)
        NOP                                     ISWR.z VI04, (StackPtr)
        NOP                                     ISWR.w VI05, (StackPtr)
        NOP                                     ISUBIU StackPtr, StackPtr, 1
        NOP                                     ISWR.x VI06, (StackPtr)
        NOP                                     ISWR.y VI07, (StackPtr)
        NOP                                     ISWR.z VI08, (StackPtr)
        NOP                                     ISWR.w VI09, (StackPtr)
        NOP                                     ISUBIU StackPtr, StackPtr, 1
        NOP                                     ISWR.x VI10, (StackPtr)
        NOP                                     ISWR.y VI11, (StackPtr)
        NOP                                     ISWR.z VI12, (StackPtr)
        NOP                                     ISWR.w VI13, (StackPtr)
        NOP                                     ISUBIU StackPtr, StackPtr, 1
        NOP                                     ISWR.x VI14, (StackPtr)
        NOP                                     ISWR.y VI15, (StackPtr)
        NOP                                     NOP
        NOP                                     JR ReturnPtr
        NOP                                     NOP

; SAL: Restore all the registers we may need after the scissoring of a triangle is done.
;   This is called just after calling the scissor routine.
;   NOTE: It is necessary that the StackPtr be VI02 for PopStackIFRegs to work correctly.
;   NOTE: VI01 is not being pushed and popped but is used as a Temp value.
PopStackIFRegs:
        NOP                                     IADD VI01, VI00, ReturnPtr
        NOP                                     ILWR.x VI14, (StackPtr)
        NOP                                     ILWR.y VI15, (StackPtr)
        NOP                                     IADDIU StackPtr, StackPtr, 1
        NOP                                     ILWR.x VI10, (StackPtr)
        NOP                                     ILWR.y VI11, (StackPtr)
        NOP                                     ILWR.z VI12, (StackPtr)
        NOP                                     ILWR.w VI13, (StackPtr)
        NOP                                     IADDIU StackPtr, StackPtr, 1
        NOP                                     ILWR.x VI06, (StackPtr)
        NOP                                     ILWR.y VI07, (StackPtr)
        NOP                                     ILWR.z VI08, (StackPtr)
        NOP                                     ILWR.w VI09, (StackPtr)
        NOP                                     IADDIU StackPtr, StackPtr, 1
;        NOP                                     ILWR.x   VI02, (StackPtr)             ; This could mess things up as we are using VI02 as the StackPtr. So comment out.
        NOP                                     ILWR.y VI03, (StackPtr)
        NOP                                     ILWR.z VI04, (StackPtr)
        NOP                                     ILWR.w VI05, (StackPtr)
        NOP                                     IADDIU StackPtr, StackPtr, 1
        NOP                                     LQI VF31, (StackPtr++)
        NOP                                     LQI VF30, (StackPtr++)
        NOP                                     LQI VF29, (StackPtr++)
        NOP                                     LQI VF28, (StackPtr++)
        NOP                                     LQI VF27, (StackPtr++)
        NOP                                     LQI VF26, (StackPtr++)
        NOP                                     LQI VF25, (StackPtr++)
        NOP                                     LQI VF24, (StackPtr++)
        NOP                                     LQI VF23, (StackPtr++)
        NOP                                     LQI VF22, (StackPtr++)
        NOP                                     LQI VF21, (StackPtr++)
        NOP                                     LQI VF20, (StackPtr++)
        NOP                                     LQI VF19, (StackPtr++)
        NOP                                     LQI VF18, (StackPtr++)
        NOP                                     LQI VF17, (StackPtr++)
        NOP                                     NOP
        NOP                                     JR VI01
        NOP                                     NOP

/*----------------------------------------------------------------------------------------------------------------------
    nglDummyAddr

    The simplest function for looping through the vertices.  Template use only.
----------------------------------------------------------------------------------------------------------------------*/
.equr Temp, VI01                   ; unused
.equr VertCnt, VI04                ; verts in strip counter

.equr SrcPtr, VI05                 ; src pointer - source xyz and normal
.equr DestPtr, VI06                ; dest pointer - st, color and final xyz

.equr Zero, VF01                   ; (0,0,0,0) constant.
/*
.global nglDummyAddr
nglDummyAddr:
        NOP                                     XITOP Temp                          ; get base ptr
        MULx Zero, VF00, VF00                   IADDIU DestPtr, Temp, NGLMEM_VERT_START
        NOP                                     ILW.x VertCnt, NGLMEM_GIFTAG+0(Temp)x
        NOP                                     IAND VertCnt, VertCnt, gGIFTagMask
        NOP                                     IADD SrcPtr, Temp, gSrcBufPtr

DummyVertLoop:
        NOP                                     IADDI VertCnt, VertCnt, -1
        NOP                                     IADDIU SrcPtr, SrcPtr, 2
        NOP                                     IADDIU DestPtr, DestPtr, 3

        NOP                                     IBGTZ VertCnt, DummyVertLoop
        NOP                                     NOP

        NOP                                     B CommandListReturnA
        NOP                                     NOP
*/

.global nglEndAddr
nglEndAddr:
.EndMPG
.EndDmaData

