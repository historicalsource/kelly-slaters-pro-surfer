/*  THIS FILE IS AUTOMATICALLY GENERATED BY EXPORT FROM THE EXCEL FILE:  GLOBALTEXT.XLS
    ALL CHANGES SHOULD BE MADE IN EXCEL AND RE_EXPORTED.  DO NOT HAND EDIT.
*/

#include "global.h"
#include "globaltextenum.h"
#include "hwrasterize.h"
#include "file_finder.h"
#include "kshooks.h"

stringx ksGlobalTextArray[GT_LAST];
stringx ksGlobalButtonArray[BUTTON_LAST];
int ksGlobalTextLanguage;

void GLOBALTEXT_Load()
{
    nglFileBuf file;
    file.Buf = NULL;
    file.Size = 0;
    KSReadFile("globaltext.dat", &file, 1);
    char* buffer = (char*) file.Buf;
    if(!buffer)
    {
         KSReleaseFile(&file);
         assert(0);
    }

    char word[512];
    int row_num = 0;
    int lang_num = 0;
    int plat_num = 0;
    int word_ct = 0;
    char c;
    bool found_start = false;
    bool in_word = false;

    for(int i=0; i<(signed)file.Size; i++)
    {
         c = buffer[i];
         if((c == ' ' && !in_word) || c == '\t' || c == '\r' || (c == '\n' && !found_start)) continue;
         found_start = true;
         if(c == '\n')
         {
              word[word_ct] = '\0';
              if(row_num < GT_LAST)
              {
                   if(lang_num == ksGlobalTextLanguage)
                        ksGlobalTextArray[row_num] = stringx(word);
                   lang_num++;
                   word_ct = 0;
                   in_word = false;
                   if(lang_num >= LANGUAGE_LAST)
                   {
                        lang_num = 0;
                        row_num++;
                   }
              }
              else
              {
                   assert(row_num < GT_LAST + BUTTON_LAST);
#ifdef TARGET_PS2
                   if(plat_num == PLATFORM_PS2)
                        ksGlobalButtonArray[row_num-GT_LAST] = stringx(word);
#endif
#ifdef TARGET_XBOX
                   if(plat_num == PLATFORM_XBOX)
                        ksGlobalButtonArray[row_num-GT_LAST] = stringx(word);
#endif
#ifdef TARGET_GC
                   if(plat_num == PLATFORM_GC)
                        ksGlobalButtonArray[row_num-GT_LAST] = stringx(word);
#endif
                   plat_num++;
                   word_ct = 0;
                   in_word = false;
                   if(plat_num >= PLATFORM_LAST)
                   {
                        plat_num = 0;
                        row_num++;
                   }
              }
         }
         else
         {
              in_word = true;
              assert(word_ct < 512);
              word[word_ct] = c;
              word_ct++;
         }
    }

    KSReleaseFile(&file);
}


char ksGlobalReplaceArray[GT_REPLACE_LAST][2] = 
{
    { '~', '\n' },
};

char ksGlobalReplaceFRArray[GT_REPLACE_FR_LAST][2] = 
{
    { '«', '\"' },
    { '»', '\"' },
    { 'à', '¡' },
    { 'é', '¢' },
    { 'î', '£' },
    { 'è', '¤' },
    { 'ê', '¥' },
    { 'â', '¦' },
    { 'ç', '§' },
    { 'ô', '¨' },
    { 'ù', 'ª' },
    { 'û', '«' },
    { 'ï', '±' },
};

char ksGlobalReplaceGEArray[GT_REPLACE_GE_LAST][2] = 
{
    { 'ö', '¬' },
    { 'ü', '¯' },
    { 'ä', '°' },
    { 'ß', '`' },
    { 'Ü', '²' },
};

