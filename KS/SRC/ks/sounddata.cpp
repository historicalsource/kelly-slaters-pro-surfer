/*  THIS FILE IS AUTOMATICALLY GENERATED BY EXPORT FROM THE EXCEL FILE:  SOUNDDATA.XLS
    ALL CHANGES SHOULD BE MADE IN EXCEL AND RE_EXPORTED.  DO NOT HAND EDIT.
    David Cook, Treyarch, 6/25/01
*/

#include "global.h"
#include "kellyslater_controller.h"
#include "kshooks.h"
#include "SoundScript.h"
#include "surferdata.h"

SSPlayTypes EventFreq[]= {
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_MANY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE_PER_ENTITY,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE_PER_ENTITY,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE,
    SS_ONCE
};
bool EventDampGuard[]= {
    false,
    false,
    false,
    false,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false
};
void SOUNDDATA_Load(void)
{
    nglFileBuf F;
    char *lineptr, *word, *s, *eol;
    char line[2000];
    KSReadFile("sounddata.dat", &F, 1);
    s = (char *) F.Buf;
    lineptr = s;

    for(int i = 0; i < SS_LAST; i++)
    {
         eol = strchr(lineptr, '\n');
         assert(lineptr < (char *)(F.Buf + F.Size));
         assert (eol-lineptr < 1999);
         memcpy(line, lineptr, eol-lineptr);
         line[eol-lineptr-1] = '\0';
         word = strtok(line," ,\t\n");
         while (word)
         {
              nslSourceId s = nslLoadSource(word);
              if (s != NSL_INVALID_ID) SoundScriptManager::inst()->createMapping((EventType)i, s);
              word = strtok(NULL, " ,\t\n");
         }
         lineptr = eol + 1;
    }
    KSReleaseFile(&F);
}
